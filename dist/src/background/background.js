var _=function(bt){"use strict";var Yt={exports:{}},wt={},Gt={exports:{}},et={exports:{}};et.exports,function(l,i){/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(){typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart=="function"&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);var u="18.3.1",d=Symbol.for("react.element"),p=Symbol.for("react.portal"),h=Symbol.for("react.fragment"),m=Symbol.for("react.strict_mode"),O=Symbol.for("react.profiler"),E=Symbol.for("react.provider"),k=Symbol.for("react.context"),T=Symbol.for("react.forward_ref"),z=Symbol.for("react.suspense"),q=Symbol.for("react.suspense_list"),Z=Symbol.for("react.memo"),ee=Symbol.for("react.lazy"),ce=Symbol.for("react.offscreen"),ne=Symbol.iterator,fe="@@iterator";function x(e){if(e===null||typeof e!="object")return null;var t=ne&&e[ne]||e[fe];return typeof t=="function"?t:null}var ve={current:null},ae={transition:null},M={current:null,isBatchingLegacy:!1,didScheduleLegacyUpdate:!1},F={current:null},J={},W=null;function te(e){W=e}J.setExtraStackFrame=function(e){W=e},J.getCurrentStack=null,J.getStackAddendum=function(){var e="";W&&(e+=W);var t=J.getCurrentStack;return t&&(e+=t()||""),e};var Ee=!1,ye=!1,ue=!1,B=!1,se=!1,Y={ReactCurrentDispatcher:ve,ReactCurrentBatchConfig:ae,ReactCurrentOwner:F};Y.ReactDebugCurrentFrame=J,Y.ReactCurrentActQueue=M;function oe(e){{for(var t=arguments.length,n=new Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];de("warn",e,n)}}function w(e){{for(var t=arguments.length,n=new Array(t>1?t-1:0),a=1;a<t;a++)n[a-1]=arguments[a];de("error",e,n)}}function de(e,t,n){{var a=Y.ReactDebugCurrentFrame,s=a.getStackAddendum();s!==""&&(t+="%s",n=n.concat([s]));var y=n.map(function(f){return String(f)});y.unshift("Warning: "+t),Function.prototype.apply.call(console[e],console,y)}}var ke={};function U(e,t){{var n=e.constructor,a=n&&(n.displayName||n.name)||"ReactClass",s=a+"."+t;if(ke[s])return;w("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",t,a),ke[s]=!0}}var pe={isMounted:function(e){return!1},enqueueForceUpdate:function(e,t,n){U(e,"forceUpdate")},enqueueReplaceState:function(e,t,n,a){U(e,"replaceState")},enqueueSetState:function(e,t,n,a){U(e,"setState")}},H=Object.assign,me={};Object.freeze(me);function G(e,t,n){this.props=e,this.context=t,this.refs=me,this.updater=n||pe}G.prototype.isReactComponent={},G.prototype.setState=function(e,t){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},G.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};{var le={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},Oe=function(e,t){Object.defineProperty(G.prototype,e,{get:function(){oe("%s(...) is deprecated in plain JavaScript React classes. %s",t[0],t[1])}})};for(var xe in le)le.hasOwnProperty(xe)&&Oe(xe,le[xe])}function je(){}je.prototype=G.prototype;function ze(e,t,n){this.props=e,this.context=t,this.refs=me,this.updater=n||pe}var Ce=ze.prototype=new je;Ce.constructor=ze,H(Ce,G.prototype),Ce.isPureReactComponent=!0;function Ct(){var e={current:null};return Object.seal(e),e}var tt=Array.isArray;function Ve(e){return tt(e)}function _t(e){{var t=typeof Symbol=="function"&&Symbol.toStringTag,n=t&&e[Symbol.toStringTag]||e.constructor.name||"Object";return n}}function We(e){try{return _e(e),!1}catch{return!0}}function _e(e){return""+e}function De(e){if(We(e))return w("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",_t(e)),_e(e)}function rt(e,t,n){var a=e.displayName;if(a)return a;var s=t.displayName||t.name||"";return s!==""?n+"("+s+")":n}function Ie(e){return e.displayName||"Context"}function he(e){if(e==null)return null;if(typeof e.tag=="number"&&w("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case h:return"Fragment";case p:return"Portal";case O:return"Profiler";case m:return"StrictMode";case z:return"Suspense";case q:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case k:var t=e;return Ie(t)+".Consumer";case E:var n=e;return Ie(n._context)+".Provider";case T:return rt(e,e.render,"ForwardRef");case Z:var a=e.displayName||null;return a!==null?a:he(e.type)||"Memo";case ee:{var s=e,y=s._payload,f=s._init;try{return he(f(y))}catch{return null}}}return null}var Ne=Object.prototype.hasOwnProperty,Be={key:!0,ref:!0,__self:!0,__source:!0},nt,at,Ye;Ye={};function Xe(e){if(Ne.call(e,"ref")){var t=Object.getOwnPropertyDescriptor(e,"ref").get;if(t&&t.isReactWarning)return!1}return e.ref!==void 0}function Re(e){if(Ne.call(e,"key")){var t=Object.getOwnPropertyDescriptor(e,"key").get;if(t&&t.isReactWarning)return!1}return e.key!==void 0}function Rt(e,t){var n=function(){nt||(nt=!0,w("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}function ot(e,t){var n=function(){at||(at=!0,w("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",t))};n.isReactWarning=!0,Object.defineProperty(e,"ref",{get:n,configurable:!0})}function it(e){if(typeof e.ref=="string"&&F.current&&e.__self&&F.current.stateNode!==e.__self){var t=he(F.current.type);Ye[t]||(w('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',t,e.ref),Ye[t]=!0)}}var $e=function(e,t,n,a,s,y,f){var g={$$typeof:d,type:e,key:t,ref:n,props:f,_owner:y};return g._store={},Object.defineProperty(g._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(g,"_self",{configurable:!1,enumerable:!1,writable:!1,value:a}),Object.defineProperty(g,"_source",{configurable:!1,enumerable:!1,writable:!1,value:s}),Object.freeze&&(Object.freeze(g.props),Object.freeze(g)),g};function Tt(e,t,n){var a,s={},y=null,f=null,g=null,P=null;if(t!=null){Xe(t)&&(f=t.ref,it(t)),Re(t)&&(De(t.key),y=""+t.key),g=t.__self===void 0?null:t.__self,P=t.__source===void 0?null:t.__source;for(a in t)Ne.call(t,a)&&!Be.hasOwnProperty(a)&&(s[a]=t[a])}var j=arguments.length-2;if(j===1)s.children=n;else if(j>1){for(var D=Array(j),I=0;I<j;I++)D[I]=arguments[I+2];Object.freeze&&Object.freeze(D),s.children=D}if(e&&e.defaultProps){var $=e.defaultProps;for(a in $)s[a]===void 0&&(s[a]=$[a])}if(y||f){var V=typeof e=="function"?e.displayName||e.name||"Unknown":e;y&&Rt(s,V),f&&ot(s,V)}return $e(e,y,f,g,P,F.current,s)}function St(e,t){var n=$e(e.type,t,e.ref,e._self,e._source,e._owner,e.props);return n}function Pt(e,t,n){if(e==null)throw new Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a,s=H({},e.props),y=e.key,f=e.ref,g=e._self,P=e._source,j=e._owner;if(t!=null){Xe(t)&&(f=t.ref,j=F.current),Re(t)&&(De(t.key),y=""+t.key);var D;e.type&&e.type.defaultProps&&(D=e.type.defaultProps);for(a in t)Ne.call(t,a)&&!Be.hasOwnProperty(a)&&(t[a]===void 0&&D!==void 0?s[a]=D[a]:s[a]=t[a])}var I=arguments.length-2;if(I===1)s.children=n;else if(I>1){for(var $=Array(I),V=0;V<I;V++)$[V]=arguments[V+2];s.children=$}return $e(e.type,y,f,g,P,j,s)}function Te(e){return typeof e=="object"&&e!==null&&e.$$typeof===d}var st=".",At=":";function Ot(e){var t=/[=:]/g,n={"=":"=0",":":"=2"},a=e.replace(t,function(s){return n[s]});return"$"+a}var Ge=!1,lt=/\/+/g;function ge(e){return e.replace(lt,"$&/")}function Me(e,t){return typeof e=="object"&&e!==null&&e.key!=null?(De(e.key),Ot(""+e.key)):t.toString(36)}function Se(e,t,n,a,s){var y=typeof e;(y==="undefined"||y==="boolean")&&(e=null);var f=!1;if(e===null)f=!0;else switch(y){case"string":case"number":f=!0;break;case"object":switch(e.$$typeof){case d:case p:f=!0}}if(f){var g=e,P=s(g),j=a===""?st+Me(g,0):a;if(Ve(P)){var D="";j!=null&&(D=ge(j)+"/"),Se(P,t,D,"",function(un){return un})}else P!=null&&(Te(P)&&(P.key&&(!g||g.key!==P.key)&&De(P.key),P=St(P,n+(P.key&&(!g||g.key!==P.key)?ge(""+P.key)+"/":"")+j)),t.push(P));return 1}var I,$,V=0,X=a===""?st:a+At;if(Ve(e))for(var gt=0;gt<e.length;gt++)I=e[gt],$=X+Me(I,gt),V+=Se(I,t,n,$,s);else{var Bt=x(e);if(typeof Bt=="function"){var Er=e;Bt===Er.entries&&(Ge||oe("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),Ge=!0);for(var ln=Bt.call(Er),kr,cn=0;!(kr=ln.next()).done;)I=kr.value,$=X+Me(I,cn++),V+=Se(I,t,n,$,s)}else if(y==="object"){var Cr=String(e);throw new Error("Objects are not valid as a React child (found: "+(Cr==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":Cr)+"). If you meant to render a collection of children, use an array instead.")}}return V}function Le(e,t,n){if(e==null)return e;var a=[],s=0;return Se(e,a,"","",function(y){return t.call(n,y,s++)}),a}function xt(e){var t=0;return Le(e,function(){t++}),t}function ct(e,t,n){Le(e,function(){t.apply(this,arguments)},n)}function jt(e){return Le(e,function(t){return t})||[]}function ut(e){if(!Te(e))throw new Error("React.Children.only expected to receive a single React element child.");return e}function ft(e){var t={$$typeof:k,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};t.Provider={$$typeof:E,_context:t};var n=!1,a=!1,s=!1;{var y={$$typeof:k,_context:t};Object.defineProperties(y,{Provider:{get:function(){return a||(a=!0,w("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")),t.Provider},set:function(f){t.Provider=f}},_currentValue:{get:function(){return t._currentValue},set:function(f){t._currentValue=f}},_currentValue2:{get:function(){return t._currentValue2},set:function(f){t._currentValue2=f}},_threadCount:{get:function(){return t._threadCount},set:function(f){t._threadCount=f}},Consumer:{get:function(){return n||(n=!0,w("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")),t.Consumer}},displayName:{get:function(){return t.displayName},set:function(f){s||(oe("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",f),s=!0)}}}),t.Consumer=y}return t._currentRenderer=null,t._currentRenderer2=null,t}var Fe=-1,qe=0,Je=1,zt=2;function Dt(e){if(e._status===Fe){var t=e._result,n=t();if(n.then(function(y){if(e._status===qe||e._status===Fe){var f=e;f._status=Je,f._result=y}},function(y){if(e._status===qe||e._status===Fe){var f=e;f._status=zt,f._result=y}}),e._status===Fe){var a=e;a._status=qe,a._result=n}}if(e._status===Je){var s=e._result;return s===void 0&&w(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`,s),"default"in s||w(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`,s),s.default}else throw e._result}function r(e){var t={_status:Fe,_result:e},n={$$typeof:ee,_payload:t,_init:Dt};{var a,s;Object.defineProperties(n,{defaultProps:{configurable:!0,get:function(){return a},set:function(y){w("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),a=y,Object.defineProperty(n,"defaultProps",{enumerable:!0})}},propTypes:{configurable:!0,get:function(){return s},set:function(y){w("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),s=y,Object.defineProperty(n,"propTypes",{enumerable:!0})}}})}return n}function o(e){e!=null&&e.$$typeof===Z?w("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):typeof e!="function"?w("forwardRef requires a render function but was given %s.",e===null?"null":typeof e):e.length!==0&&e.length!==2&&w("forwardRef render functions accept exactly two parameters: props and ref. %s",e.length===1?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),e!=null&&(e.defaultProps!=null||e.propTypes!=null)&&w("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");var t={$$typeof:T,render:e};{var n;Object.defineProperty(t,"displayName",{enumerable:!1,configurable:!0,get:function(){return n},set:function(a){n=a,!e.name&&!e.displayName&&(e.displayName=a)}})}return t}var c;c=Symbol.for("react.module.reference");function v(e){return!!(typeof e=="string"||typeof e=="function"||e===h||e===O||se||e===m||e===z||e===q||B||e===ce||Ee||ye||ue||typeof e=="object"&&e!==null&&(e.$$typeof===ee||e.$$typeof===Z||e.$$typeof===E||e.$$typeof===k||e.$$typeof===T||e.$$typeof===c||e.getModuleId!==void 0))}function A(e,t){v(e)||w("memo: The first argument must be a component. Instead received: %s",e===null?"null":typeof e);var n={$$typeof:Z,type:e,compare:t===void 0?null:t};{var a;Object.defineProperty(n,"displayName",{enumerable:!1,configurable:!0,get:function(){return a},set:function(s){a=s,!e.name&&!e.displayName&&(e.displayName=s)}})}return n}function b(){var e=ve.current;return e===null&&w(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`),e}function S(e){var t=b();if(e._context!==void 0){var n=e._context;n.Consumer===e?w("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"):n.Provider===e&&w("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?")}return t.useContext(e)}function C(e){var t=b();return t.useState(e)}function K(e,t,n){var a=b();return a.useReducer(e,t,n)}function N(e){var t=b();return t.useRef(e)}function L(e,t){var n=b();return n.useEffect(e,t)}function ie(e,t){var n=b();return n.useInsertionEffect(e,t)}function Pe(e,t){var n=b();return n.useLayoutEffect(e,t)}function be(e,t){var n=b();return n.useCallback(e,t)}function Q(e,t){var n=b();return n.useMemo(e,t)}function Qe(e,t,n){var a=b();return a.useImperativeHandle(e,t,n)}function It(e,t){{var n=b();return n.useDebugValue(e,t)}}function Nt(){var e=b();return e.useTransition()}function Fr(e){var t=b();return t.useDeferredValue(e)}function Ur(){var e=b();return e.useId()}function Vr(e,t,n){var a=b();return a.useSyncExternalStore(e,t,n)}var Ze=0,er,tr,rr,nr,ar,or,ir;function sr(){}sr.__reactDisabledLog=!0;function Wr(){{if(Ze===0){er=console.log,tr=console.info,rr=console.warn,nr=console.error,ar=console.group,or=console.groupCollapsed,ir=console.groupEnd;var e={configurable:!0,enumerable:!0,value:sr,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Ze++}}function Br(){{if(Ze--,Ze===0){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:H({},e,{value:er}),info:H({},e,{value:tr}),warn:H({},e,{value:rr}),error:H({},e,{value:nr}),group:H({},e,{value:ar}),groupCollapsed:H({},e,{value:or}),groupEnd:H({},e,{value:ir})})}Ze<0&&w("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}}var $t=Y.ReactCurrentDispatcher,Mt;function dt(e,t,n){{if(Mt===void 0)try{throw Error()}catch(s){var a=s.stack.trim().match(/\n( *(at )?)/);Mt=a&&a[1]||""}return`
`+Mt+e}}var Lt=!1,pt;{var Yr=typeof WeakMap=="function"?WeakMap:Map;pt=new Yr}function lr(e,t){if(!e||Lt)return"";{var n=pt.get(e);if(n!==void 0)return n}var a;Lt=!0;var s=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var y;y=$t.current,$t.current=null,Wr();try{if(t){var f=function(){throw Error()};if(Object.defineProperty(f.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(f,[])}catch(X){a=X}Reflect.construct(e,[],f)}else{try{f.call()}catch(X){a=X}e.call(f.prototype)}}else{try{throw Error()}catch(X){a=X}e()}}catch(X){if(X&&a&&typeof X.stack=="string"){for(var g=X.stack.split(`
`),P=a.stack.split(`
`),j=g.length-1,D=P.length-1;j>=1&&D>=0&&g[j]!==P[D];)D--;for(;j>=1&&D>=0;j--,D--)if(g[j]!==P[D]){if(j!==1||D!==1)do if(j--,D--,D<0||g[j]!==P[D]){var I=`
`+g[j].replace(" at new "," at ");return e.displayName&&I.includes("<anonymous>")&&(I=I.replace("<anonymous>",e.displayName)),typeof e=="function"&&pt.set(e,I),I}while(j>=1&&D>=0);break}}}finally{Lt=!1,$t.current=y,Br(),Error.prepareStackTrace=s}var $=e?e.displayName||e.name:"",V=$?dt($):"";return typeof e=="function"&&pt.set(e,V),V}function Gr(e,t,n){return lr(e,!1)}function Hr(e){var t=e.prototype;return!!(t&&t.isReactComponent)}function ht(e,t,n){if(e==null)return"";if(typeof e=="function")return lr(e,Hr(e));if(typeof e=="string")return dt(e);switch(e){case z:return dt("Suspense");case q:return dt("SuspenseList")}if(typeof e=="object")switch(e.$$typeof){case T:return Gr(e.render);case Z:return ht(e.type,t,n);case ee:{var a=e,s=a._payload,y=a._init;try{return ht(y(s),t,n)}catch{}}}return""}var cr={},ur=Y.ReactDebugCurrentFrame;function vt(e){if(e){var t=e._owner,n=ht(e.type,e._source,t?t.type:null);ur.setExtraStackFrame(n)}else ur.setExtraStackFrame(null)}function Kr(e,t,n,a,s){{var y=Function.call.bind(Ne);for(var f in e)if(y(e,f)){var g=void 0;try{if(typeof e[f]!="function"){var P=Error((a||"React class")+": "+n+" type `"+f+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[f]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw P.name="Invariant Violation",P}g=e[f](t,f,a,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(j){g=j}g&&!(g instanceof Error)&&(vt(s),w("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",a||"React class",n,f,typeof g),vt(null)),g instanceof Error&&!(g.message in cr)&&(cr[g.message]=!0,vt(s),w("Failed %s type: %s",n,g.message),vt(null))}}}function He(e){if(e){var t=e._owner,n=ht(e.type,e._source,t?t.type:null);te(n)}else te(null)}var Ft;Ft=!1;function fr(){if(F.current){var e=he(F.current.type);if(e)return`

Check the render method of \``+e+"`."}return""}function Xr(e){if(e!==void 0){var t=e.fileName.replace(/^.*[\\\/]/,""),n=e.lineNumber;return`

Check your code at `+t+":"+n+"."}return""}function qr(e){return e!=null?Xr(e.__source):""}var dr={};function Jr(e){var t=fr();if(!t){var n=typeof e=="string"?e:e.displayName||e.name;n&&(t=`

Check the top-level render call using <`+n+">.")}return t}function pr(e,t){if(!(!e._store||e._store.validated||e.key!=null)){e._store.validated=!0;var n=Jr(t);if(!dr[n]){dr[n]=!0;var a="";e&&e._owner&&e._owner!==F.current&&(a=" It was passed a child from "+he(e._owner.type)+"."),He(e),w('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',n,a),He(null)}}}function hr(e,t){if(typeof e=="object"){if(Ve(e))for(var n=0;n<e.length;n++){var a=e[n];Te(a)&&pr(a,t)}else if(Te(e))e._store&&(e._store.validated=!0);else if(e){var s=x(e);if(typeof s=="function"&&s!==e.entries)for(var y=s.call(e),f;!(f=y.next()).done;)Te(f.value)&&pr(f.value,t)}}}function vr(e){{var t=e.type;if(t==null||typeof t=="string")return;var n;if(typeof t=="function")n=t.propTypes;else if(typeof t=="object"&&(t.$$typeof===T||t.$$typeof===Z))n=t.propTypes;else return;if(n){var a=he(t);Kr(n,e.props,"prop",a,e)}else if(t.PropTypes!==void 0&&!Ft){Ft=!0;var s=he(t);w("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",s||"Unknown")}typeof t.getDefaultProps=="function"&&!t.getDefaultProps.isReactClassApproved&&w("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function Qr(e){{for(var t=Object.keys(e.props),n=0;n<t.length;n++){var a=t[n];if(a!=="children"&&a!=="key"){He(e),w("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",a),He(null);break}}e.ref!==null&&(He(e),w("Invalid attribute `ref` supplied to `React.Fragment`."),He(null))}}function yr(e,t,n){var a=v(e);if(!a){var s="";(e===void 0||typeof e=="object"&&e!==null&&Object.keys(e).length===0)&&(s+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var y=qr(t);y?s+=y:s+=fr();var f;e===null?f="null":Ve(e)?f="array":e!==void 0&&e.$$typeof===d?(f="<"+(he(e.type)||"Unknown")+" />",s=" Did you accidentally export a JSX literal instead of a component?"):f=typeof e,w("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",f,s)}var g=Tt.apply(this,arguments);if(g==null)return g;if(a)for(var P=2;P<arguments.length;P++)hr(arguments[P],e);return e===h?Qr(g):vr(g),g}var mr=!1;function Zr(e){var t=yr.bind(null,e);return t.type=e,mr||(mr=!0,oe("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")),Object.defineProperty(t,"type",{enumerable:!1,get:function(){return oe("Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),t}function en(e,t,n){for(var a=Pt.apply(this,arguments),s=2;s<arguments.length;s++)hr(arguments[s],a.type);return vr(a),a}function tn(e,t){var n=ae.transition;ae.transition={};var a=ae.transition;ae.transition._updatedFibers=new Set;try{e()}finally{if(ae.transition=n,n===null&&a._updatedFibers){var s=a._updatedFibers.size;s>10&&oe("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."),a._updatedFibers.clear()}}}var gr=!1,yt=null;function rn(e){if(yt===null)try{var t=("require"+Math.random()).slice(0,7),n=l&&l[t];yt=n.call(l,"timers").setImmediate}catch{yt=function(s){gr===!1&&(gr=!0,typeof MessageChannel>"u"&&w("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));var y=new MessageChannel;y.port1.onmessage=s,y.port2.postMessage(void 0)}}return yt(e)}var Ke=0,br=!1;function wr(e){{var t=Ke;Ke++,M.current===null&&(M.current=[]);var n=M.isBatchingLegacy,a;try{if(M.isBatchingLegacy=!0,a=e(),!n&&M.didScheduleLegacyUpdate){var s=M.current;s!==null&&(M.didScheduleLegacyUpdate=!1,Wt(s))}}catch($){throw mt(t),$}finally{M.isBatchingLegacy=n}if(a!==null&&typeof a=="object"&&typeof a.then=="function"){var y=a,f=!1,g={then:function($,V){f=!0,y.then(function(X){mt(t),Ke===0?Ut(X,$,V):$(X)},function(X){mt(t),V(X)})}};return!br&&typeof Promise<"u"&&Promise.resolve().then(function(){}).then(function(){f||(br=!0,w("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"))}),g}else{var P=a;if(mt(t),Ke===0){var j=M.current;j!==null&&(Wt(j),M.current=null);var D={then:function($,V){M.current===null?(M.current=[],Ut(P,$,V)):$(P)}};return D}else{var I={then:function($,V){$(P)}};return I}}}}function mt(e){e!==Ke-1&&w("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "),Ke=e}function Ut(e,t,n){{var a=M.current;if(a!==null)try{Wt(a),rn(function(){a.length===0?(M.current=null,t(e)):Ut(e,t,n)})}catch(s){n(s)}else t(e)}}var Vt=!1;function Wt(e){if(!Vt){Vt=!0;var t=0;try{for(;t<e.length;t++){var n=e[t];do n=n(!0);while(n!==null)}e.length=0}catch(a){throw e=e.slice(t+1),a}finally{Vt=!1}}}var nn=yr,an=en,on=Zr,sn={map:Le,forEach:ct,count:xt,toArray:jt,only:ut};i.Children=sn,i.Component=G,i.Fragment=h,i.Profiler=O,i.PureComponent=ze,i.StrictMode=m,i.Suspense=z,i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Y,i.act=wr,i.cloneElement=an,i.createContext=ft,i.createElement=nn,i.createFactory=on,i.createRef=Ct,i.forwardRef=o,i.isValidElement=Te,i.lazy=r,i.memo=A,i.startTransition=tn,i.unstable_act=wr,i.useCallback=be,i.useContext=S,i.useDebugValue=It,i.useDeferredValue=Fr,i.useEffect=L,i.useId=Ur,i.useImperativeHandle=Qe,i.useInsertionEffect=ie,i.useLayoutEffect=Pe,i.useMemo=Q,i.useReducer=K,i.useRef=N,i.useState=C,i.useSyncExternalStore=Vr,i.useTransition=Nt,i.version=u,typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop=="function"&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error)})()}(et,et.exports);var _r=et.exports;Gt.exports=_r;var Ue=Gt.exports;/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(){var l=Ue,i=Symbol.for("react.element"),u=Symbol.for("react.portal"),d=Symbol.for("react.fragment"),p=Symbol.for("react.strict_mode"),h=Symbol.for("react.profiler"),m=Symbol.for("react.provider"),O=Symbol.for("react.context"),E=Symbol.for("react.forward_ref"),k=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),z=Symbol.for("react.memo"),q=Symbol.for("react.lazy"),Z=Symbol.for("react.offscreen"),ee=Symbol.iterator,ce="@@iterator";function ne(r){if(r===null||typeof r!="object")return null;var o=ee&&r[ee]||r[ce];return typeof o=="function"?o:null}var fe=l.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function x(r){{for(var o=arguments.length,c=new Array(o>1?o-1:0),v=1;v<o;v++)c[v-1]=arguments[v];ve("error",r,c)}}function ve(r,o,c){{var v=fe.ReactDebugCurrentFrame,A=v.getStackAddendum();A!==""&&(o+="%s",c=c.concat([A]));var b=c.map(function(S){return String(S)});b.unshift("Warning: "+o),Function.prototype.apply.call(console[r],console,b)}}var ae=!1,M=!1,F=!1,J=!1,W=!1,te;te=Symbol.for("react.module.reference");function Ee(r){return!!(typeof r=="string"||typeof r=="function"||r===d||r===h||W||r===p||r===k||r===T||J||r===Z||ae||M||F||typeof r=="object"&&r!==null&&(r.$$typeof===q||r.$$typeof===z||r.$$typeof===m||r.$$typeof===O||r.$$typeof===E||r.$$typeof===te||r.getModuleId!==void 0))}function ye(r,o,c){var v=r.displayName;if(v)return v;var A=o.displayName||o.name||"";return A!==""?c+"("+A+")":c}function ue(r){return r.displayName||"Context"}function B(r){if(r==null)return null;if(typeof r.tag=="number"&&x("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),typeof r=="function")return r.displayName||r.name||null;if(typeof r=="string")return r;switch(r){case d:return"Fragment";case u:return"Portal";case h:return"Profiler";case p:return"StrictMode";case k:return"Suspense";case T:return"SuspenseList"}if(typeof r=="object")switch(r.$$typeof){case O:var o=r;return ue(o)+".Consumer";case m:var c=r;return ue(c._context)+".Provider";case E:return ye(r,r.render,"ForwardRef");case z:var v=r.displayName||null;return v!==null?v:B(r.type)||"Memo";case q:{var A=r,b=A._payload,S=A._init;try{return B(S(b))}catch{return null}}}return null}var se=Object.assign,Y=0,oe,w,de,ke,U,pe,H;function me(){}me.__reactDisabledLog=!0;function G(){{if(Y===0){oe=console.log,w=console.info,de=console.warn,ke=console.error,U=console.group,pe=console.groupCollapsed,H=console.groupEnd;var r={configurable:!0,enumerable:!0,value:me,writable:!0};Object.defineProperties(console,{info:r,log:r,warn:r,error:r,group:r,groupCollapsed:r,groupEnd:r})}Y++}}function le(){{if(Y--,Y===0){var r={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:se({},r,{value:oe}),info:se({},r,{value:w}),warn:se({},r,{value:de}),error:se({},r,{value:ke}),group:se({},r,{value:U}),groupCollapsed:se({},r,{value:pe}),groupEnd:se({},r,{value:H})})}Y<0&&x("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}}var Oe=fe.ReactCurrentDispatcher,xe;function je(r,o,c){{if(xe===void 0)try{throw Error()}catch(A){var v=A.stack.trim().match(/\n( *(at )?)/);xe=v&&v[1]||""}return`
`+xe+r}}var ze=!1,Ce;{var Ct=typeof WeakMap=="function"?WeakMap:Map;Ce=new Ct}function tt(r,o){if(!r||ze)return"";{var c=Ce.get(r);if(c!==void 0)return c}var v;ze=!0;var A=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var b;b=Oe.current,Oe.current=null,G();try{if(o){var S=function(){throw Error()};if(Object.defineProperty(S.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(S,[])}catch(Q){v=Q}Reflect.construct(r,[],S)}else{try{S.call()}catch(Q){v=Q}r.call(S.prototype)}}else{try{throw Error()}catch(Q){v=Q}r()}}catch(Q){if(Q&&v&&typeof Q.stack=="string"){for(var C=Q.stack.split(`
`),K=v.stack.split(`
`),N=C.length-1,L=K.length-1;N>=1&&L>=0&&C[N]!==K[L];)L--;for(;N>=1&&L>=0;N--,L--)if(C[N]!==K[L]){if(N!==1||L!==1)do if(N--,L--,L<0||C[N]!==K[L]){var ie=`
`+C[N].replace(" at new "," at ");return r.displayName&&ie.includes("<anonymous>")&&(ie=ie.replace("<anonymous>",r.displayName)),typeof r=="function"&&Ce.set(r,ie),ie}while(N>=1&&L>=0);break}}}finally{ze=!1,Oe.current=b,le(),Error.prepareStackTrace=A}var Pe=r?r.displayName||r.name:"",be=Pe?je(Pe):"";return typeof r=="function"&&Ce.set(r,be),be}function Ve(r,o,c){return tt(r,!1)}function _t(r){var o=r.prototype;return!!(o&&o.isReactComponent)}function We(r,o,c){if(r==null)return"";if(typeof r=="function")return tt(r,_t(r));if(typeof r=="string")return je(r);switch(r){case k:return je("Suspense");case T:return je("SuspenseList")}if(typeof r=="object")switch(r.$$typeof){case E:return Ve(r.render);case z:return We(r.type,o,c);case q:{var v=r,A=v._payload,b=v._init;try{return We(b(A),o,c)}catch{}}}return""}var _e=Object.prototype.hasOwnProperty,De={},rt=fe.ReactDebugCurrentFrame;function Ie(r){if(r){var o=r._owner,c=We(r.type,r._source,o?o.type:null);rt.setExtraStackFrame(c)}else rt.setExtraStackFrame(null)}function he(r,o,c,v,A){{var b=Function.call.bind(_e);for(var S in r)if(b(r,S)){var C=void 0;try{if(typeof r[S]!="function"){var K=Error((v||"React class")+": "+c+" type `"+S+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof r[S]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw K.name="Invariant Violation",K}C=r[S](o,S,v,c,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(N){C=N}C&&!(C instanceof Error)&&(Ie(A),x("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",v||"React class",c,S,typeof C),Ie(null)),C instanceof Error&&!(C.message in De)&&(De[C.message]=!0,Ie(A),x("Failed %s type: %s",c,C.message),Ie(null))}}}var Ne=Array.isArray;function Be(r){return Ne(r)}function nt(r){{var o=typeof Symbol=="function"&&Symbol.toStringTag,c=o&&r[Symbol.toStringTag]||r.constructor.name||"Object";return c}}function at(r){try{return Ye(r),!1}catch{return!0}}function Ye(r){return""+r}function Xe(r){if(at(r))return x("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",nt(r)),Ye(r)}var Re=fe.ReactCurrentOwner,Rt={key:!0,ref:!0,__self:!0,__source:!0},ot,it,$e;$e={};function Tt(r){if(_e.call(r,"ref")){var o=Object.getOwnPropertyDescriptor(r,"ref").get;if(o&&o.isReactWarning)return!1}return r.ref!==void 0}function St(r){if(_e.call(r,"key")){var o=Object.getOwnPropertyDescriptor(r,"key").get;if(o&&o.isReactWarning)return!1}return r.key!==void 0}function Pt(r,o){if(typeof r.ref=="string"&&Re.current&&o&&Re.current.stateNode!==o){var c=B(Re.current.type);$e[c]||(x('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',B(Re.current.type),r.ref),$e[c]=!0)}}function Te(r,o){{var c=function(){ot||(ot=!0,x("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",o))};c.isReactWarning=!0,Object.defineProperty(r,"key",{get:c,configurable:!0})}}function st(r,o){{var c=function(){it||(it=!0,x("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",o))};c.isReactWarning=!0,Object.defineProperty(r,"ref",{get:c,configurable:!0})}}var At=function(r,o,c,v,A,b,S){var C={$$typeof:i,type:r,key:o,ref:c,props:S,_owner:b};return C._store={},Object.defineProperty(C._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(C,"_self",{configurable:!1,enumerable:!1,writable:!1,value:v}),Object.defineProperty(C,"_source",{configurable:!1,enumerable:!1,writable:!1,value:A}),Object.freeze&&(Object.freeze(C.props),Object.freeze(C)),C};function Ot(r,o,c,v,A){{var b,S={},C=null,K=null;c!==void 0&&(Xe(c),C=""+c),St(o)&&(Xe(o.key),C=""+o.key),Tt(o)&&(K=o.ref,Pt(o,A));for(b in o)_e.call(o,b)&&!Rt.hasOwnProperty(b)&&(S[b]=o[b]);if(r&&r.defaultProps){var N=r.defaultProps;for(b in N)S[b]===void 0&&(S[b]=N[b])}if(C||K){var L=typeof r=="function"?r.displayName||r.name||"Unknown":r;C&&Te(S,L),K&&st(S,L)}return At(r,C,K,A,v,Re.current,S)}}var Ge=fe.ReactCurrentOwner,lt=fe.ReactDebugCurrentFrame;function ge(r){if(r){var o=r._owner,c=We(r.type,r._source,o?o.type:null);lt.setExtraStackFrame(c)}else lt.setExtraStackFrame(null)}var Me;Me=!1;function Se(r){return typeof r=="object"&&r!==null&&r.$$typeof===i}function Le(){{if(Ge.current){var r=B(Ge.current.type);if(r)return`

Check the render method of \``+r+"`."}return""}}function xt(r){{if(r!==void 0){var o=r.fileName.replace(/^.*[\\\/]/,""),c=r.lineNumber;return`

Check your code at `+o+":"+c+"."}return""}}var ct={};function jt(r){{var o=Le();if(!o){var c=typeof r=="string"?r:r.displayName||r.name;c&&(o=`

Check the top-level render call using <`+c+">.")}return o}}function ut(r,o){{if(!r._store||r._store.validated||r.key!=null)return;r._store.validated=!0;var c=jt(o);if(ct[c])return;ct[c]=!0;var v="";r&&r._owner&&r._owner!==Ge.current&&(v=" It was passed a child from "+B(r._owner.type)+"."),ge(r),x('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',c,v),ge(null)}}function ft(r,o){{if(typeof r!="object")return;if(Be(r))for(var c=0;c<r.length;c++){var v=r[c];Se(v)&&ut(v,o)}else if(Se(r))r._store&&(r._store.validated=!0);else if(r){var A=ne(r);if(typeof A=="function"&&A!==r.entries)for(var b=A.call(r),S;!(S=b.next()).done;)Se(S.value)&&ut(S.value,o)}}}function Fe(r){{var o=r.type;if(o==null||typeof o=="string")return;var c;if(typeof o=="function")c=o.propTypes;else if(typeof o=="object"&&(o.$$typeof===E||o.$$typeof===z))c=o.propTypes;else return;if(c){var v=B(o);he(c,r.props,"prop",v,r)}else if(o.PropTypes!==void 0&&!Me){Me=!0;var A=B(o);x("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",A||"Unknown")}typeof o.getDefaultProps=="function"&&!o.getDefaultProps.isReactClassApproved&&x("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function qe(r){{for(var o=Object.keys(r.props),c=0;c<o.length;c++){var v=o[c];if(v!=="children"&&v!=="key"){ge(r),x("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",v),ge(null);break}}r.ref!==null&&(ge(r),x("Invalid attribute `ref` supplied to `React.Fragment`."),ge(null))}}var Je={};function zt(r,o,c,v,A,b){{var S=Ee(r);if(!S){var C="";(r===void 0||typeof r=="object"&&r!==null&&Object.keys(r).length===0)&&(C+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var K=xt(A);K?C+=K:C+=Le();var N;r===null?N="null":Be(r)?N="array":r!==void 0&&r.$$typeof===i?(N="<"+(B(r.type)||"Unknown")+" />",C=" Did you accidentally export a JSX literal instead of a component?"):N=typeof r,x("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",N,C)}var L=Ot(r,o,c,A,b);if(L==null)return L;if(S){var ie=o.children;if(ie!==void 0)if(v)if(Be(ie)){for(var Pe=0;Pe<ie.length;Pe++)ft(ie[Pe],r);Object.freeze&&Object.freeze(ie)}else x("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");else ft(ie,r)}if(_e.call(o,"key")){var be=B(r),Q=Object.keys(o).filter(function(Nt){return Nt!=="key"}),Qe=Q.length>0?"{key: someKey, "+Q.join(": ..., ")+": ...}":"{key: someKey}";if(!Je[be+Qe]){var It=Q.length>0?"{"+Q.join(": ..., ")+": ...}":"{}";x(`A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`,Qe,be,It,be),Je[be+Qe]=!0}}return r===d?qe(L):Fe(L),L}}var Dt=zt;wt.Fragment=d,wt.jsxDEV=Dt})(),Yt.exports=wt;var re=Yt.exports;/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Rr=l=>l.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),Ht=(...l)=>l.filter((i,u,d)=>!!i&&d.indexOf(i)===u).join(" ");/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */var Tr={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Sr=Ue.forwardRef(({color:l="currentColor",size:i=24,strokeWidth:u=2,absoluteStrokeWidth:d,className:p="",children:h,iconNode:m,...O},E)=>Ue.createElement("svg",{ref:E,...Tr,width:i,height:i,stroke:l,strokeWidth:d?Number(u)*24/Number(i):u,className:Ht("lucide",p),...O},[...m.map(([k,T])=>Ue.createElement(k,T)),...Array.isArray(h)?h:[h]]));/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const we=(l,i)=>{const u=Ue.forwardRef(({className:d,...p},h)=>Ue.createElement(Sr,{ref:h,iconNode:i,className:Ht(`lucide-${Rr(l)}`,d),...p}));return u.displayName=`${l}`,u};/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Pr=we("CalendarDays",[["path",{d:"M8 2v4",key:"1cmpym"}],["path",{d:"M16 2v4",key:"4m81vk"}],["rect",{width:"18",height:"18",x:"3",y:"4",rx:"2",key:"1hopcy"}],["path",{d:"M3 10h18",key:"8toen8"}],["path",{d:"M8 14h.01",key:"6423bh"}],["path",{d:"M12 14h.01",key:"1etili"}],["path",{d:"M16 14h.01",key:"1gbofw"}],["path",{d:"M8 18h.01",key:"lrp35t"}],["path",{d:"M12 18h.01",key:"mhygvu"}],["path",{d:"M16 18h.01",key:"kzsmim"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Ar=we("Lock",[["rect",{width:"18",height:"11",x:"3",y:"11",rx:"2",ry:"2",key:"1w4ew1"}],["path",{d:"M7 11V7a5 5 0 0 1 10 0v4",key:"fwvmzm"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Or=we("Mail",[["rect",{width:"20",height:"16",x:"2",y:"4",rx:"2",key:"18n3k1"}],["path",{d:"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",key:"1ocrg3"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const xr=we("MessageSquareQuote",[["path",{d:"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z",key:"1lielz"}],["path",{d:"M8 12a2 2 0 0 0 2-2V8H8",key:"1jfesj"}],["path",{d:"M14 12a2 2 0 0 0 2-2V8h-2",key:"1dq9mh"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Kt=we("Network",[["rect",{x:"16",y:"16",width:"6",height:"6",rx:"1",key:"4q2zg0"}],["rect",{x:"2",y:"16",width:"6",height:"6",rx:"1",key:"8cvhb9"}],["rect",{x:"9",y:"2",width:"6",height:"6",rx:"1",key:"1egb70"}],["path",{d:"M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3",key:"1jsf9p"}],["path",{d:"M12 12V8",key:"2874zd"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const jr=we("ShieldAlert",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}],["path",{d:"M12 8v4",key:"1got3b"}],["path",{d:"M12 16h.01",key:"1drbdi"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const zr=we("ShieldCheck",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}],["path",{d:"m9 12 2 2 4-4",key:"dzmm74"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Dr=we("ShieldQuestion",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}],["path",{d:"M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3",key:"mhlwft"}],["path",{d:"M12 17h.01",key:"p32p05"}]]),R={age:{y:-10,vy:-20,m:10,vm:20,unknown:-2},ssl:{v:10,e:-18,p:-18,h:-22,es:-4,unknown:-5},bl:{l:-30,c:6,multiple:-10},ipInUrl:-15,urlAi:{ph90:-5,ph70:-3,ph50:-1,lh90:5,lh70:3,error:-2,neutral:0},contentAi:{phChunkHighConf:-8,phChunkMedConf:-4,phChunkLowConf:-2,manyPhishingChunksPenalty:-10,noProblemDetected:5,noContentOrError:-1},whoisPrivacy:{enabled:-2,explicitProblem:-5},dnsMx:{missingForShop:-5,presentForShop:2,notApplicable:0}},Ir=l=>l<30?`${l} dni`:l<365?`${Math.floor(l/30)} mies.`:`${Math.floor(l/365)} lat`;function Xt(l,i){if(!(l!=null&&l.analysis))return console.warn("[ScoreCalc] No analysis data provided for score calculation."),{score:null,explanations:[]};const u=l.analysis,d=l.urlTextAnalysis,p=l.pageContentAnalyses;let h=50;const m=[],O=100,E=0;console.log("[ScoreCalc] Starting calculation. Initial score:",h,"for URL:",i),console.log("[ScoreCalc] DomainAnalysisDetails:",JSON.parse(JSON.stringify(u))),console.log("[ScoreCalc] UrlTextAnalysis:",JSON.parse(JSON.stringify(d||{}))),console.log("[ScoreCalc] PageContentAnalyses:",JSON.parse(JSON.stringify(p||[])));const k=u.domain_actual_age_days;let T="neutral",z="0 pkt",q="N/A";k!==null&&typeof k<"u"?(q=Ir(k),k<30?(h+=R.age.vy,T="negative",z=`${R.age.vy} pkt`):k<180?(h+=R.age.y,T="negative",z=`${R.age.y} pkt`):k>=730?(h+=R.age.vm,T="positive",z=`+${R.age.vm} pkt`):k>=365&&(h+=R.age.m,T="positive",z=`+${R.age.m} pkt`)):(h+=R.age.unknown,T="info",z=`${R.age.unknown} pkt (brak danych)`),m.push({id:"age",icon:Pr,label:"Wiek domeny",valueText:q,impact:T,scoreEffect:z,details:"Starsze domeny są generalnie bardziej wiarygodne.",longDesc:"Nowo zarejestrowane domeny są często wykorzystywane w kampaniach phishingowych..."});let Z="negative",ee="Strona nie używa szyfrowania HTTPS.",ce="Brak (HTTP)",ne=R.ssl.h;if(u.parsed_url_scheme==="https")if(ne=0,u.ssl_info&&u.ssl_info.not_after){const U=new Date(u.ssl_info.not_after),pe=new Date,H=(U.getTime()-pe.getTime())/(1e3*3600*24);H>0?(ne=R.ssl.v,Z="positive",ce="Ważny",ee=`Połączenie szyfrowane. Certyfikat ważny do: ${U.toLocaleDateString()}.`,H<30&&(ne+=R.ssl.es,ce=re.jsxDEV("span",{className:"text-yellow-600 font-semibold",children:"Wygasa wkrótce!"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:135,columnNumber:13},this),ee+=" Certyfikat wygasa za mniej niż 30 dni.")):(ne=R.ssl.e,Z="negative",ce="Wygasł",ee=`Certyfikat SSL wygasł: ${U.toLocaleDateString()}.`)}else ne=R.ssl.p,Z="negative",ce="Problem (HTTPS)",ee="Strona używa HTTPS, ale wystąpił problem z weryfikacją certyfikatu...";else u.ssl_info===null&&u.parsed_url_scheme!=="https"?(Z="negative",ce="Brak (HTTP)",ee="Strona nie używa szyfrowania HTTPS (HTTP)."):(ne=R.ssl.unknown,Z="info",ce="N/A (SSL)",ee="Nie udało się jednoznacznie zweryfikować statusu SSL.");h+=ne;const fe=`${ne>0?"+":""}${ne} pkt`;m.push({id:"ssl",icon:Ar,label:"Szyfrowanie (SSL)",valueText:ce,impact:Z,details:ee,scoreEffect:fe,longDesc:"Certyfikat SSL zapewnia szyfrowanie danych przesyłanych między Tobą a stroną..."});let x=0,ve="Niedostępna",ae="neutral",M="Analiza AI adresu URL nie została przeprowadzona lub jest niedostępna.";d===null?(x=R.urlAi.error,ve=re.jsxDEV("span",{className:"text-red-500",children:"Błąd analizy"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:190,columnNumber:15},this),ae="negative",M="Nie udało się przeprowadzić analizy AI dla tego URL z powodu błędu."):d?(ve=`${d.label} (${(d.confidence*100).toFixed(0)}%)`,M=`Model AI ocenił URL jako ${d.label.toLowerCase()} z ${(d.confidence*100).toFixed(0)}% pewnością.`,d.is_phishing?(ae="negative",d.confidence>=.9?x=R.urlAi.ph90:d.confidence>=.7?x=R.urlAi.ph70:x=R.urlAi.ph50):(ae=d.confidence>=.9?"positive":"neutral",x=d.confidence>=.9?R.urlAi.lh90:d.confidence>=.7?R.urlAi.lh70:R.urlAi.neutral)):(ve=re.jsxDEV("span",{className:"text-gray-500",children:"N/A (URL AI)"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:216,columnNumber:15},this),ae="neutral",M="Analiza AI adresu URL nie została jeszcze przeprowadzona lub dane nie są dostępne."),m.push({id:"aiUrl",icon:Dr,label:"Analiza AI URL",valueText:ve,impact:ae,scoreEffect:`${x>0?"+":""}${x} pkt`,details:M,longDesc:"Sztuczna inteligencja analizuje strukturę i komponenty adresu URL..."}),h+=x;let F="N/A",J="neutral",W=0,te="Analiza treści strony nie została przeprowadzona lub brakło tekstu.",Ee="Analiza treści strony wyszukuje fragmenty mogące wskazywać na oszustwo...";const ye=[];if(p===null)F=re.jsxDEV("span",{className:"text-red-500",children:"Błąd analizy treści"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:245,columnNumber:13},this),J="negative",W=R.contentAi.noContentOrError,te="Wystąpił błąd podczas próby analizy treści strony.";else if(p&&p.length>0){let U=0,pe=!1,H=!1,me=!1;if(p.forEach(G=>{G.is_phishing&&(U++,G.confidence>=.9?pe=!0:G.confidence>=.7?H=!0:G.confidence>=.5&&(me=!0),ye.push({label:G.label,conf:G.confidence,chunk:G.originalChunk}))}),U>0?(pe?(W=R.contentAi.phChunkHighConf,J="negative",F=re.jsxDEV("span",{className:"text-red-500 font-semibold",children:"Podejrzane Treści!"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:274,columnNumber:11},this),te=`Wykryto fragmenty treści o wysokim prawdopodobieństwie phishingu (${U}/${p.length}).`):H?(W=R.contentAi.phChunkMedConf,J="negative",F="Podejrzane fragmenty",te=`Wykryto ${U} z ${p.length} fragmentów jako potencjalnie phishingowe.`):me&&(W=R.contentAi.phChunkLowConf,J="negative",F="Niejednoznaczne fragmenty",te=`Wykryto ${U} z ${p.length} fragmentów jako potencjalnie phishingowe.`),U>=3&&(W+=R.contentAi.manyPhishingChunksPenalty,te+=" Znaleziono wiele podejrzanych fragmentów."),W=Math.max(W,-10)):(W=R.contentAi.noProblemDetected,J="positive",F="Treść OK",te=`Analiza treści (${p.length} fragmentów) nie wykazała znamion phishingu.`),ye.length>0){const G=ye.slice(0,3).map((le,Oe)=>re.jsxDEV("li",{title:le.chunk,className:"mb-1",children:[re.jsxDEV("span",{className:`font-semibold ${le.label==="PHISHING"?"text-red-600":"text-gray-700"}`,children:['"',le.chunk.substring(0,50),'..."']},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:312,columnNumber:11},this),re.jsxDEV("span",{className:"text-gray-500 ml-1",children:["(",le.label," ",(le.conf*100).toFixed(0),"%)"]},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:319,columnNumber:11},this)]},`chunk-${Oe}-${le.chunk.slice(0,5)}`,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:307,columnNumber:9},this));Ee=re.jsxDEV("div",{children:[re.jsxDEV("p",{children:typeof Ee=="string"?Ee:"Szczegóły analizy treści:"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:326,columnNumber:11},this),re.jsxDEV("p",{className:"mt-2 font-semibold",children:"Podejrzane fragmenty:"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:331,columnNumber:11},this),re.jsxDEV("ul",{className:"list-disc pl-5 max-h-24 overflow-y-auto text-xs custom-scrollbar",children:G},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:332,columnNumber:11},this),ye.length>3&&re.jsxDEV("p",{className:"text-xs mt-1",children:["...i ",ye.length-3," więcej."]},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:336,columnNumber:13},this)]},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:325,columnNumber:9},this)}}else p&&p.length===0?(W=R.contentAi.noContentOrError,J="info",F="Brak tekstu do analizy",te="Nie znaleziono wystarczającej ilości tekstu na stronie do przeprowadzenia pełnej analizy treści."):(F=re.jsxDEV("span",{className:"text-gray-500",children:"N/A (treść)"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:348,columnNumber:13},this),J="neutral",te="Analiza treści strony nie została jeszcze przeprowadzona lub dane nie są dostępne.");h+=W,m.push({id:"contentAi",icon:xr,label:"Analiza AI treści",valueText:F,impact:J,scoreEffect:`${W>0?"+":""}${W} pkt`,details:te,longDesc:Ee});let ue=0;const B=[];u.blacklist_checks&&u.blacklist_checks.forEach(U=>{U.is_listed&&B.push(U.source)}),B.length>0?(ue=R.bl.l,B.length>1&&(ue+=R.bl.multiple*(B.length-1)),m.push({id:"blacklist",icon:jr,label:"Listy zagrożeń",valueText:`Na listach: ${B.join(", ")}`,impact:"negative",scoreEffect:`${ue} pkt`,details:`Znalezienie domeny/URL na publicznych listach zagrożeń (${B.join(", ")}) jest silnym sygnałem ostrzegawczym.`,longDesc:"Listy te są kompilowane przez organizacje bezpieczeństwa w celu śledzenia złośliwych witryn internetowych."})):(ue=R.bl.c,m.push({id:"blacklist",icon:zr,label:"Listy zagrożeń",valueText:"Czysto",impact:"positive",scoreEffect:`+${ue} pkt`,details:"Nie znaleziono na znanych listach zagrożeń (m.in. PhishTank, CERT.PL, OpenPhish, Google Safe Browsing).",longDesc:"Brak wpisów na głównych listach zagrożeń to dobry znak, wskazujący, że strona nie została publicznie oznaczona jako złośliwa."})),h+=ue;let se=0;u.is_ip_address_in_url?(se=R.ipInUrl,m.push({id:"ipInUrl",icon:Kt,label:"Adres IP w URL",valueText:"Tak",impact:"negative",scoreEffect:`${se} pkt`,details:"Używanie adresu IP zamiast nazwy domenowej jest częstą taktyką w phishingu.",longDesc:"Legalne strony rzadko używają adresów IP bezpośrednio w linkach..."})):m.push({id:"ipInUrl",icon:Kt,label:"Adres IP w URL",valueText:"Nie",impact:"positive",details:"URL używa standardowej nazwy domenowej.",scoreEffect:"+0 pkt"}),h+=se;let Y=0,oe="N/A",w="neutral",de="Brak danych o rekordach MX.";u.dns_records&&u.dns_records.MX?u.dns_records.MX.length===0?(Y=R.dnsMx.missingForShop,oe="Brak",w="negative",de="Brak rekordów MX dla domeny."):(Y=R.dnsMx.presentForShop,oe="Obecne",w="positive",de="Rekordy MX obecne dla domeny."):(Y=R.dnsMx.notApplicable,oe="Nie dotyczy",de="Brak danych o rekordach MX."),h+=Y,m.push({id:"dnsMx",icon:Or,label:"Rekordy MX",valueText:oe,impact:w,scoreEffect:`${Y>0?"+":""}${Y} pkt`,details:de,longDesc:"Rekordy MX wskazują serwery pocztowe dla domeny..."});const ke=Math.max(E,Math.min(O,Math.round(h)));return console.log(`[ScoreCalc] Final calculated score: ${ke} (raw score before clamp: ${h})`),{score:ke,explanations:m}}const qt={"Grupa A (Phishing)":["http://en-suites.pages.dev/","https://linea-claim.com/","http://backingarena.bet","https://finance-ocean.org/","https://fch715.icu/update/#/","https://wlfilibertyfinances.xyz/","https://www.bcmt-tech.com/","https://www.caixaindeniza.sbs/","https://serasabr.org/","https://vncp-etax.com/","https://confira-verificacao.com/inicio"],"Grupa B (Legitimate)":["https://www.mbank.pl/","https://www.pkobp.pl/","https://www.ing.pl/","https://www.pekao.com.pl/","https://www.aliorbank.pl/","https://www.amazon.pl/","https://allegro.pl/","https://www.euro.com.pl/","https://www.agatameble.pl/","https://www.ikea.com/pl/pl/","https://www.onet.pl/","https://www.interia.pl/","https://x.com/home","https://tvn24.pl/","https://wiadomosci.wp.pl/","https://www.gov.pl/","https://www.ue.katowice.pl/","https://www.biznes.gov.pl/pl","https://www.podatki.gov.pl/","https://internet.gov.pl/"],"Grupa C (Suspicious/Phishing)":["https://parfumuri-top.ro/","https://collab.land/","https://allocation-maple.com/","https://keeta-claim.com/","https://lido-stake.app/","https://radleyfinance.com/","https://dqpazclw.shop/","https://laborx.com","https://rewards-blockstreet.com/","https://plantaprolamsa.com/","https://iowastep.org/"]};function Nr(l,i=25e3){return new Promise(async(u,d)=>{let p,h=null;const m=(E,k)=>{var T;((T=k.tab)==null?void 0:T.id)===p&&E.action==="analyzePageContent"&&(console.log(`[TestRunner] Received content for ${l}`),O(),u(E.contentChunks||[]))},O=()=>{h&&clearTimeout(h),chrome.runtime.onMessage.removeListener(m),p&&chrome.tabs.remove(p).catch(()=>{})};h=setTimeout(()=>{console.warn(`[TestRunner] Timeout waiting for content from ${l}`),O(),u([])},i),chrome.runtime.onMessage.addListener(m);try{if(p=(await chrome.tabs.create({url:l,active:!1})).id,!p)throw new Error("Failed to create tab.")}catch(E){console.error(`[TestRunner] Failed to create tab for ${l}:`,E),O(),d(E)}})}function $r(l,i,u,d){let p=`URL: ${l}
`;return p+=`FINAL SCORE: ${u??"N/A"}
`,p+=`----------------------------------------
`,i.error&&(p+=`Analysis Error: ${i.error}
`),d.forEach(h=>{const m=typeof h.valueText=="string"?h.valueText:"[UI Element]";p+=`[${h.impact.padEnd(8)}] ${h.label.padEnd(20)} | Value: ${m.padEnd(25)} | Effect: ${h.scoreEffect||"0 pkt"}
`,p+=`   Details: ${h.details}

`}),p+=`========================================

`,p}function Mr(){console.log("Running instant download test...");const l=`Download test initiated at: ${new Date().toISOString()}

If you see this, the download functionality is working.`,i="data:text/plain;charset=utf-8,"+encodeURIComponent(l);chrome.downloads.download({url:i,filename:"IsThisPhishy-Download-Test.txt"})}async function Lr(){console.log("Starting automated tests with FULL CONTENT ANALYSIS..."),console.warn("This will be slow and will open/close many tabs in the background.");let l=`IsThisPhishy Automated Full Test Report - ${new Date().toISOString()}

`;const i={};for(const m in qt){console.log(`--- Processing ${m} ---`),l+=`

########## ${m} ##########

`;const O=qt[m];i[m]=[];for(const E of O)try{console.log(`[TestRunner] Analyzing URL: ${E}`);const k=await Nr(E),T=await kt(E,k),{score:z,explanations:q}=Xt(T,E);l+=$r(E,T,z,q),i[m].push({url:E,score:z,explanations:q})}catch(k){console.error(`[TestRunner] Critical failure for URL ${E}:`,k);const T=`CRITICAL ERROR: ${k.message}`;l+=`URL: ${E}
${T}
========================================

`,i[m].push({url:E,score:null,explanations:[{details:T}]})}}console.log("--- All tests complete! Generating summary... ---");let u=`


`;u+=`###################################
`,u+=`###        TEST SUMMARY         ###
`,u+=`###################################

`,u+=`--- Average Scores by Group ---
`;for(const m in i){const E=i[m].map(k=>k.score).filter(k=>k!==null);if(E.length>0){const k=E.reduce((T,z)=>T+z,0)/E.length;u+=`${m.padEnd(30)}: ${k.toFixed(2)}
`}else u+=`${m.padEnd(30)}: N/A (no valid scores)
`}u+=`

--- CSV Data for Charting (URL | Score | Group) ---
`,u+=`URL|Score|Group
`;for(const m in i)i[m].forEach(O=>{u+=`${O.url}|${O.score??"ERROR"}|${m}
`});u+=`

--- Advanced CSV Data for Detailed Analysis ---
`;const d=new Set(["URL","Final_Score","Group"]);Object.values(i).flat().forEach(m=>{m.explanations.forEach(O=>d.add(O.label.replace(/\s+/g,"_")))});const p=Array.from(d).join("|");u+=p+`
`;for(const m in i)i[m].forEach(O=>{const E={URL:O.url,Final_Score:O.score??"ERROR",Group:m};O.explanations.forEach(T=>{const z=T.label.replace(/\s+/g,"_"),q=T.scoreEffect?parseInt(T.scoreEffect.replace(" pkt","").replace("+","")):0;E[z]=isNaN(q)?0:q});const k=Array.from(d).map(T=>E[T]??0).join("|");u+=k+`
`});l+=u;const h="data:text/plain;charset=utf-8,"+encodeURIComponent(l);chrome.downloads.download({url:h,filename:"IsThisPhishy-Full-Test-Report.txt"})}const Jt="http://127.0.0.1:8000/api/v1",Et=l=>{try{return new URL(l).hostname.replace(/^www\./,"")}catch{return""}},Ae=(l,i="#777777")=>{try{chrome.action.setBadgeText({text:l}),chrome.action.setBadgeBackgroundColor({color:i})}catch(u){console.warn("[BG] Failed to update badge.",u)}},Qt=(l,i)=>{if(!l)return;const{score:u}=Xt(l,i);if(u!==null){let d="#10B981";u<40?d="#EF4444":u<70&&(d="#F59E0B"),Ae(u.toString(),d)}else l.error?Ae("!","#EF4444"):Ae("?","#777777")},Zt=async l=>{try{const i=await fetch(`${Jt}/check_phishing_text`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text_to_analyze:l})});return i.ok?await i.json():null}catch(i){return console.error("[BG] fetchTextAnalysis Network Error:",i),null}},kt=async(l,i=[])=>{const u=Et(l);if(!u)return{error:"Invalid domain",lastChecked:Date.now()};Ae("...","#F59E0B");try{const[d,p]=await Promise.all([fetch(`${Jt}/analyze_domain_details`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:l})}),Zt(l)]);if(!d.ok)return{error:"API Error (domain details)",lastChecked:Date.now()};const h=await d.json();if(console.log(h),h.error)return{error:h.error,lastChecked:Date.now()};let m=[];if(i.length>0){const E=i.map(async(k,T)=>{const z=await Zt(k);return z?{...z,chunkIndex:T,originalChunk:k.substring(0,100)+"..."}:null});m=(await Promise.all(E)).filter(k=>k!==null)}const O={analysis:h,urlTextAnalysis:p,pageContentAnalyses:m,lastChecked:Date.now()};return chrome.storage.local.set({[u]:O}),Qt(O,l),O}catch(d){const p=d instanceof Error?d.message:String(d);return Ae("!","#EF4444"),{error:`Network/Parsing error: ${p}`,lastChecked:Date.now()}}};return chrome.runtime.onMessage.addListener((l,i,u)=>{var d;if(l.action==="analyzePageContent")return console.log(`[BG] Received content for analysis from ${l.url}`),kt(l.url,l.contentChunks).then(p=>{chrome.runtime.sendMessage({action:"analysisUpdated",domain:Et(l.url),data:p,forUrl:l.url}).catch(()=>{}),u({success:!0})}).catch(p=>u({success:!1,error:p.message})),!0;if(l.action==="requestAnalysisForCurrentTab"){const p=l.url,h=l.tabId||((d=i.tab)==null?void 0:d.id);return p&&h?(console.log(`[BG] Manual refresh requested for ${p} on tab ${h}`),Ae("...","#F59E0B"),chrome.tabs.sendMessage(h,{action:"getTextContentFromPage"}),u({status:"refresh_triggered"})):u({error:"No active tab/URL to refresh."}),!0}return!1}),chrome.tabs.onActivated.addListener(async l=>{chrome.tabs.get(l.tabId,i=>{if(i.url){const u=Et(i.url);chrome.storage.local.get(u,d=>{const p=d[u];p?(console.log(`[BG] onActivated: Found cached data for ${u}`),Qt(p,i.url)):Ae("","#777777")})}})}),chrome.runtime.onInstalled.addListener(async l=>{if(l.reason==="install"||l.reason==="update"){console.log("[BG] Extension installed/updated. Injecting content scripts into existing tabs.");const i=await chrome.tabs.query({url:["http://*/*","https://*/*"],status:"complete"});for(const u of i)if(u.id)try{await chrome.scripting.executeScript({target:{tabId:u.id},files:["src/content/content.js"]}),console.log(`[BG] Injected content script into tab ${u.id}`)}catch(d){console.warn(`[BG] Failed to inject script into tab ${u.id}:`,d)}}}),globalThis.runExtensionTests=Lr,globalThis.runExtensionDownloadTest=Mr,console.log("[BG] Background script loaded and listeners attached (v1.2.1)."),bt.performFullAnalysis=kt,Object.defineProperty(bt,Symbol.toStringTag,{value:"Module"}),bt}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
