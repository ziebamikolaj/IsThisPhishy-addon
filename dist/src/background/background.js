(function(){"use strict";var Vr={exports:{}},gr={},Wr={exports:{}},Ze={exports:{}};Ze.exports,function(c,s){/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(){typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart=="function"&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);var h="18.3.1",f=Symbol.for("react.element"),k=Symbol.for("react.portal"),w=Symbol.for("react.fragment"),D=Symbol.for("react.strict_mode"),X=Symbol.for("react.profiler"),Q=Symbol.for("react.provider"),A=Symbol.for("react.context"),N=Symbol.for("react.forward_ref"),F=Symbol.for("react.suspense"),ue=Symbol.for("react.suspense_list"),H=Symbol.for("react.memo"),G=Symbol.for("react.lazy"),ie=Symbol.for("react.offscreen"),Z=Symbol.iterator,le="@@iterator";function R(e){if(e===null||typeof e!="object")return null;var r=Z&&e[Z]||e[le];return typeof r=="function"?r:null}var de={current:null},K={transition:null},z={current:null,isBatchingLegacy:!1,didScheduleLegacyUpdate:!1},I={current:null},V={},J=null;function ee(e){J=e}V.setExtraStackFrame=function(e){J=e},V.getCurrentStack=null,V.getStackAddendum=function(){var e="";J&&(e+=J);var r=V.getCurrentStack;return r&&(e+=r()||""),e};var me=!1,pe=!1,Te=!1,M=!1,ne=!1,W={ReactCurrentDispatcher:de,ReactCurrentBatchConfig:K,ReactCurrentOwner:I};W.ReactDebugCurrentFrame=V,W.ReactCurrentActQueue=z;function ae(e){{for(var r=arguments.length,n=new Array(r>1?r-1:0),a=1;a<r;a++)n[a-1]=arguments[a];ce("warn",e,n)}}function d(e){{for(var r=arguments.length,n=new Array(r>1?r-1:0),a=1;a<r;a++)n[a-1]=arguments[a];ce("error",e,n)}}function ce(e,r,n){{var a=W.ReactDebugCurrentFrame,i=a.getStackAddendum();i!==""&&(r+="%s",n=n.concat([i]));var v=n.map(function(l){return String(l)});v.unshift("Warning: "+r),Function.prototype.apply.call(console[e],console,v)}}var se={};function B(e,r){{var n=e.constructor,a=n&&(n.displayName||n.name)||"ReactClass",i=a+"."+r;if(se[i])return;d("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",r,a),se[i]=!0}}var oe={isMounted:function(e){return!1},enqueueForceUpdate:function(e,r,n){B(e,"forceUpdate")},enqueueReplaceState:function(e,r,n,a){B(e,"replaceState")},enqueueSetState:function(e,r,n,a){B(e,"setState")}},re=Object.assign,Fe={};Object.freeze(Fe);function ve(e,r,n){this.props=e,this.context=r,this.refs=Fe,this.updater=n||oe}ve.prototype.isReactComponent={},ve.prototype.setState=function(e,r){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,r,"setState")},ve.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};{var He={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},Ge=function(e,r){Object.defineProperty(ve.prototype,e,{get:function(){ae("%s(...) is deprecated in plain JavaScript React classes. %s",r[0],r[1])}})};for(var Se in He)He.hasOwnProperty(Se)&&Ge(Se,He[Se])}function Pe(){}Pe.prototype=ve.prototype;function Ae(e,r,n){this.props=e,this.context=r,this.refs=Fe,this.updater=n||oe}var ge=Ae.prototype=new Pe;ge.constructor=Ae,re(ge,ve.prototype),ge.isPureReactComponent=!0;function wr(){var e={current:null};return Object.seal(e),e}var er=Array.isArray;function Me(e){return er(e)}function Er(e){{var r=typeof Symbol=="function"&&Symbol.toStringTag,n=r&&e[Symbol.toStringTag]||e.constructor.name||"Object";return n}}function Le(e){try{return be(e),!1}catch{return!0}}function be(e){return""+e}function Oe(e){if(Le(e))return d("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",Er(e)),be(e)}function rr(e,r,n){var a=e.displayName;if(a)return a;var i=r.displayName||r.name||"";return i!==""?n+"("+i+")":n}function je(e){return e.displayName||"Context"}function fe(e){if(e==null)return null;if(typeof e.tag=="number"&&d("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case w:return"Fragment";case k:return"Portal";case X:return"Profiler";case D:return"StrictMode";case F:return"Suspense";case ue:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case A:var r=e;return je(r)+".Consumer";case Q:var n=e;return je(n._context)+".Provider";case N:return rr(e,e.render,"ForwardRef");case H:var a=e.displayName||null;return a!==null?a:fe(e.type)||"Memo";case G:{var i=e,v=i._payload,l=i._init;try{return fe(l(v))}catch{return null}}}return null}var ze=Object.prototype.hasOwnProperty,Ue={key:!0,ref:!0,__self:!0,__source:!0},tr,nr,Ve;Ve={};function Ke(e){if(ze.call(e,"ref")){var r=Object.getOwnPropertyDescriptor(e,"ref").get;if(r&&r.isReactWarning)return!1}return e.ref!==void 0}function we(e){if(ze.call(e,"key")){var r=Object.getOwnPropertyDescriptor(e,"key").get;if(r&&r.isReactWarning)return!1}return e.key!==void 0}function _r(e,r){var n=function(){tr||(tr=!0,d("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",r))};n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}function ar(e,r){var n=function(){nr||(nr=!0,d("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",r))};n.isReactWarning=!0,Object.defineProperty(e,"ref",{get:n,configurable:!0})}function or(e){if(typeof e.ref=="string"&&I.current&&e.__self&&I.current.stateNode!==e.__self){var r=fe(I.current.type);Ve[r]||(d('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',r,e.ref),Ve[r]=!0)}}var xe=function(e,r,n,a,i,v,l){var y={$$typeof:f,type:e,key:r,ref:n,props:l,_owner:v};return y._store={},Object.defineProperty(y._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(y,"_self",{configurable:!1,enumerable:!1,writable:!1,value:a}),Object.defineProperty(y,"_source",{configurable:!1,enumerable:!1,writable:!1,value:i}),Object.freeze&&(Object.freeze(y.props),Object.freeze(y)),y};function kr(e,r,n){var a,i={},v=null,l=null,y=null,E=null;if(r!=null){Ke(r)&&(l=r.ref,or(r)),we(r)&&(Oe(r.key),v=""+r.key),y=r.__self===void 0?null:r.__self,E=r.__source===void 0?null:r.__source;for(a in r)ze.call(r,a)&&!Ue.hasOwnProperty(a)&&(i[a]=r[a])}var T=arguments.length-2;if(T===1)i.children=n;else if(T>1){for(var S=Array(T),P=0;P<T;P++)S[P]=arguments[P+2];Object.freeze&&Object.freeze(S),i.children=S}if(e&&e.defaultProps){var j=e.defaultProps;for(a in j)i[a]===void 0&&(i[a]=j[a])}if(v||l){var $=typeof e=="function"?e.displayName||e.name||"Unknown":e;v&&_r(i,$),l&&ar(i,$)}return xe(e,v,l,y,E,I.current,i)}function Cr(e,r){var n=xe(e.type,r,e.ref,e._self,e._source,e._owner,e.props);return n}function Rr(e,r,n){if(e==null)throw new Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a,i=re({},e.props),v=e.key,l=e.ref,y=e._self,E=e._source,T=e._owner;if(r!=null){Ke(r)&&(l=r.ref,T=I.current),we(r)&&(Oe(r.key),v=""+r.key);var S;e.type&&e.type.defaultProps&&(S=e.type.defaultProps);for(a in r)ze.call(r,a)&&!Ue.hasOwnProperty(a)&&(r[a]===void 0&&S!==void 0?i[a]=S[a]:i[a]=r[a])}var P=arguments.length-2;if(P===1)i.children=n;else if(P>1){for(var j=Array(P),$=0;$<P;$++)j[$]=arguments[$+2];i.children=j}return xe(e.type,v,l,y,E,T,i)}function Ee(e){return typeof e=="object"&&e!==null&&e.$$typeof===f}var ir=".",Tr=":";function Sr(e){var r=/[=:]/g,n={"=":"=0",":":"=2"},a=e.replace(r,function(i){return n[i]});return"$"+a}var We=!1,sr=/\/+/g;function he(e){return e.replace(sr,"$&/")}function De(e,r){return typeof e=="object"&&e!==null&&e.key!=null?(Oe(e.key),Sr(""+e.key)):r.toString(36)}function _e(e,r,n,a,i){var v=typeof e;(v==="undefined"||v==="boolean")&&(e=null);var l=!1;if(e===null)l=!0;else switch(v){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case f:case k:l=!0}}if(l){var y=e,E=i(y),T=a===""?ir+De(y,0):a;if(Me(E)){var S="";T!=null&&(S=he(T)+"/"),_e(E,r,S,"",function(rn){return rn})}else E!=null&&(Ee(E)&&(E.key&&(!y||y.key!==E.key)&&Oe(E.key),E=Cr(E,n+(E.key&&(!y||y.key!==E.key)?he(""+E.key)+"/":"")+T)),r.push(E));return 1}var P,j,$=0,U=a===""?ir:a+Tr;if(Me(e))for(var mr=0;mr<e.length;mr++)P=e[mr],j=U+De(P,mr),$+=_e(P,r,n,j,i);else{var Ur=R(e);if(typeof Ur=="function"){var yt=e;Ur===yt.entries&&(We||ae("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),We=!0);for(var Zt=Ur.call(yt),mt,en=0;!(mt=Zt.next()).done;)P=mt.value,j=U+De(P,en++),$+=_e(P,r,n,j,i)}else if(v==="object"){var gt=String(e);throw new Error("Objects are not valid as a React child (found: "+(gt==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":gt)+"). If you meant to render a collection of children, use an array instead.")}}return $}function Ne(e,r,n){if(e==null)return e;var a=[],i=0;return _e(e,a,"","",function(v){return r.call(n,v,i++)}),a}function Pr(e){var r=0;return Ne(e,function(){r++}),r}function ur(e,r,n){Ne(e,function(){r.apply(this,arguments)},n)}function Ar(e){return Ne(e,function(r){return r})||[]}function lr(e){if(!Ee(e))throw new Error("React.Children.only expected to receive a single React element child.");return e}function cr(e){var r={$$typeof:A,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};r.Provider={$$typeof:Q,_context:r};var n=!1,a=!1,i=!1;{var v={$$typeof:A,_context:r};Object.defineProperties(v,{Provider:{get:function(){return a||(a=!0,d("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")),r.Provider},set:function(l){r.Provider=l}},_currentValue:{get:function(){return r._currentValue},set:function(l){r._currentValue=l}},_currentValue2:{get:function(){return r._currentValue2},set:function(l){r._currentValue2=l}},_threadCount:{get:function(){return r._threadCount},set:function(l){r._threadCount=l}},Consumer:{get:function(){return n||(n=!0,d("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")),r.Consumer}},displayName:{get:function(){return r.displayName},set:function(l){i||(ae("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",l),i=!0)}}}),r.Consumer=v}return r._currentRenderer=null,r._currentRenderer2=null,r}var Ie=-1,Je=0,qe=1,Or=2;function jr(e){if(e._status===Ie){var r=e._result,n=r();if(n.then(function(v){if(e._status===Je||e._status===Ie){var l=e;l._status=qe,l._result=v}},function(v){if(e._status===Je||e._status===Ie){var l=e;l._status=Or,l._result=v}}),e._status===Ie){var a=e;a._status=Je,a._result=n}}if(e._status===qe){var i=e._result;return i===void 0&&d(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`,i),"default"in i||d(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`,i),i.default}else throw e._result}function t(e){var r={_status:Ie,_result:e},n={$$typeof:G,_payload:r,_init:jr};{var a,i;Object.defineProperties(n,{defaultProps:{configurable:!0,get:function(){return a},set:function(v){d("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),a=v,Object.defineProperty(n,"defaultProps",{enumerable:!0})}},propTypes:{configurable:!0,get:function(){return i},set:function(v){d("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),i=v,Object.defineProperty(n,"propTypes",{enumerable:!0})}}})}return n}function o(e){e!=null&&e.$$typeof===H?d("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):typeof e!="function"?d("forwardRef requires a render function but was given %s.",e===null?"null":typeof e):e.length!==0&&e.length!==2&&d("forwardRef render functions accept exactly two parameters: props and ref. %s",e.length===1?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),e!=null&&(e.defaultProps!=null||e.propTypes!=null)&&d("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");var r={$$typeof:N,render:e};{var n;Object.defineProperty(r,"displayName",{enumerable:!1,configurable:!0,get:function(){return n},set:function(a){n=a,!e.name&&!e.displayName&&(e.displayName=a)}})}return r}var u;u=Symbol.for("react.module.reference");function p(e){return!!(typeof e=="string"||typeof e=="function"||e===w||e===X||ne||e===D||e===F||e===ue||M||e===ie||me||pe||Te||typeof e=="object"&&e!==null&&(e.$$typeof===G||e.$$typeof===H||e.$$typeof===Q||e.$$typeof===A||e.$$typeof===N||e.$$typeof===u||e.getModuleId!==void 0))}function _(e,r){p(e)||d("memo: The first argument must be a component. Instead received: %s",e===null?"null":typeof e);var n={$$typeof:H,type:e,compare:r===void 0?null:r};{var a;Object.defineProperty(n,"displayName",{enumerable:!1,configurable:!0,get:function(){return a},set:function(i){a=i,!e.name&&!e.displayName&&(e.displayName=i)}})}return n}function m(){var e=de.current;return e===null&&d(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`),e}function b(e){var r=m();if(e._context!==void 0){var n=e._context;n.Consumer===e?d("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"):n.Provider===e&&d("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?")}return r.useContext(e)}function g(e){var r=m();return r.useState(e)}function L(e,r,n){var a=m();return a.useReducer(e,r,n)}function O(e){var r=m();return r.useRef(e)}function x(e,r){var n=m();return n.useEffect(e,r)}function te(e,r){var n=m();return n.useInsertionEffect(e,r)}function ke(e,r){var n=m();return n.useLayoutEffect(e,r)}function ye(e,r){var n=m();return n.useCallback(e,r)}function Y(e,r){var n=m();return n.useMemo(e,r)}function Xe(e,r,n){var a=m();return a.useImperativeHandle(e,r,n)}function zr(e,r){{var n=m();return n.useDebugValue(e,r)}}function xr(){var e=m();return e.useTransition()}function zt(e){var r=m();return r.useDeferredValue(e)}function xt(){var e=m();return e.useId()}function Dt(e,r,n){var a=m();return a.useSyncExternalStore(e,r,n)}var Qe=0,Jr,qr,Xr,Qr,Zr,et,rt;function tt(){}tt.__reactDisabledLog=!0;function Nt(){{if(Qe===0){Jr=console.log,qr=console.info,Xr=console.warn,Qr=console.error,Zr=console.group,et=console.groupCollapsed,rt=console.groupEnd;var e={configurable:!0,enumerable:!0,value:tt,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Qe++}}function It(){{if(Qe--,Qe===0){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:re({},e,{value:Jr}),info:re({},e,{value:qr}),warn:re({},e,{value:Xr}),error:re({},e,{value:Qr}),group:re({},e,{value:Zr}),groupCollapsed:re({},e,{value:et}),groupEnd:re({},e,{value:rt})})}Qe<0&&d("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}}var Dr=W.ReactCurrentDispatcher,Nr;function fr(e,r,n){{if(Nr===void 0)try{throw Error()}catch(i){var a=i.stack.trim().match(/\n( *(at )?)/);Nr=a&&a[1]||""}return`
`+Nr+e}}var Ir=!1,dr;{var $t=typeof WeakMap=="function"?WeakMap:Map;dr=new $t}function nt(e,r){if(!e||Ir)return"";{var n=dr.get(e);if(n!==void 0)return n}var a;Ir=!0;var i=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var v;v=Dr.current,Dr.current=null,Nt();try{if(r){var l=function(){throw Error()};if(Object.defineProperty(l.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(l,[])}catch(U){a=U}Reflect.construct(e,[],l)}else{try{l.call()}catch(U){a=U}e.call(l.prototype)}}else{try{throw Error()}catch(U){a=U}e()}}catch(U){if(U&&a&&typeof U.stack=="string"){for(var y=U.stack.split(`
`),E=a.stack.split(`
`),T=y.length-1,S=E.length-1;T>=1&&S>=0&&y[T]!==E[S];)S--;for(;T>=1&&S>=0;T--,S--)if(y[T]!==E[S]){if(T!==1||S!==1)do if(T--,S--,S<0||y[T]!==E[S]){var P=`
`+y[T].replace(" at new "," at ");return e.displayName&&P.includes("<anonymous>")&&(P=P.replace("<anonymous>",e.displayName)),typeof e=="function"&&dr.set(e,P),P}while(T>=1&&S>=0);break}}}finally{Ir=!1,Dr.current=v,It(),Error.prepareStackTrace=i}var j=e?e.displayName||e.name:"",$=j?fr(j):"";return typeof e=="function"&&dr.set(e,$),$}function Ft(e,r,n){return nt(e,!1)}function Mt(e){var r=e.prototype;return!!(r&&r.isReactComponent)}function pr(e,r,n){if(e==null)return"";if(typeof e=="function")return nt(e,Mt(e));if(typeof e=="string")return fr(e);switch(e){case F:return fr("Suspense");case ue:return fr("SuspenseList")}if(typeof e=="object")switch(e.$$typeof){case N:return Ft(e.render);case H:return pr(e.type,r,n);case G:{var a=e,i=a._payload,v=a._init;try{return pr(v(i),r,n)}catch{}}}return""}var at={},ot=W.ReactDebugCurrentFrame;function vr(e){if(e){var r=e._owner,n=pr(e.type,e._source,r?r.type:null);ot.setExtraStackFrame(n)}else ot.setExtraStackFrame(null)}function Lt(e,r,n,a,i){{var v=Function.call.bind(ze);for(var l in e)if(v(e,l)){var y=void 0;try{if(typeof e[l]!="function"){var E=Error((a||"React class")+": "+n+" type `"+l+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[l]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw E.name="Invariant Violation",E}y=e[l](r,l,a,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(T){y=T}y&&!(y instanceof Error)&&(vr(i),d("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",a||"React class",n,l,typeof y),vr(null)),y instanceof Error&&!(y.message in at)&&(at[y.message]=!0,vr(i),d("Failed %s type: %s",n,y.message),vr(null))}}}function Be(e){if(e){var r=e._owner,n=pr(e.type,e._source,r?r.type:null);ee(n)}else ee(null)}var $r;$r=!1;function it(){if(I.current){var e=fe(I.current.type);if(e)return`

Check the render method of \``+e+"`."}return""}function Ut(e){if(e!==void 0){var r=e.fileName.replace(/^.*[\\\/]/,""),n=e.lineNumber;return`

Check your code at `+r+":"+n+"."}return""}function Vt(e){return e!=null?Ut(e.__source):""}var st={};function Wt(e){var r=it();if(!r){var n=typeof e=="string"?e:e.displayName||e.name;n&&(r=`

Check the top-level render call using <`+n+">.")}return r}function ut(e,r){if(!(!e._store||e._store.validated||e.key!=null)){e._store.validated=!0;var n=Wt(r);if(!st[n]){st[n]=!0;var a="";e&&e._owner&&e._owner!==I.current&&(a=" It was passed a child from "+fe(e._owner.type)+"."),Be(e),d('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',n,a),Be(null)}}}function lt(e,r){if(typeof e=="object"){if(Me(e))for(var n=0;n<e.length;n++){var a=e[n];Ee(a)&&ut(a,r)}else if(Ee(e))e._store&&(e._store.validated=!0);else if(e){var i=R(e);if(typeof i=="function"&&i!==e.entries)for(var v=i.call(e),l;!(l=v.next()).done;)Ee(l.value)&&ut(l.value,r)}}}function ct(e){{var r=e.type;if(r==null||typeof r=="string")return;var n;if(typeof r=="function")n=r.propTypes;else if(typeof r=="object"&&(r.$$typeof===N||r.$$typeof===H))n=r.propTypes;else return;if(n){var a=fe(r);Lt(n,e.props,"prop",a,e)}else if(r.PropTypes!==void 0&&!$r){$r=!0;var i=fe(r);d("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",i||"Unknown")}typeof r.getDefaultProps=="function"&&!r.getDefaultProps.isReactClassApproved&&d("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function Bt(e){{for(var r=Object.keys(e.props),n=0;n<r.length;n++){var a=r[n];if(a!=="children"&&a!=="key"){Be(e),d("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",a),Be(null);break}}e.ref!==null&&(Be(e),d("Invalid attribute `ref` supplied to `React.Fragment`."),Be(null))}}function ft(e,r,n){var a=p(e);if(!a){var i="";(e===void 0||typeof e=="object"&&e!==null&&Object.keys(e).length===0)&&(i+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var v=Vt(r);v?i+=v:i+=it();var l;e===null?l="null":Me(e)?l="array":e!==void 0&&e.$$typeof===f?(l="<"+(fe(e.type)||"Unknown")+" />",i=" Did you accidentally export a JSX literal instead of a component?"):l=typeof e,d("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",l,i)}var y=kr.apply(this,arguments);if(y==null)return y;if(a)for(var E=2;E<arguments.length;E++)lt(arguments[E],e);return e===w?Bt(y):ct(y),y}var dt=!1;function Yt(e){var r=ft.bind(null,e);return r.type=e,dt||(dt=!0,ae("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")),Object.defineProperty(r,"type",{enumerable:!1,get:function(){return ae("Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),r}function Ht(e,r,n){for(var a=Rr.apply(this,arguments),i=2;i<arguments.length;i++)lt(arguments[i],a.type);return ct(a),a}function Gt(e,r){var n=K.transition;K.transition={};var a=K.transition;K.transition._updatedFibers=new Set;try{e()}finally{if(K.transition=n,n===null&&a._updatedFibers){var i=a._updatedFibers.size;i>10&&ae("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."),a._updatedFibers.clear()}}}var pt=!1,hr=null;function Kt(e){if(hr===null)try{var r=("require"+Math.random()).slice(0,7),n=c&&c[r];hr=n.call(c,"timers").setImmediate}catch{hr=function(i){pt===!1&&(pt=!0,typeof MessageChannel>"u"&&d("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));var v=new MessageChannel;v.port1.onmessage=i,v.port2.postMessage(void 0)}}return hr(e)}var Ye=0,vt=!1;function ht(e){{var r=Ye;Ye++,z.current===null&&(z.current=[]);var n=z.isBatchingLegacy,a;try{if(z.isBatchingLegacy=!0,a=e(),!n&&z.didScheduleLegacyUpdate){var i=z.current;i!==null&&(z.didScheduleLegacyUpdate=!1,Lr(i))}}catch(j){throw yr(r),j}finally{z.isBatchingLegacy=n}if(a!==null&&typeof a=="object"&&typeof a.then=="function"){var v=a,l=!1,y={then:function(j,$){l=!0,v.then(function(U){yr(r),Ye===0?Fr(U,j,$):j(U)},function(U){yr(r),$(U)})}};return!vt&&typeof Promise<"u"&&Promise.resolve().then(function(){}).then(function(){l||(vt=!0,d("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"))}),y}else{var E=a;if(yr(r),Ye===0){var T=z.current;T!==null&&(Lr(T),z.current=null);var S={then:function(j,$){z.current===null?(z.current=[],Fr(E,j,$)):j(E)}};return S}else{var P={then:function(j,$){j(E)}};return P}}}}function yr(e){e!==Ye-1&&d("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "),Ye=e}function Fr(e,r,n){{var a=z.current;if(a!==null)try{Lr(a),Kt(function(){a.length===0?(z.current=null,r(e)):Fr(e,r,n)})}catch(i){n(i)}else r(e)}}var Mr=!1;function Lr(e){if(!Mr){Mr=!0;var r=0;try{for(;r<e.length;r++){var n=e[r];do n=n(!0);while(n!==null)}e.length=0}catch(a){throw e=e.slice(r+1),a}finally{Mr=!1}}}var Jt=ft,qt=Ht,Xt=Yt,Qt={map:Ne,forEach:ur,count:Pr,toArray:Ar,only:lr};s.Children=Qt,s.Component=ve,s.Fragment=w,s.Profiler=X,s.PureComponent=Ae,s.StrictMode=D,s.Suspense=F,s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W,s.act=ht,s.cloneElement=qt,s.createContext=cr,s.createElement=Jt,s.createFactory=Xt,s.createRef=wr,s.forwardRef=o,s.isValidElement=Ee,s.lazy=t,s.memo=_,s.startTransition=Gt,s.unstable_act=ht,s.useCallback=ye,s.useContext=b,s.useDebugValue=zr,s.useDeferredValue=zt,s.useEffect=x,s.useId=xt,s.useImperativeHandle=Xe,s.useInsertionEffect=te,s.useLayoutEffect=ke,s.useMemo=Y,s.useReducer=L,s.useRef=O,s.useState=g,s.useSyncExternalStore=Dt,s.useTransition=xr,s.version=h,typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop=="function"&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error)})()}(Ze,Ze.exports);var bt=Ze.exports;Wr.exports=bt;var $e=Wr.exports;/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(){var c=$e,s=Symbol.for("react.element"),h=Symbol.for("react.portal"),f=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),w=Symbol.for("react.profiler"),D=Symbol.for("react.provider"),X=Symbol.for("react.context"),Q=Symbol.for("react.forward_ref"),A=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),F=Symbol.for("react.memo"),ue=Symbol.for("react.lazy"),H=Symbol.for("react.offscreen"),G=Symbol.iterator,ie="@@iterator";function Z(t){if(t===null||typeof t!="object")return null;var o=G&&t[G]||t[ie];return typeof o=="function"?o:null}var le=c.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function R(t){{for(var o=arguments.length,u=new Array(o>1?o-1:0),p=1;p<o;p++)u[p-1]=arguments[p];de("error",t,u)}}function de(t,o,u){{var p=le.ReactDebugCurrentFrame,_=p.getStackAddendum();_!==""&&(o+="%s",u=u.concat([_]));var m=u.map(function(b){return String(b)});m.unshift("Warning: "+o),Function.prototype.apply.call(console[t],console,m)}}var K=!1,z=!1,I=!1,V=!1,J=!1,ee;ee=Symbol.for("react.module.reference");function me(t){return!!(typeof t=="string"||typeof t=="function"||t===f||t===w||J||t===k||t===A||t===N||V||t===H||K||z||I||typeof t=="object"&&t!==null&&(t.$$typeof===ue||t.$$typeof===F||t.$$typeof===D||t.$$typeof===X||t.$$typeof===Q||t.$$typeof===ee||t.getModuleId!==void 0))}function pe(t,o,u){var p=t.displayName;if(p)return p;var _=o.displayName||o.name||"";return _!==""?u+"("+_+")":u}function Te(t){return t.displayName||"Context"}function M(t){if(t==null)return null;if(typeof t.tag=="number"&&R("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t;switch(t){case f:return"Fragment";case h:return"Portal";case w:return"Profiler";case k:return"StrictMode";case A:return"Suspense";case N:return"SuspenseList"}if(typeof t=="object")switch(t.$$typeof){case X:var o=t;return Te(o)+".Consumer";case D:var u=t;return Te(u._context)+".Provider";case Q:return pe(t,t.render,"ForwardRef");case F:var p=t.displayName||null;return p!==null?p:M(t.type)||"Memo";case ue:{var _=t,m=_._payload,b=_._init;try{return M(b(m))}catch{return null}}}return null}var ne=Object.assign,W=0,ae,d,ce,se,B,oe,re;function Fe(){}Fe.__reactDisabledLog=!0;function ve(){{if(W===0){ae=console.log,d=console.info,ce=console.warn,se=console.error,B=console.group,oe=console.groupCollapsed,re=console.groupEnd;var t={configurable:!0,enumerable:!0,value:Fe,writable:!0};Object.defineProperties(console,{info:t,log:t,warn:t,error:t,group:t,groupCollapsed:t,groupEnd:t})}W++}}function He(){{if(W--,W===0){var t={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:ne({},t,{value:ae}),info:ne({},t,{value:d}),warn:ne({},t,{value:ce}),error:ne({},t,{value:se}),group:ne({},t,{value:B}),groupCollapsed:ne({},t,{value:oe}),groupEnd:ne({},t,{value:re})})}W<0&&R("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}}var Ge=le.ReactCurrentDispatcher,Se;function Pe(t,o,u){{if(Se===void 0)try{throw Error()}catch(_){var p=_.stack.trim().match(/\n( *(at )?)/);Se=p&&p[1]||""}return`
`+Se+t}}var Ae=!1,ge;{var wr=typeof WeakMap=="function"?WeakMap:Map;ge=new wr}function er(t,o){if(!t||Ae)return"";{var u=ge.get(t);if(u!==void 0)return u}var p;Ae=!0;var _=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var m;m=Ge.current,Ge.current=null,ve();try{if(o){var b=function(){throw Error()};if(Object.defineProperty(b.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(b,[])}catch(Y){p=Y}Reflect.construct(t,[],b)}else{try{b.call()}catch(Y){p=Y}t.call(b.prototype)}}else{try{throw Error()}catch(Y){p=Y}t()}}catch(Y){if(Y&&p&&typeof Y.stack=="string"){for(var g=Y.stack.split(`
`),L=p.stack.split(`
`),O=g.length-1,x=L.length-1;O>=1&&x>=0&&g[O]!==L[x];)x--;for(;O>=1&&x>=0;O--,x--)if(g[O]!==L[x]){if(O!==1||x!==1)do if(O--,x--,x<0||g[O]!==L[x]){var te=`
`+g[O].replace(" at new "," at ");return t.displayName&&te.includes("<anonymous>")&&(te=te.replace("<anonymous>",t.displayName)),typeof t=="function"&&ge.set(t,te),te}while(O>=1&&x>=0);break}}}finally{Ae=!1,Ge.current=m,He(),Error.prepareStackTrace=_}var ke=t?t.displayName||t.name:"",ye=ke?Pe(ke):"";return typeof t=="function"&&ge.set(t,ye),ye}function Me(t,o,u){return er(t,!1)}function Er(t){var o=t.prototype;return!!(o&&o.isReactComponent)}function Le(t,o,u){if(t==null)return"";if(typeof t=="function")return er(t,Er(t));if(typeof t=="string")return Pe(t);switch(t){case A:return Pe("Suspense");case N:return Pe("SuspenseList")}if(typeof t=="object")switch(t.$$typeof){case Q:return Me(t.render);case F:return Le(t.type,o,u);case ue:{var p=t,_=p._payload,m=p._init;try{return Le(m(_),o,u)}catch{}}}return""}var be=Object.prototype.hasOwnProperty,Oe={},rr=le.ReactDebugCurrentFrame;function je(t){if(t){var o=t._owner,u=Le(t.type,t._source,o?o.type:null);rr.setExtraStackFrame(u)}else rr.setExtraStackFrame(null)}function fe(t,o,u,p,_){{var m=Function.call.bind(be);for(var b in t)if(m(t,b)){var g=void 0;try{if(typeof t[b]!="function"){var L=Error((p||"React class")+": "+u+" type `"+b+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof t[b]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw L.name="Invariant Violation",L}g=t[b](o,b,p,u,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(O){g=O}g&&!(g instanceof Error)&&(je(_),R("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",p||"React class",u,b,typeof g),je(null)),g instanceof Error&&!(g.message in Oe)&&(Oe[g.message]=!0,je(_),R("Failed %s type: %s",u,g.message),je(null))}}}var ze=Array.isArray;function Ue(t){return ze(t)}function tr(t){{var o=typeof Symbol=="function"&&Symbol.toStringTag,u=o&&t[Symbol.toStringTag]||t.constructor.name||"Object";return u}}function nr(t){try{return Ve(t),!1}catch{return!0}}function Ve(t){return""+t}function Ke(t){if(nr(t))return R("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",tr(t)),Ve(t)}var we=le.ReactCurrentOwner,_r={key:!0,ref:!0,__self:!0,__source:!0},ar,or,xe;xe={};function kr(t){if(be.call(t,"ref")){var o=Object.getOwnPropertyDescriptor(t,"ref").get;if(o&&o.isReactWarning)return!1}return t.ref!==void 0}function Cr(t){if(be.call(t,"key")){var o=Object.getOwnPropertyDescriptor(t,"key").get;if(o&&o.isReactWarning)return!1}return t.key!==void 0}function Rr(t,o){if(typeof t.ref=="string"&&we.current&&o&&we.current.stateNode!==o){var u=M(we.current.type);xe[u]||(R('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',M(we.current.type),t.ref),xe[u]=!0)}}function Ee(t,o){{var u=function(){ar||(ar=!0,R("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",o))};u.isReactWarning=!0,Object.defineProperty(t,"key",{get:u,configurable:!0})}}function ir(t,o){{var u=function(){or||(or=!0,R("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",o))};u.isReactWarning=!0,Object.defineProperty(t,"ref",{get:u,configurable:!0})}}var Tr=function(t,o,u,p,_,m,b){var g={$$typeof:s,type:t,key:o,ref:u,props:b,_owner:m};return g._store={},Object.defineProperty(g._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(g,"_self",{configurable:!1,enumerable:!1,writable:!1,value:p}),Object.defineProperty(g,"_source",{configurable:!1,enumerable:!1,writable:!1,value:_}),Object.freeze&&(Object.freeze(g.props),Object.freeze(g)),g};function Sr(t,o,u,p,_){{var m,b={},g=null,L=null;u!==void 0&&(Ke(u),g=""+u),Cr(o)&&(Ke(o.key),g=""+o.key),kr(o)&&(L=o.ref,Rr(o,_));for(m in o)be.call(o,m)&&!_r.hasOwnProperty(m)&&(b[m]=o[m]);if(t&&t.defaultProps){var O=t.defaultProps;for(m in O)b[m]===void 0&&(b[m]=O[m])}if(g||L){var x=typeof t=="function"?t.displayName||t.name||"Unknown":t;g&&Ee(b,x),L&&ir(b,x)}return Tr(t,g,L,_,p,we.current,b)}}var We=le.ReactCurrentOwner,sr=le.ReactDebugCurrentFrame;function he(t){if(t){var o=t._owner,u=Le(t.type,t._source,o?o.type:null);sr.setExtraStackFrame(u)}else sr.setExtraStackFrame(null)}var De;De=!1;function _e(t){return typeof t=="object"&&t!==null&&t.$$typeof===s}function Ne(){{if(We.current){var t=M(We.current.type);if(t)return`

Check the render method of \``+t+"`."}return""}}function Pr(t){{if(t!==void 0){var o=t.fileName.replace(/^.*[\\\/]/,""),u=t.lineNumber;return`

Check your code at `+o+":"+u+"."}return""}}var ur={};function Ar(t){{var o=Ne();if(!o){var u=typeof t=="string"?t:t.displayName||t.name;u&&(o=`

Check the top-level render call using <`+u+">.")}return o}}function lr(t,o){{if(!t._store||t._store.validated||t.key!=null)return;t._store.validated=!0;var u=Ar(o);if(ur[u])return;ur[u]=!0;var p="";t&&t._owner&&t._owner!==We.current&&(p=" It was passed a child from "+M(t._owner.type)+"."),he(t),R('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',u,p),he(null)}}function cr(t,o){{if(typeof t!="object")return;if(Ue(t))for(var u=0;u<t.length;u++){var p=t[u];_e(p)&&lr(p,o)}else if(_e(t))t._store&&(t._store.validated=!0);else if(t){var _=Z(t);if(typeof _=="function"&&_!==t.entries)for(var m=_.call(t),b;!(b=m.next()).done;)_e(b.value)&&lr(b.value,o)}}}function Ie(t){{var o=t.type;if(o==null||typeof o=="string")return;var u;if(typeof o=="function")u=o.propTypes;else if(typeof o=="object"&&(o.$$typeof===Q||o.$$typeof===F))u=o.propTypes;else return;if(u){var p=M(o);fe(u,t.props,"prop",p,t)}else if(o.PropTypes!==void 0&&!De){De=!0;var _=M(o);R("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",_||"Unknown")}typeof o.getDefaultProps=="function"&&!o.getDefaultProps.isReactClassApproved&&R("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function Je(t){{for(var o=Object.keys(t.props),u=0;u<o.length;u++){var p=o[u];if(p!=="children"&&p!=="key"){he(t),R("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",p),he(null);break}}t.ref!==null&&(he(t),R("Invalid attribute `ref` supplied to `React.Fragment`."),he(null))}}var qe={};function Or(t,o,u,p,_,m){{var b=me(t);if(!b){var g="";(t===void 0||typeof t=="object"&&t!==null&&Object.keys(t).length===0)&&(g+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var L=Pr(_);L?g+=L:g+=Ne();var O;t===null?O="null":Ue(t)?O="array":t!==void 0&&t.$$typeof===s?(O="<"+(M(t.type)||"Unknown")+" />",g=" Did you accidentally export a JSX literal instead of a component?"):O=typeof t,R("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",O,g)}var x=Sr(t,o,u,_,m);if(x==null)return x;if(b){var te=o.children;if(te!==void 0)if(p)if(Ue(te)){for(var ke=0;ke<te.length;ke++)cr(te[ke],t);Object.freeze&&Object.freeze(te)}else R("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");else cr(te,t)}if(be.call(o,"key")){var ye=M(t),Y=Object.keys(o).filter(function(xr){return xr!=="key"}),Xe=Y.length>0?"{key: someKey, "+Y.join(": ..., ")+": ...}":"{key: someKey}";if(!qe[ye+Xe]){var zr=Y.length>0?"{"+Y.join(": ..., ")+": ...}":"{}";R(`A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`,Xe,ye,zr,ye),qe[ye+Xe]=!0}}return t===f?Je(x):Ie(x),x}}var jr=Or;gr.Fragment=f,gr.jsxDEV=jr})(),Vr.exports=gr;var q=Vr.exports;const wt=c=>{if(c===null||typeof c>"u")return"N/A";if(c<0)return"Data przyszła (podejrzane)";if(c<30)return`${c} dni (bardzo młoda)`;if(c<180)return`${Math.floor(c/30)} mies. (młoda)`;if(c<365)return`${Math.floor(c/30)} mies. (poniżej roku)`;const s=Math.floor(c/365),h=Math.floor(c%365/30);return`${s} ${s===1?"r.":"l."}${h>0?` i ${h}m.`:""} (dojrzała)`};/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Et=c=>c.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),Br=(...c)=>c.filter((s,h,f)=>!!s&&f.indexOf(s)===h).join(" ");/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */var _t={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const kt=$e.forwardRef(({color:c="currentColor",size:s=24,strokeWidth:h=2,absoluteStrokeWidth:f,className:k="",children:w,iconNode:D,...X},Q)=>$e.createElement("svg",{ref:Q,..._t,width:s,height:s,stroke:c,strokeWidth:f?Number(h)*24/Number(s):h,className:Br("lucide",k),...X},[...D.map(([A,N])=>$e.createElement(A,N)),...Array.isArray(w)?w:[w]]));/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Ce=(c,s)=>{const h=$e.forwardRef(({className:f,...k},w)=>$e.createElement(kt,{ref:w,iconNode:s,className:Br(`lucide-${Et(c)}`,f),...k}));return h.displayName=`${c}`,h};/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Ct=Ce("CalendarDays",[["path",{d:"M8 2v4",key:"1cmpym"}],["path",{d:"M16 2v4",key:"4m81vk"}],["rect",{width:"18",height:"18",x:"3",y:"4",rx:"2",key:"1hopcy"}],["path",{d:"M3 10h18",key:"8toen8"}],["path",{d:"M8 14h.01",key:"6423bh"}],["path",{d:"M12 14h.01",key:"1etili"}],["path",{d:"M16 14h.01",key:"1gbofw"}],["path",{d:"M8 18h.01",key:"lrp35t"}],["path",{d:"M12 18h.01",key:"mhygvu"}],["path",{d:"M16 18h.01",key:"kzsmim"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Rt=Ce("Lock",[["rect",{width:"18",height:"11",x:"3",y:"11",rx:"2",ry:"2",key:"1w4ew1"}],["path",{d:"M7 11V7a5 5 0 0 1 10 0v4",key:"fwvmzm"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Tt=Ce("MessageSquareQuote",[["path",{d:"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z",key:"1lielz"}],["path",{d:"M8 12a2 2 0 0 0 2-2V8H8",key:"1jfesj"}],["path",{d:"M14 12a2 2 0 0 0 2-2V8h-2",key:"1dq9mh"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Yr=Ce("Network",[["rect",{x:"16",y:"16",width:"6",height:"6",rx:"1",key:"4q2zg0"}],["rect",{x:"2",y:"16",width:"6",height:"6",rx:"1",key:"8cvhb9"}],["rect",{x:"9",y:"2",width:"6",height:"6",rx:"1",key:"1egb70"}],["path",{d:"M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3",key:"1jsf9p"}],["path",{d:"M12 12V8",key:"2874zd"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const St=Ce("ShieldAlert",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}],["path",{d:"M12 8v4",key:"1got3b"}],["path",{d:"M12 16h.01",key:"1drbdi"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Pt=Ce("ShieldCheck",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}],["path",{d:"m9 12 2 2 4-4",key:"dzmm74"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const At=Ce("ShieldQuestion",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}],["path",{d:"M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3",key:"mhlwft"}],["path",{d:"M12 17h.01",key:"p32p05"}]]),C={age:{y:-15,vy:-25,m:10,vm:15,unknown:-5},ssl:{v:10,e:-20,p:-20,h:-25,es:-5,unknown:-10},bl:{l:-35,c:5},ip:-20,urlAi:{ph:-30,pm:-15,lh:10,ll:0,error:-5},cAi:{ah:-25,ap:-15,ml:5,error:-5,noContent:0}};function Ot(c,s){if(!(c!=null&&c.analysis))return console.warn("[ScoreCalc] No analysis data provided for score calculation."),{score:null,explanations:[]};const h=c.analysis,f=c.urlTextAnalysis,k=c.pageContentAnalyses;let w=50;const D=[],X=100,Q=0;console.log("[ScoreCalc] Starting calculation. Initial score:",w,"for URL:",s),console.log("[ScoreCalc] DomainAnalysisDetails:",JSON.parse(JSON.stringify(h))),console.log("[ScoreCalc] UrlTextAnalysis:",JSON.parse(JSON.stringify(f||{}))),console.log("[ScoreCalc] PageContentAnalyses:",JSON.parse(JSON.stringify(k||[])));const A=h.domain_actual_age_days;let N="neutral",F="0 pkt",ue="N/A";A!==null&&typeof A<"u"?(ue=wt(A),A<30?(w+=C.age.vy,N="negative",F=`${C.age.vy} pkt`):A<180?(w+=C.age.y,N="negative",F=`${C.age.y} pkt`):A>=730?(w+=C.age.vm,N="positive",F=`+${C.age.vm} pkt`):A>=365&&(w+=C.age.m,N="positive",F=`+${C.age.m} pkt`)):(w+=C.age.unknown,N="info",F=`${C.age.unknown} pkt (brak danych)`),D.push({id:"age",icon:Ct,label:"Wiek domeny",valueText:ue,impact:N,scoreEffect:F,details:"Starsze domeny są generalnie bardziej wiarygodne.",longDesc:"Nowo zarejestrowane domeny są często wykorzystywane w kampaniach phishingowych..."});let H="negative",G="Strona nie używa szyfrowania HTTPS.",ie="Brak (HTTP)",Z=C.ssl.h;if(h.parsed_url_scheme==="https")if(Z=0,h.ssl_info&&h.ssl_info.not_after){const d=new Date(h.ssl_info.not_after),ce=new Date,se=(d.getTime()-ce.getTime())/(1e3*3600*24);se>0?(Z=C.ssl.v,H="positive",ie="Ważny",G=`Połączenie szyfrowane. Certyfikat ważny do: ${d.toLocaleDateString()}.`,se<30&&(Z+=C.ssl.es,ie=q.jsxDEV("span",{className:"text-yellow-600 font-semibold",children:"Wygasa wkrótce!"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:134,columnNumber:13},this),G+=" Certyfikat wygasa za mniej niż 30 dni.")):(Z=C.ssl.e,H="negative",ie="Wygasł",G=`Certyfikat SSL wygasł: ${d.toLocaleDateString()}.`)}else Z=C.ssl.p,H="negative",ie="Problem (HTTPS)",G="Strona używa HTTPS, ale wystąpił problem z weryfikacją certyfikatu...";else h.ssl_info===null&&h.parsed_url_scheme!=="https"?(H="negative",ie="Brak (HTTP)",G="Strona nie używa szyfrowania HTTPS (HTTP)."):(Z=C.ssl.unknown,H="info",ie="N/A (SSL)",G="Nie udało się jednoznacznie zweryfikować statusu SSL.");w+=Z;const le=`${Z>0?"+":""}${Z} pkt`;D.push({id:"ssl",icon:Rt,label:"Szyfrowanie (SSL)",valueText:ie,impact:H,details:G,scoreEffect:le,longDesc:"Certyfikat SSL zapewnia szyfrowanie danych przesyłanych między Tobą a stroną..."});let R=0,de="Niedostępna",K="neutral",z="Analiza AI adresu URL nie została przeprowadzona lub jest niedostępna.";f===null?(R=C.urlAi.error,de=q.jsxDEV("span",{className:"text-red-500",children:"Błąd analizy"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:190,columnNumber:15},this),K="negative",z="Nie udało się przeprowadzić analizy AI dla tego URL z powodu błędu."):f?(de=`${f.label} (${(f.confidence*100).toFixed(0)}%)`,z=`Model AI ocenił URL jako ${f.label.toLowerCase()} z ${(f.confidence*100).toFixed(0)}% pewnością.`,f.is_phishing?(K="negative",f.confidence>.9?R=C.urlAi.ph:R=C.urlAi.pm):f.confidence>.9?(R=C.urlAi.lh,K="positive"):(R=C.urlAi.ll,K="neutral")):(de=q.jsxDEV("span",{className:"text-gray-500",children:"N/A (URL AI)"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:215,columnNumber:15},this),K="neutral",z="Analiza AI adresu URL nie została jeszcze przeprowadzona lub dane nie są dostępne."),D.push({id:"aiUrl",icon:At,label:"Analiza AI URL",valueText:de,impact:K,scoreEffect:`${R>0?"+":""}${R} pkt`,details:z,longDesc:"Sztuczna inteligencja analizuje strukturę i komponenty adresu URL..."}),w+=R;let I="N/A",V="neutral",J=0,ee="Analiza treści strony nie została przeprowadzona lub brakło tekstu.",me="Analiza treści strony wyszukuje fragmenty mogące wskazywać na oszustwo...";const pe=[];if(k===null)I=q.jsxDEV("span",{className:"text-red-500",children:"Błąd analizy treści"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:244,columnNumber:13},this),V="negative",J=C.cAi.error,ee="Wystąpił błąd podczas próby analizy treści strony.";else if(k&&k.length>0){let d=0,ce=!1,se=0;if(k.forEach(B=>{B.is_phishing&&(d++,se+=B.confidence,B.confidence>.9&&(ce=!0),pe.push({label:B.label,conf:B.confidence,chunk:B.originalChunk}))}),ce?(J=C.cAi.ah,V="negative",I=q.jsxDEV("span",{className:"text-red-500 font-semibold",children:"Podejrzane Treści!"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:268,columnNumber:9},this),ee=`Wykryto fragmenty treści o wysokim prawdopodobieństwie phishingu (${d}/${k.length}).`):d>0?se/d>.5?(J=C.cAi.ap,V="negative",I="Podejrzane fragmenty",ee=`Wykryto ${d} z ${k.length} fragmentów jako potencjalnie phishingowe.`):(V="info",I="Niejednoznaczne",ee=`Niektóre fragmenty (${d}/${k.length}) wydają się niejednoznaczne.`):(J=C.cAi.ml,V="positive",I="Treść OK",ee=`Analiza treści (${k.length} fragmentów) nie wykazała znamion phishingu.`),pe.length>0){const B=pe.slice(0,3).map((oe,re)=>q.jsxDEV("li",{title:oe.chunk,className:"mb-1",children:[q.jsxDEV("span",{className:`font-semibold ${oe.label==="PHISHING"?"text-red-600":"text-gray-700"}`,children:['"',oe.chunk.substring(0,50),'..."']},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:297,columnNumber:11},this),q.jsxDEV("span",{className:"text-gray-500 ml-1",children:["(",oe.label," ",(oe.conf*100).toFixed(0),"%)"]},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:304,columnNumber:11},this)]},`chunk-${re}-${oe.chunk.slice(0,5)}`,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:292,columnNumber:9},this));me=q.jsxDEV("div",{children:[q.jsxDEV("p",{children:typeof me=="string"?me:"Szczegóły analizy treści:"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:311,columnNumber:11},this),q.jsxDEV("p",{className:"mt-2 font-semibold",children:"Podejrzane fragmenty:"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:316,columnNumber:11},this),q.jsxDEV("ul",{className:"list-disc pl-5 max-h-24 overflow-y-auto text-xs custom-scrollbar",children:B},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:317,columnNumber:11},this),pe.length>3&&q.jsxDEV("p",{className:"text-xs mt-1",children:["...i ",pe.length-3," więcej."]},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:321,columnNumber:13},this)]},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:310,columnNumber:9},this)}}else k&&k.length===0?(J=C.cAi.noContent,V="info",I="Brak tekstu do analizy",ee="Nie znaleziono wystarczającej ilości tekstu na stronie do przeprowadzenia pełnej analizy treści."):(I=q.jsxDEV("span",{className:"text-gray-500",children:"N/A (treść)"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:335,columnNumber:13},this),V="neutral",ee="Analiza treści strony nie została jeszcze przeprowadzona lub dane nie są dostępne.");w+=J,D.push({id:"contentAi",icon:Tt,label:"Analiza AI treści",valueText:I,impact:V,scoreEffect:`${J>0?"+":""}${J} pkt`,details:ee,longDesc:me});let Te=!1,M=0;const ne=[];h.blacklist_checks&&h.blacklist_checks.forEach(d=>{d.is_listed&&(Te=!0,ne.push(d.source))}),Te?(M=C.bl.l,D.push({id:"blacklist",icon:St,label:"Listy zagrożeń",valueText:`Na listach: ${ne.join(", ")}`,impact:"negative",scoreEffect:`${M} pkt`,details:"Znalezienie na publicznej liście zagrożeń jest silnym sygnałem ostrzegawczym.",longDesc:"Te listy są kompilowane przez organizacje bezpieczeństwa..."})):(M=C.bl.c,D.push({id:"blacklist",icon:Pt,label:"Listy zagrożeń",valueText:"Czysto",impact:"positive",scoreEffect:`+${M} pkt`,details:"Nie znaleziono na znanych listach zagrożeń.",longDesc:"Brak wpisów na głównych listach zagrożeń to dobry znak..."})),w+=M;let W=0;h.is_ip_address_in_url?(W=C.ip,D.push({id:"ipInUrl",icon:Yr,label:"Adres IP w URL",valueText:"Tak",impact:"negative",scoreEffect:`${W} pkt`,details:"Używanie adresu IP zamiast nazwy domenowej jest częstą taktyką w phishingu.",longDesc:"Legalne strony rzadko używają adresów IP bezpośrednio w linkach..."})):D.push({id:"ipInUrl",icon:Yr,label:"Adres IP w URL",valueText:"Nie",impact:"positive",details:"URL używa standardowej nazwy domenowej.",scoreEffect:"+0 pkt"}),w+=W;const ae=Math.max(Q,Math.min(X,Math.round(w)));return console.log(`[ScoreCalc] Final calculated score: ${ae} (raw score before clamp: ${w})`),{score:ae,explanations:D}}const Hr="http://127.0.0.1:8000/api/v1",br=c=>{try{return new URL(c).hostname.replace(/^www\./,"")}catch{return""}},Re=(c,s="#777777")=>{try{chrome.action.setBadgeText({text:c}),chrome.action.setBadgeBackgroundColor({color:s})}catch(h){console.warn("[BG] Failed to update badge.",h)}},Gr=(c,s)=>{if(!c)return;const{score:h}=Ot(c,s);if(h!==null){let f="#10B981";h<40?f="#EF4444":h<70&&(f="#F59E0B"),Re(h.toString(),f)}else c.error?Re("!","#EF4444"):Re("?","#777777")},Kr=async c=>{try{const s=await fetch(`${Hr}/check_phishing_text`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text_to_analyze:c})});return s.ok?await s.json():null}catch(s){return console.error("[BG] fetchTextAnalysis Network Error:",s),null}},jt=async(c,s=[])=>{const h=br(c);if(!h)return{error:"Invalid domain",lastChecked:Date.now()};Re("...","#F59E0B");try{const[f,k]=await Promise.all([fetch(`${Hr}/analyze_domain_details`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:c})}),Kr(c)]);if(!f.ok)return{error:"API Error (domain details)",lastChecked:Date.now()};const w=await f.json();if(w.error)return{error:w.error,lastChecked:Date.now()};let D=[];if(s.length>0){const Q=s.map(async(A,N)=>{const F=await Kr(A);return F?{...F,chunkIndex:N,originalChunk:A.substring(0,100)+"..."}:null});D=(await Promise.all(Q)).filter(A=>A!==null)}const X={analysis:w,urlTextAnalysis:k,pageContentAnalyses:D,lastChecked:Date.now()};return chrome.storage.local.set({[h]:X}),Gr(X,c),X}catch(f){const k=f instanceof Error?f.message:String(f);return Re("!","#EF4444"),{error:`Network/Parsing error: ${k}`,lastChecked:Date.now()}}};chrome.runtime.onMessage.addListener((c,s,h)=>{if(c.action==="analyzePageContent")return console.log(`[BG] Received content for analysis from ${c.url}`),jt(c.url,c.contentChunks).then(f=>{chrome.runtime.sendMessage({action:"analysisUpdated",domain:br(c.url),data:f,forUrl:c.url}).catch(()=>{}),h({success:!0})}).catch(f=>h({success:!1,error:f.message})),!0;if(c.action==="requestAnalysisForCurrentTab"){const f=s.tab||c.tab,k=(f==null?void 0:f.url)||c.url,w=f==null?void 0:f.id;return k&&w?(console.log(`[BG] Manual refresh requested for ${k}`),Re("...","#F59E0B"),chrome.tabs.sendMessage(w,{action:"getTextContentFromPage"}),h({status:"refresh_triggered"})):h({error:"No active tab/URL to refresh."}),!0}return!1}),chrome.tabs.onActivated.addListener(async c=>{chrome.tabs.get(c.tabId,s=>{if(s.url){const h=br(s.url);chrome.storage.local.get(h,f=>{const k=f[h];k?(console.log(`[BG] onActivated: Found cached data for ${h}`),Gr(k,s.url)):Re("","#777777")})}})}),console.log("[BG] Background script loaded and listeners attached (v1.2.1).")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
