(function(){"use strict";var Vr={exports:{}},gr={},Wr={exports:{}},Ze={exports:{}};Ze.exports,function(c,s){/**
 * @license React
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(){typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart=="function"&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error);var f="18.3.1",v=Symbol.for("react.element"),k=Symbol.for("react.portal"),w=Symbol.for("react.fragment"),j=Symbol.for("react.strict_mode"),Z=Symbol.for("react.profiler"),ee=Symbol.for("react.provider"),A=Symbol.for("react.context"),N=Symbol.for("react.forward_ref"),F=Symbol.for("react.suspense"),le=Symbol.for("react.suspense_list"),X=Symbol.for("react.memo"),q=Symbol.for("react.lazy"),se=Symbol.for("react.offscreen"),re=Symbol.iterator,ce="@@iterator";function R(e){if(e===null||typeof e!="object")return null;var r=re&&e[re]||e[ce];return typeof r=="function"?r:null}var ve={current:null},te={transition:null},z={current:null,isBatchingLegacy:!1,didScheduleLegacyUpdate:!1},I={current:null},G={},L=null;function J(e){L=e}G.setExtraStackFrame=function(e){L=e},G.getCurrentStack=null,G.getStackAddendum=function(){var e="";L&&(e+=L);var r=G.getCurrentStack;return r&&(e+=r()||""),e};var we=!1,he=!1,ue=!1,U=!1,oe=!1,V={ReactCurrentDispatcher:ve,ReactCurrentBatchConfig:te,ReactCurrentOwner:I};V.ReactDebugCurrentFrame=G,V.ReactCurrentActQueue=z;function ne(e){{for(var r=arguments.length,n=new Array(r>1?r-1:0),a=1;a<r;a++)n[a-1]=arguments[a];fe("warn",e,n)}}function m(e){{for(var r=arguments.length,n=new Array(r>1?r-1:0),a=1;a<r;a++)n[a-1]=arguments[a];fe("error",e,n)}}function fe(e,r,n){{var a=V.ReactDebugCurrentFrame,i=a.getStackAddendum();i!==""&&(r+="%s",n=n.concat([i]));var p=n.map(function(l){return String(l)});p.unshift("Warning: "+r),Function.prototype.apply.call(console[e],console,p)}}var Ee={};function M(e,r){{var n=e.constructor,a=n&&(n.displayName||n.name)||"ReactClass",i=a+"."+r;if(Ee[i])return;m("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.",r,a),Ee[i]=!0}}var de={isMounted:function(e){return!1},enqueueForceUpdate:function(e,r,n){M(e,"forceUpdate")},enqueueReplaceState:function(e,r,n,a){M(e,"replaceState")},enqueueSetState:function(e,r,n,a){M(e,"setState")}},B=Object.assign,ye={};Object.freeze(ye);function W(e,r,n){this.props=e,this.context=r,this.refs=ye,this.updater=n||de}W.prototype.isReactComponent={},W.prototype.setState=function(e,r){if(typeof e!="object"&&typeof e!="function"&&e!=null)throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,r,"setState")},W.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")};{var ie={isMounted:["isMounted","Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],replaceState:["replaceState","Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]},Ae=function(e,r){Object.defineProperty(W.prototype,e,{get:function(){ne("%s(...) is deprecated in plain JavaScript React classes. %s",r[0],r[1])}})};for(var Oe in ie)ie.hasOwnProperty(Oe)&&Ae(Oe,ie[Oe])}function xe(){}xe.prototype=W.prototype;function je(e,r,n){this.props=e,this.context=r,this.refs=ye,this.updater=n||de}var ke=je.prototype=new xe;ke.constructor=je,B(ke,W.prototype),ke.isPureReactComponent=!0;function wr(){var e={current:null};return Object.seal(e),e}var er=Array.isArray;function Ue(e){return er(e)}function Er(e){{var r=typeof Symbol=="function"&&Symbol.toStringTag,n=r&&e[Symbol.toStringTag]||e.constructor.name||"Object";return n}}function Ve(e){try{return _e(e),!1}catch{return!0}}function _e(e){return""+e}function ze(e){if(Ve(e))return m("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",Er(e)),_e(e)}function rr(e,r,n){var a=e.displayName;if(a)return a;var i=r.displayName||r.name||"";return i!==""?n+"("+i+")":n}function De(e){return e.displayName||"Context"}function pe(e){if(e==null)return null;if(typeof e.tag=="number"&&m("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),typeof e=="function")return e.displayName||e.name||null;if(typeof e=="string")return e;switch(e){case w:return"Fragment";case k:return"Portal";case Z:return"Profiler";case j:return"StrictMode";case F:return"Suspense";case le:return"SuspenseList"}if(typeof e=="object")switch(e.$$typeof){case A:var r=e;return De(r)+".Consumer";case ee:var n=e;return De(n._context)+".Provider";case N:return rr(e,e.render,"ForwardRef");case X:var a=e.displayName||null;return a!==null?a:pe(e.type)||"Memo";case q:{var i=e,p=i._payload,l=i._init;try{return pe(l(p))}catch{return null}}}return null}var Ne=Object.prototype.hasOwnProperty,We={key:!0,ref:!0,__self:!0,__source:!0},tr,nr,Be;Be={};function Ke(e){if(Ne.call(e,"ref")){var r=Object.getOwnPropertyDescriptor(e,"ref").get;if(r&&r.isReactWarning)return!1}return e.ref!==void 0}function Ce(e){if(Ne.call(e,"key")){var r=Object.getOwnPropertyDescriptor(e,"key").get;if(r&&r.isReactWarning)return!1}return e.key!==void 0}function kr(e,r){var n=function(){tr||(tr=!0,m("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",r))};n.isReactWarning=!0,Object.defineProperty(e,"key",{get:n,configurable:!0})}function ar(e,r){var n=function(){nr||(nr=!0,m("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",r))};n.isReactWarning=!0,Object.defineProperty(e,"ref",{get:n,configurable:!0})}function or(e){if(typeof e.ref=="string"&&I.current&&e.__self&&I.current.stateNode!==e.__self){var r=pe(I.current.type);Be[r]||(m('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',r,e.ref),Be[r]=!0)}}var Ie=function(e,r,n,a,i,p,l){var h={$$typeof:v,type:e,key:r,ref:n,props:l,_owner:p};return h._store={},Object.defineProperty(h._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(h,"_self",{configurable:!1,enumerable:!1,writable:!1,value:a}),Object.defineProperty(h,"_source",{configurable:!1,enumerable:!1,writable:!1,value:i}),Object.freeze&&(Object.freeze(h.props),Object.freeze(h)),h};function _r(e,r,n){var a,i={},p=null,l=null,h=null,_=null;if(r!=null){Ke(r)&&(l=r.ref,or(r)),Ce(r)&&(ze(r.key),p=""+r.key),h=r.__self===void 0?null:r.__self,_=r.__source===void 0?null:r.__source;for(a in r)Ne.call(r,a)&&!We.hasOwnProperty(a)&&(i[a]=r[a])}var T=arguments.length-2;if(T===1)i.children=n;else if(T>1){for(var S=Array(T),P=0;P<T;P++)S[P]=arguments[P+2];Object.freeze&&Object.freeze(S),i.children=S}if(e&&e.defaultProps){var x=e.defaultProps;for(a in x)i[a]===void 0&&(i[a]=x[a])}if(p||l){var $=typeof e=="function"?e.displayName||e.name||"Unknown":e;p&&kr(i,$),l&&ar(i,$)}return Ie(e,p,l,h,_,I.current,i)}function Cr(e,r){var n=Ie(e.type,r,e.ref,e._self,e._source,e._owner,e.props);return n}function Rr(e,r,n){if(e==null)throw new Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var a,i=B({},e.props),p=e.key,l=e.ref,h=e._self,_=e._source,T=e._owner;if(r!=null){Ke(r)&&(l=r.ref,T=I.current),Ce(r)&&(ze(r.key),p=""+r.key);var S;e.type&&e.type.defaultProps&&(S=e.type.defaultProps);for(a in r)Ne.call(r,a)&&!We.hasOwnProperty(a)&&(r[a]===void 0&&S!==void 0?i[a]=S[a]:i[a]=r[a])}var P=arguments.length-2;if(P===1)i.children=n;else if(P>1){for(var x=Array(P),$=0;$<P;$++)x[$]=arguments[$+2];i.children=x}return Ie(e.type,p,l,h,_,T,i)}function Re(e){return typeof e=="object"&&e!==null&&e.$$typeof===v}var ir=".",Tr=":";function Sr(e){var r=/[=:]/g,n={"=":"=0",":":"=2"},a=e.replace(r,function(i){return n[i]});return"$"+a}var Ye=!1,sr=/\/+/g;function me(e){return e.replace(sr,"$&/")}function Me(e,r){return typeof e=="object"&&e!==null&&e.key!=null?(ze(e.key),Sr(""+e.key)):r.toString(36)}function Te(e,r,n,a,i){var p=typeof e;(p==="undefined"||p==="boolean")&&(e=null);var l=!1;if(e===null)l=!0;else switch(p){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case v:case k:l=!0}}if(l){var h=e,_=i(h),T=a===""?ir+Me(h,0):a;if(Ue(_)){var S="";T!=null&&(S=me(T)+"/"),Te(_,r,S,"",function(tn){return tn})}else _!=null&&(Re(_)&&(_.key&&(!h||h.key!==_.key)&&ze(_.key),_=Cr(_,n+(_.key&&(!h||h.key!==_.key)?me(""+_.key)+"/":"")+T)),r.push(_));return 1}var P,x,$=0,H=a===""?ir:a+Tr;if(Ue(e))for(var mr=0;mr<e.length;mr++)P=e[mr],x=H+Me(P,mr),$+=Te(P,r,n,x,i);else{var Ur=R(e);if(typeof Ur=="function"){var yt=e;Ur===yt.entries&&(Ye||ne("Using Maps as children is not supported. Use an array of keyed ReactElements instead."),Ye=!0);for(var en=Ur.call(yt),mt,rn=0;!(mt=en.next()).done;)P=mt.value,x=H+Me(P,rn++),$+=Te(P,r,n,x,i)}else if(p==="object"){var gt=String(e);throw new Error("Objects are not valid as a React child (found: "+(gt==="[object Object]"?"object with keys {"+Object.keys(e).join(", ")+"}":gt)+"). If you meant to render a collection of children, use an array instead.")}}return $}function $e(e,r,n){if(e==null)return e;var a=[],i=0;return Te(e,a,"","",function(p){return r.call(n,p,i++)}),a}function Pr(e){var r=0;return $e(e,function(){r++}),r}function ur(e,r,n){$e(e,function(){r.apply(this,arguments)},n)}function Ar(e){return $e(e,function(r){return r})||[]}function lr(e){if(!Re(e))throw new Error("React.Children.only expected to receive a single React element child.");return e}function cr(e){var r={$$typeof:A,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};r.Provider={$$typeof:ee,_context:r};var n=!1,a=!1,i=!1;{var p={$$typeof:A,_context:r};Object.defineProperties(p,{Provider:{get:function(){return a||(a=!0,m("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?")),r.Provider},set:function(l){r.Provider=l}},_currentValue:{get:function(){return r._currentValue},set:function(l){r._currentValue=l}},_currentValue2:{get:function(){return r._currentValue2},set:function(l){r._currentValue2=l}},_threadCount:{get:function(){return r._threadCount},set:function(l){r._threadCount=l}},Consumer:{get:function(){return n||(n=!0,m("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?")),r.Consumer}},displayName:{get:function(){return r.displayName},set:function(l){i||(ne("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.",l),i=!0)}}}),r.Consumer=p}return r._currentRenderer=null,r._currentRenderer2=null,r}var Fe=-1,Xe=0,qe=1,Or=2;function xr(e){if(e._status===Fe){var r=e._result,n=r();if(n.then(function(p){if(e._status===Xe||e._status===Fe){var l=e;l._status=qe,l._result=p}},function(p){if(e._status===Xe||e._status===Fe){var l=e;l._status=Or,l._result=p}}),e._status===Fe){var a=e;a._status=Xe,a._result=n}}if(e._status===qe){var i=e._result;return i===void 0&&m(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))

Did you accidentally put curly braces around the import?`,i),"default"in i||m(`lazy: Expected the result of a dynamic import() call. Instead received: %s

Your code should look like: 
  const MyComponent = lazy(() => import('./MyComponent'))`,i),i.default}else throw e._result}function t(e){var r={_status:Fe,_result:e},n={$$typeof:q,_payload:r,_init:xr};{var a,i;Object.defineProperties(n,{defaultProps:{configurable:!0,get:function(){return a},set:function(p){m("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),a=p,Object.defineProperty(n,"defaultProps",{enumerable:!0})}},propTypes:{configurable:!0,get:function(){return i},set:function(p){m("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it."),i=p,Object.defineProperty(n,"propTypes",{enumerable:!0})}}})}return n}function o(e){e!=null&&e.$$typeof===X?m("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...))."):typeof e!="function"?m("forwardRef requires a render function but was given %s.",e===null?"null":typeof e):e.length!==0&&e.length!==2&&m("forwardRef render functions accept exactly two parameters: props and ref. %s",e.length===1?"Did you forget to use the ref parameter?":"Any additional parameter will be undefined."),e!=null&&(e.defaultProps!=null||e.propTypes!=null)&&m("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");var r={$$typeof:N,render:e};{var n;Object.defineProperty(r,"displayName",{enumerable:!1,configurable:!0,get:function(){return n},set:function(a){n=a,!e.name&&!e.displayName&&(e.displayName=a)}})}return r}var u;u=Symbol.for("react.module.reference");function d(e){return!!(typeof e=="string"||typeof e=="function"||e===w||e===Z||oe||e===j||e===F||e===le||U||e===se||we||he||ue||typeof e=="object"&&e!==null&&(e.$$typeof===q||e.$$typeof===X||e.$$typeof===ee||e.$$typeof===A||e.$$typeof===N||e.$$typeof===u||e.getModuleId!==void 0))}function C(e,r){d(e)||m("memo: The first argument must be a component. Instead received: %s",e===null?"null":typeof e);var n={$$typeof:X,type:e,compare:r===void 0?null:r};{var a;Object.defineProperty(n,"displayName",{enumerable:!1,configurable:!0,get:function(){return a},set:function(i){a=i,!e.name&&!e.displayName&&(e.displayName=i)}})}return n}function y(){var e=ve.current;return e===null&&m(`Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:
1. You might have mismatching versions of React and the renderer (such as React DOM)
2. You might be breaking the Rules of Hooks
3. You might have more than one copy of React in the same app
See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.`),e}function E(e){var r=y();if(e._context!==void 0){var n=e._context;n.Consumer===e?m("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?"):n.Provider===e&&m("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?")}return r.useContext(e)}function g(e){var r=y();return r.useState(e)}function Y(e,r,n){var a=y();return a.useReducer(e,r,n)}function O(e){var r=y();return r.useRef(e)}function D(e,r){var n=y();return n.useEffect(e,r)}function ae(e,r){var n=y();return n.useInsertionEffect(e,r)}function Se(e,r){var n=y();return n.useLayoutEffect(e,r)}function ge(e,r){var n=y();return n.useCallback(e,r)}function K(e,r){var n=y();return n.useMemo(e,r)}function Je(e,r,n){var a=y();return a.useImperativeHandle(e,r,n)}function jr(e,r){{var n=y();return n.useDebugValue(e,r)}}function zr(){var e=y();return e.useTransition()}function zt(e){var r=y();return r.useDeferredValue(e)}function Dt(){var e=y();return e.useId()}function Nt(e,r,n){var a=y();return a.useSyncExternalStore(e,r,n)}var Qe=0,Xr,qr,Jr,Qr,Zr,et,rt;function tt(){}tt.__reactDisabledLog=!0;function It(){{if(Qe===0){Xr=console.log,qr=console.info,Jr=console.warn,Qr=console.error,Zr=console.group,et=console.groupCollapsed,rt=console.groupEnd;var e={configurable:!0,enumerable:!0,value:tt,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}Qe++}}function Mt(){{if(Qe--,Qe===0){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:B({},e,{value:Xr}),info:B({},e,{value:qr}),warn:B({},e,{value:Jr}),error:B({},e,{value:Qr}),group:B({},e,{value:Zr}),groupCollapsed:B({},e,{value:et}),groupEnd:B({},e,{value:rt})})}Qe<0&&m("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}}var Dr=V.ReactCurrentDispatcher,Nr;function fr(e,r,n){{if(Nr===void 0)try{throw Error()}catch(i){var a=i.stack.trim().match(/\n( *(at )?)/);Nr=a&&a[1]||""}return`
`+Nr+e}}var Ir=!1,dr;{var $t=typeof WeakMap=="function"?WeakMap:Map;dr=new $t}function nt(e,r){if(!e||Ir)return"";{var n=dr.get(e);if(n!==void 0)return n}var a;Ir=!0;var i=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var p;p=Dr.current,Dr.current=null,It();try{if(r){var l=function(){throw Error()};if(Object.defineProperty(l.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(l,[])}catch(H){a=H}Reflect.construct(e,[],l)}else{try{l.call()}catch(H){a=H}e.call(l.prototype)}}else{try{throw Error()}catch(H){a=H}e()}}catch(H){if(H&&a&&typeof H.stack=="string"){for(var h=H.stack.split(`
`),_=a.stack.split(`
`),T=h.length-1,S=_.length-1;T>=1&&S>=0&&h[T]!==_[S];)S--;for(;T>=1&&S>=0;T--,S--)if(h[T]!==_[S]){if(T!==1||S!==1)do if(T--,S--,S<0||h[T]!==_[S]){var P=`
`+h[T].replace(" at new "," at ");return e.displayName&&P.includes("<anonymous>")&&(P=P.replace("<anonymous>",e.displayName)),typeof e=="function"&&dr.set(e,P),P}while(T>=1&&S>=0);break}}}finally{Ir=!1,Dr.current=p,Mt(),Error.prepareStackTrace=i}var x=e?e.displayName||e.name:"",$=x?fr(x):"";return typeof e=="function"&&dr.set(e,$),$}function Ft(e,r,n){return nt(e,!1)}function Lt(e){var r=e.prototype;return!!(r&&r.isReactComponent)}function pr(e,r,n){if(e==null)return"";if(typeof e=="function")return nt(e,Lt(e));if(typeof e=="string")return fr(e);switch(e){case F:return fr("Suspense");case le:return fr("SuspenseList")}if(typeof e=="object")switch(e.$$typeof){case N:return Ft(e.render);case X:return pr(e.type,r,n);case q:{var a=e,i=a._payload,p=a._init;try{return pr(p(i),r,n)}catch{}}}return""}var at={},ot=V.ReactDebugCurrentFrame;function vr(e){if(e){var r=e._owner,n=pr(e.type,e._source,r?r.type:null);ot.setExtraStackFrame(n)}else ot.setExtraStackFrame(null)}function Ut(e,r,n,a,i){{var p=Function.call.bind(Ne);for(var l in e)if(p(e,l)){var h=void 0;try{if(typeof e[l]!="function"){var _=Error((a||"React class")+": "+n+" type `"+l+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof e[l]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw _.name="Invariant Violation",_}h=e[l](r,l,a,n,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(T){h=T}h&&!(h instanceof Error)&&(vr(i),m("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",a||"React class",n,l,typeof h),vr(null)),h instanceof Error&&!(h.message in at)&&(at[h.message]=!0,vr(i),m("Failed %s type: %s",n,h.message),vr(null))}}}function He(e){if(e){var r=e._owner,n=pr(e.type,e._source,r?r.type:null);J(n)}else J(null)}var Mr;Mr=!1;function it(){if(I.current){var e=pe(I.current.type);if(e)return`

Check the render method of \``+e+"`."}return""}function Vt(e){if(e!==void 0){var r=e.fileName.replace(/^.*[\\\/]/,""),n=e.lineNumber;return`

Check your code at `+r+":"+n+"."}return""}function Wt(e){return e!=null?Vt(e.__source):""}var st={};function Bt(e){var r=it();if(!r){var n=typeof e=="string"?e:e.displayName||e.name;n&&(r=`

Check the top-level render call using <`+n+">.")}return r}function ut(e,r){if(!(!e._store||e._store.validated||e.key!=null)){e._store.validated=!0;var n=Bt(r);if(!st[n]){st[n]=!0;var a="";e&&e._owner&&e._owner!==I.current&&(a=" It was passed a child from "+pe(e._owner.type)+"."),He(e),m('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',n,a),He(null)}}}function lt(e,r){if(typeof e=="object"){if(Ue(e))for(var n=0;n<e.length;n++){var a=e[n];Re(a)&&ut(a,r)}else if(Re(e))e._store&&(e._store.validated=!0);else if(e){var i=R(e);if(typeof i=="function"&&i!==e.entries)for(var p=i.call(e),l;!(l=p.next()).done;)Re(l.value)&&ut(l.value,r)}}}function ct(e){{var r=e.type;if(r==null||typeof r=="string")return;var n;if(typeof r=="function")n=r.propTypes;else if(typeof r=="object"&&(r.$$typeof===N||r.$$typeof===X))n=r.propTypes;else return;if(n){var a=pe(r);Ut(n,e.props,"prop",a,e)}else if(r.PropTypes!==void 0&&!Mr){Mr=!0;var i=pe(r);m("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",i||"Unknown")}typeof r.getDefaultProps=="function"&&!r.getDefaultProps.isReactClassApproved&&m("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function Yt(e){{for(var r=Object.keys(e.props),n=0;n<r.length;n++){var a=r[n];if(a!=="children"&&a!=="key"){He(e),m("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",a),He(null);break}}e.ref!==null&&(He(e),m("Invalid attribute `ref` supplied to `React.Fragment`."),He(null))}}function ft(e,r,n){var a=d(e);if(!a){var i="";(e===void 0||typeof e=="object"&&e!==null&&Object.keys(e).length===0)&&(i+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var p=Wt(r);p?i+=p:i+=it();var l;e===null?l="null":Ue(e)?l="array":e!==void 0&&e.$$typeof===v?(l="<"+(pe(e.type)||"Unknown")+" />",i=" Did you accidentally export a JSX literal instead of a component?"):l=typeof e,m("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",l,i)}var h=_r.apply(this,arguments);if(h==null)return h;if(a)for(var _=2;_<arguments.length;_++)lt(arguments[_],e);return e===w?Yt(h):ct(h),h}var dt=!1;function Ht(e){var r=ft.bind(null,e);return r.type=e,dt||(dt=!0,ne("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.")),Object.defineProperty(r,"type",{enumerable:!1,get:function(){return ne("Factory.type is deprecated. Access the class directly before passing it to createFactory."),Object.defineProperty(this,"type",{value:e}),e}}),r}function Gt(e,r,n){for(var a=Rr.apply(this,arguments),i=2;i<arguments.length;i++)lt(arguments[i],a.type);return ct(a),a}function Kt(e,r){var n=te.transition;te.transition={};var a=te.transition;te.transition._updatedFibers=new Set;try{e()}finally{if(te.transition=n,n===null&&a._updatedFibers){var i=a._updatedFibers.size;i>10&&ne("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."),a._updatedFibers.clear()}}}var pt=!1,hr=null;function Xt(e){if(hr===null)try{var r=("require"+Math.random()).slice(0,7),n=c&&c[r];hr=n.call(c,"timers").setImmediate}catch{hr=function(i){pt===!1&&(pt=!0,typeof MessageChannel>"u"&&m("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning."));var p=new MessageChannel;p.port1.onmessage=i,p.port2.postMessage(void 0)}}return hr(e)}var Ge=0,vt=!1;function ht(e){{var r=Ge;Ge++,z.current===null&&(z.current=[]);var n=z.isBatchingLegacy,a;try{if(z.isBatchingLegacy=!0,a=e(),!n&&z.didScheduleLegacyUpdate){var i=z.current;i!==null&&(z.didScheduleLegacyUpdate=!1,Lr(i))}}catch(x){throw yr(r),x}finally{z.isBatchingLegacy=n}if(a!==null&&typeof a=="object"&&typeof a.then=="function"){var p=a,l=!1,h={then:function(x,$){l=!0,p.then(function(H){yr(r),Ge===0?$r(H,x,$):x(H)},function(H){yr(r),$(H)})}};return!vt&&typeof Promise<"u"&&Promise.resolve().then(function(){}).then(function(){l||(vt=!0,m("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);"))}),h}else{var _=a;if(yr(r),Ge===0){var T=z.current;T!==null&&(Lr(T),z.current=null);var S={then:function(x,$){z.current===null?(z.current=[],$r(_,x,$)):x(_)}};return S}else{var P={then:function(x,$){x(_)}};return P}}}}function yr(e){e!==Ge-1&&m("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. "),Ge=e}function $r(e,r,n){{var a=z.current;if(a!==null)try{Lr(a),Xt(function(){a.length===0?(z.current=null,r(e)):$r(e,r,n)})}catch(i){n(i)}else r(e)}}var Fr=!1;function Lr(e){if(!Fr){Fr=!0;var r=0;try{for(;r<e.length;r++){var n=e[r];do n=n(!0);while(n!==null)}e.length=0}catch(a){throw e=e.slice(r+1),a}finally{Fr=!1}}}var qt=ft,Jt=Gt,Qt=Ht,Zt={map:$e,forEach:ur,count:Pr,toArray:Ar,only:lr};s.Children=Zt,s.Component=W,s.Fragment=w,s.Profiler=Z,s.PureComponent=je,s.StrictMode=j,s.Suspense=F,s.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=V,s.act=ht,s.cloneElement=Jt,s.createContext=cr,s.createElement=qt,s.createFactory=Qt,s.createRef=wr,s.forwardRef=o,s.isValidElement=Re,s.lazy=t,s.memo=C,s.startTransition=Kt,s.unstable_act=ht,s.useCallback=ge,s.useContext=E,s.useDebugValue=jr,s.useDeferredValue=zt,s.useEffect=D,s.useId=Dt,s.useImperativeHandle=Je,s.useInsertionEffect=ae,s.useLayoutEffect=Se,s.useMemo=K,s.useReducer=Y,s.useRef=O,s.useState=g,s.useSyncExternalStore=Nt,s.useTransition=zr,s.version=f,typeof __REACT_DEVTOOLS_GLOBAL_HOOK__<"u"&&typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop=="function"&&__REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error)})()}(Ze,Ze.exports);var bt=Ze.exports;Wr.exports=bt;var Le=Wr.exports;/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */(function(){var c=Le,s=Symbol.for("react.element"),f=Symbol.for("react.portal"),v=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),w=Symbol.for("react.profiler"),j=Symbol.for("react.provider"),Z=Symbol.for("react.context"),ee=Symbol.for("react.forward_ref"),A=Symbol.for("react.suspense"),N=Symbol.for("react.suspense_list"),F=Symbol.for("react.memo"),le=Symbol.for("react.lazy"),X=Symbol.for("react.offscreen"),q=Symbol.iterator,se="@@iterator";function re(t){if(t===null||typeof t!="object")return null;var o=q&&t[q]||t[se];return typeof o=="function"?o:null}var ce=c.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function R(t){{for(var o=arguments.length,u=new Array(o>1?o-1:0),d=1;d<o;d++)u[d-1]=arguments[d];ve("error",t,u)}}function ve(t,o,u){{var d=ce.ReactDebugCurrentFrame,C=d.getStackAddendum();C!==""&&(o+="%s",u=u.concat([C]));var y=u.map(function(E){return String(E)});y.unshift("Warning: "+o),Function.prototype.apply.call(console[t],console,y)}}var te=!1,z=!1,I=!1,G=!1,L=!1,J;J=Symbol.for("react.module.reference");function we(t){return!!(typeof t=="string"||typeof t=="function"||t===v||t===w||L||t===k||t===A||t===N||G||t===X||te||z||I||typeof t=="object"&&t!==null&&(t.$$typeof===le||t.$$typeof===F||t.$$typeof===j||t.$$typeof===Z||t.$$typeof===ee||t.$$typeof===J||t.getModuleId!==void 0))}function he(t,o,u){var d=t.displayName;if(d)return d;var C=o.displayName||o.name||"";return C!==""?u+"("+C+")":u}function ue(t){return t.displayName||"Context"}function U(t){if(t==null)return null;if(typeof t.tag=="number"&&R("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."),typeof t=="function")return t.displayName||t.name||null;if(typeof t=="string")return t;switch(t){case v:return"Fragment";case f:return"Portal";case w:return"Profiler";case k:return"StrictMode";case A:return"Suspense";case N:return"SuspenseList"}if(typeof t=="object")switch(t.$$typeof){case Z:var o=t;return ue(o)+".Consumer";case j:var u=t;return ue(u._context)+".Provider";case ee:return he(t,t.render,"ForwardRef");case F:var d=t.displayName||null;return d!==null?d:U(t.type)||"Memo";case le:{var C=t,y=C._payload,E=C._init;try{return U(E(y))}catch{return null}}}return null}var oe=Object.assign,V=0,ne,m,fe,Ee,M,de,B;function ye(){}ye.__reactDisabledLog=!0;function W(){{if(V===0){ne=console.log,m=console.info,fe=console.warn,Ee=console.error,M=console.group,de=console.groupCollapsed,B=console.groupEnd;var t={configurable:!0,enumerable:!0,value:ye,writable:!0};Object.defineProperties(console,{info:t,log:t,warn:t,error:t,group:t,groupCollapsed:t,groupEnd:t})}V++}}function ie(){{if(V--,V===0){var t={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:oe({},t,{value:ne}),info:oe({},t,{value:m}),warn:oe({},t,{value:fe}),error:oe({},t,{value:Ee}),group:oe({},t,{value:M}),groupCollapsed:oe({},t,{value:de}),groupEnd:oe({},t,{value:B})})}V<0&&R("disabledDepth fell below zero. This is a bug in React. Please file an issue.")}}var Ae=ce.ReactCurrentDispatcher,Oe;function xe(t,o,u){{if(Oe===void 0)try{throw Error()}catch(C){var d=C.stack.trim().match(/\n( *(at )?)/);Oe=d&&d[1]||""}return`
`+Oe+t}}var je=!1,ke;{var wr=typeof WeakMap=="function"?WeakMap:Map;ke=new wr}function er(t,o){if(!t||je)return"";{var u=ke.get(t);if(u!==void 0)return u}var d;je=!0;var C=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var y;y=Ae.current,Ae.current=null,W();try{if(o){var E=function(){throw Error()};if(Object.defineProperty(E.prototype,"props",{set:function(){throw Error()}}),typeof Reflect=="object"&&Reflect.construct){try{Reflect.construct(E,[])}catch(K){d=K}Reflect.construct(t,[],E)}else{try{E.call()}catch(K){d=K}t.call(E.prototype)}}else{try{throw Error()}catch(K){d=K}t()}}catch(K){if(K&&d&&typeof K.stack=="string"){for(var g=K.stack.split(`
`),Y=d.stack.split(`
`),O=g.length-1,D=Y.length-1;O>=1&&D>=0&&g[O]!==Y[D];)D--;for(;O>=1&&D>=0;O--,D--)if(g[O]!==Y[D]){if(O!==1||D!==1)do if(O--,D--,D<0||g[O]!==Y[D]){var ae=`
`+g[O].replace(" at new "," at ");return t.displayName&&ae.includes("<anonymous>")&&(ae=ae.replace("<anonymous>",t.displayName)),typeof t=="function"&&ke.set(t,ae),ae}while(O>=1&&D>=0);break}}}finally{je=!1,Ae.current=y,ie(),Error.prepareStackTrace=C}var Se=t?t.displayName||t.name:"",ge=Se?xe(Se):"";return typeof t=="function"&&ke.set(t,ge),ge}function Ue(t,o,u){return er(t,!1)}function Er(t){var o=t.prototype;return!!(o&&o.isReactComponent)}function Ve(t,o,u){if(t==null)return"";if(typeof t=="function")return er(t,Er(t));if(typeof t=="string")return xe(t);switch(t){case A:return xe("Suspense");case N:return xe("SuspenseList")}if(typeof t=="object")switch(t.$$typeof){case ee:return Ue(t.render);case F:return Ve(t.type,o,u);case le:{var d=t,C=d._payload,y=d._init;try{return Ve(y(C),o,u)}catch{}}}return""}var _e=Object.prototype.hasOwnProperty,ze={},rr=ce.ReactDebugCurrentFrame;function De(t){if(t){var o=t._owner,u=Ve(t.type,t._source,o?o.type:null);rr.setExtraStackFrame(u)}else rr.setExtraStackFrame(null)}function pe(t,o,u,d,C){{var y=Function.call.bind(_e);for(var E in t)if(y(t,E)){var g=void 0;try{if(typeof t[E]!="function"){var Y=Error((d||"React class")+": "+u+" type `"+E+"` is invalid; it must be a function, usually from the `prop-types` package, but received `"+typeof t[E]+"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");throw Y.name="Invariant Violation",Y}g=t[E](o,E,d,u,null,"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED")}catch(O){g=O}g&&!(g instanceof Error)&&(De(C),R("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).",d||"React class",u,E,typeof g),De(null)),g instanceof Error&&!(g.message in ze)&&(ze[g.message]=!0,De(C),R("Failed %s type: %s",u,g.message),De(null))}}}var Ne=Array.isArray;function We(t){return Ne(t)}function tr(t){{var o=typeof Symbol=="function"&&Symbol.toStringTag,u=o&&t[Symbol.toStringTag]||t.constructor.name||"Object";return u}}function nr(t){try{return Be(t),!1}catch{return!0}}function Be(t){return""+t}function Ke(t){if(nr(t))return R("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.",tr(t)),Be(t)}var Ce=ce.ReactCurrentOwner,kr={key:!0,ref:!0,__self:!0,__source:!0},ar,or,Ie;Ie={};function _r(t){if(_e.call(t,"ref")){var o=Object.getOwnPropertyDescriptor(t,"ref").get;if(o&&o.isReactWarning)return!1}return t.ref!==void 0}function Cr(t){if(_e.call(t,"key")){var o=Object.getOwnPropertyDescriptor(t,"key").get;if(o&&o.isReactWarning)return!1}return t.key!==void 0}function Rr(t,o){if(typeof t.ref=="string"&&Ce.current&&o&&Ce.current.stateNode!==o){var u=U(Ce.current.type);Ie[u]||(R('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',U(Ce.current.type),t.ref),Ie[u]=!0)}}function Re(t,o){{var u=function(){ar||(ar=!0,R("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",o))};u.isReactWarning=!0,Object.defineProperty(t,"key",{get:u,configurable:!0})}}function ir(t,o){{var u=function(){or||(or=!0,R("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)",o))};u.isReactWarning=!0,Object.defineProperty(t,"ref",{get:u,configurable:!0})}}var Tr=function(t,o,u,d,C,y,E){var g={$$typeof:s,type:t,key:o,ref:u,props:E,_owner:y};return g._store={},Object.defineProperty(g._store,"validated",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(g,"_self",{configurable:!1,enumerable:!1,writable:!1,value:d}),Object.defineProperty(g,"_source",{configurable:!1,enumerable:!1,writable:!1,value:C}),Object.freeze&&(Object.freeze(g.props),Object.freeze(g)),g};function Sr(t,o,u,d,C){{var y,E={},g=null,Y=null;u!==void 0&&(Ke(u),g=""+u),Cr(o)&&(Ke(o.key),g=""+o.key),_r(o)&&(Y=o.ref,Rr(o,C));for(y in o)_e.call(o,y)&&!kr.hasOwnProperty(y)&&(E[y]=o[y]);if(t&&t.defaultProps){var O=t.defaultProps;for(y in O)E[y]===void 0&&(E[y]=O[y])}if(g||Y){var D=typeof t=="function"?t.displayName||t.name||"Unknown":t;g&&Re(E,D),Y&&ir(E,D)}return Tr(t,g,Y,C,d,Ce.current,E)}}var Ye=ce.ReactCurrentOwner,sr=ce.ReactDebugCurrentFrame;function me(t){if(t){var o=t._owner,u=Ve(t.type,t._source,o?o.type:null);sr.setExtraStackFrame(u)}else sr.setExtraStackFrame(null)}var Me;Me=!1;function Te(t){return typeof t=="object"&&t!==null&&t.$$typeof===s}function $e(){{if(Ye.current){var t=U(Ye.current.type);if(t)return`

Check the render method of \``+t+"`."}return""}}function Pr(t){{if(t!==void 0){var o=t.fileName.replace(/^.*[\\\/]/,""),u=t.lineNumber;return`

Check your code at `+o+":"+u+"."}return""}}var ur={};function Ar(t){{var o=$e();if(!o){var u=typeof t=="string"?t:t.displayName||t.name;u&&(o=`

Check the top-level render call using <`+u+">.")}return o}}function lr(t,o){{if(!t._store||t._store.validated||t.key!=null)return;t._store.validated=!0;var u=Ar(o);if(ur[u])return;ur[u]=!0;var d="";t&&t._owner&&t._owner!==Ye.current&&(d=" It was passed a child from "+U(t._owner.type)+"."),me(t),R('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',u,d),me(null)}}function cr(t,o){{if(typeof t!="object")return;if(We(t))for(var u=0;u<t.length;u++){var d=t[u];Te(d)&&lr(d,o)}else if(Te(t))t._store&&(t._store.validated=!0);else if(t){var C=re(t);if(typeof C=="function"&&C!==t.entries)for(var y=C.call(t),E;!(E=y.next()).done;)Te(E.value)&&lr(E.value,o)}}}function Fe(t){{var o=t.type;if(o==null||typeof o=="string")return;var u;if(typeof o=="function")u=o.propTypes;else if(typeof o=="object"&&(o.$$typeof===ee||o.$$typeof===F))u=o.propTypes;else return;if(u){var d=U(o);pe(u,t.props,"prop",d,t)}else if(o.PropTypes!==void 0&&!Me){Me=!0;var C=U(o);R("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?",C||"Unknown")}typeof o.getDefaultProps=="function"&&!o.getDefaultProps.isReactClassApproved&&R("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.")}}function Xe(t){{for(var o=Object.keys(t.props),u=0;u<o.length;u++){var d=o[u];if(d!=="children"&&d!=="key"){me(t),R("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",d),me(null);break}}t.ref!==null&&(me(t),R("Invalid attribute `ref` supplied to `React.Fragment`."),me(null))}}var qe={};function Or(t,o,u,d,C,y){{var E=we(t);if(!E){var g="";(t===void 0||typeof t=="object"&&t!==null&&Object.keys(t).length===0)&&(g+=" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.");var Y=Pr(C);Y?g+=Y:g+=$e();var O;t===null?O="null":We(t)?O="array":t!==void 0&&t.$$typeof===s?(O="<"+(U(t.type)||"Unknown")+" />",g=" Did you accidentally export a JSX literal instead of a component?"):O=typeof t,R("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s",O,g)}var D=Sr(t,o,u,C,y);if(D==null)return D;if(E){var ae=o.children;if(ae!==void 0)if(d)if(We(ae)){for(var Se=0;Se<ae.length;Se++)cr(ae[Se],t);Object.freeze&&Object.freeze(ae)}else R("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");else cr(ae,t)}if(_e.call(o,"key")){var ge=U(t),K=Object.keys(o).filter(function(zr){return zr!=="key"}),Je=K.length>0?"{key: someKey, "+K.join(": ..., ")+": ...}":"{key: someKey}";if(!qe[ge+Je]){var jr=K.length>0?"{"+K.join(": ..., ")+": ...}":"{}";R(`A props object containing a "key" prop is being spread into JSX:
  let props = %s;
  <%s {...props} />
React keys must be passed directly to JSX without using spread:
  let props = %s;
  <%s key={someKey} {...props} />`,Je,ge,jr,ge),qe[ge+Je]=!0}}return t===v?Xe(D):Fe(D),D}}var xr=Or;gr.Fragment=v,gr.jsxDEV=xr})(),Vr.exports=gr;var Q=Vr.exports;/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const wt=c=>c.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase(),Br=(...c)=>c.filter((s,f,v)=>!!s&&v.indexOf(s)===f).join(" ");/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */var Et={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const kt=Le.forwardRef(({color:c="currentColor",size:s=24,strokeWidth:f=2,absoluteStrokeWidth:v,className:k="",children:w,iconNode:j,...Z},ee)=>Le.createElement("svg",{ref:ee,...Et,width:s,height:s,stroke:c,strokeWidth:v?Number(f)*24/Number(s):f,className:Br("lucide",k),...Z},[...j.map(([A,N])=>Le.createElement(A,N)),...Array.isArray(w)?w:[w]]));/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const be=(c,s)=>{const f=Le.forwardRef(({className:v,...k},w)=>Le.createElement(kt,{ref:w,iconNode:s,className:Br(`lucide-${wt(c)}`,v),...k}));return f.displayName=`${c}`,f};/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const _t=be("CalendarDays",[["path",{d:"M8 2v4",key:"1cmpym"}],["path",{d:"M16 2v4",key:"4m81vk"}],["rect",{width:"18",height:"18",x:"3",y:"4",rx:"2",key:"1hopcy"}],["path",{d:"M3 10h18",key:"8toen8"}],["path",{d:"M8 14h.01",key:"6423bh"}],["path",{d:"M12 14h.01",key:"1etili"}],["path",{d:"M16 14h.01",key:"1gbofw"}],["path",{d:"M8 18h.01",key:"lrp35t"}],["path",{d:"M12 18h.01",key:"mhygvu"}],["path",{d:"M16 18h.01",key:"kzsmim"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Ct=be("Lock",[["rect",{width:"18",height:"11",x:"3",y:"11",rx:"2",ry:"2",key:"1w4ew1"}],["path",{d:"M7 11V7a5 5 0 0 1 10 0v4",key:"fwvmzm"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Rt=be("Mail",[["rect",{width:"20",height:"16",x:"2",y:"4",rx:"2",key:"18n3k1"}],["path",{d:"m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7",key:"1ocrg3"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Tt=be("MessageSquareQuote",[["path",{d:"M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z",key:"1lielz"}],["path",{d:"M8 12a2 2 0 0 0 2-2V8H8",key:"1jfesj"}],["path",{d:"M14 12a2 2 0 0 0 2-2V8h-2",key:"1dq9mh"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Yr=be("Network",[["rect",{x:"16",y:"16",width:"6",height:"6",rx:"1",key:"4q2zg0"}],["rect",{x:"2",y:"16",width:"6",height:"6",rx:"1",key:"8cvhb9"}],["rect",{x:"9",y:"2",width:"6",height:"6",rx:"1",key:"1egb70"}],["path",{d:"M5 16v-3a1 1 0 0 1 1-1h12a1 1 0 0 1 1 1v3",key:"1jsf9p"}],["path",{d:"M12 12V8",key:"2874zd"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const St=be("ShieldAlert",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}],["path",{d:"M12 8v4",key:"1got3b"}],["path",{d:"M12 16h.01",key:"1drbdi"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const Pt=be("ShieldCheck",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}],["path",{d:"m9 12 2 2 4-4",key:"dzmm74"}]]);/**
 * @license lucide-react v0.446.0 - ISC
 *
 * This source code is licensed under the ISC license.
 * See the LICENSE file in the root directory of this source tree.
 */const At=be("ShieldQuestion",[["path",{d:"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z",key:"oel41y"}],["path",{d:"M9.1 9a3 3 0 0 1 5.82 1c0 2-3 3-3 3",key:"mhlwft"}],["path",{d:"M12 17h.01",key:"p32p05"}]]),b={age:{y:-10,vy:-20,m:10,vm:20,unknown:-2},ssl:{v:10,e:-18,p:-18,h:-22,es:-4,unknown:-5},bl:{l:-30,c:6,multiple:-10},ipInUrl:-15,urlAi:{ph90:-5,ph70:-3,ph50:-1,lh90:5,lh70:3,error:-2,neutral:0},contentAi:{phChunkHighConf:-8,phChunkMedConf:-4,phChunkLowConf:-2,manyPhishingChunksPenalty:-10,noProblemDetected:5,noContentOrError:-1},whoisPrivacy:{enabled:-2,explicitProblem:-5},dnsMx:{missingForShop:-5,presentForShop:2,notApplicable:0}},Ot=c=>c<30?`${c} dni`:c<365?`${Math.floor(c/30)} mies.`:`${Math.floor(c/365)} lat`;function xt(c,s){if(!(c!=null&&c.analysis))return console.warn("[ScoreCalc] No analysis data provided for score calculation."),{score:null,explanations:[]};const f=c.analysis,v=c.urlTextAnalysis,k=c.pageContentAnalyses;let w=50;const j=[],Z=100,ee=0;console.log("[ScoreCalc] Starting calculation. Initial score:",w,"for URL:",s),console.log("[ScoreCalc] DomainAnalysisDetails:",JSON.parse(JSON.stringify(f))),console.log("[ScoreCalc] UrlTextAnalysis:",JSON.parse(JSON.stringify(v||{}))),console.log("[ScoreCalc] PageContentAnalyses:",JSON.parse(JSON.stringify(k||[])));const A=f.domain_actual_age_days;let N="neutral",F="0 pkt",le="N/A";A!==null&&typeof A<"u"?(le=Ot(A),A<30?(w+=b.age.vy,N="negative",F=`${b.age.vy} pkt`):A<180?(w+=b.age.y,N="negative",F=`${b.age.y} pkt`):A>=730?(w+=b.age.vm,N="positive",F=`+${b.age.vm} pkt`):A>=365&&(w+=b.age.m,N="positive",F=`+${b.age.m} pkt`)):(w+=b.age.unknown,N="info",F=`${b.age.unknown} pkt (brak danych)`),j.push({id:"age",icon:_t,label:"Wiek domeny",valueText:le,impact:N,scoreEffect:F,details:"Starsze domeny są generalnie bardziej wiarygodne.",longDesc:"Nowo zarejestrowane domeny są często wykorzystywane w kampaniach phishingowych..."});let X="negative",q="Strona nie używa szyfrowania HTTPS.",se="Brak (HTTP)",re=b.ssl.h;if(f.parsed_url_scheme==="https")if(re=0,f.ssl_info&&f.ssl_info.not_after){const M=new Date(f.ssl_info.not_after),de=new Date,B=(M.getTime()-de.getTime())/(1e3*3600*24);B>0?(re=b.ssl.v,X="positive",se="Ważny",q=`Połączenie szyfrowane. Certyfikat ważny do: ${M.toLocaleDateString()}.`,B<30&&(re+=b.ssl.es,se=Q.jsxDEV("span",{className:"text-yellow-600 font-semibold",children:"Wygasa wkrótce!"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:135,columnNumber:13},this),q+=" Certyfikat wygasa za mniej niż 30 dni.")):(re=b.ssl.e,X="negative",se="Wygasł",q=`Certyfikat SSL wygasł: ${M.toLocaleDateString()}.`)}else re=b.ssl.p,X="negative",se="Problem (HTTPS)",q="Strona używa HTTPS, ale wystąpił problem z weryfikacją certyfikatu...";else f.ssl_info===null&&f.parsed_url_scheme!=="https"?(X="negative",se="Brak (HTTP)",q="Strona nie używa szyfrowania HTTPS (HTTP)."):(re=b.ssl.unknown,X="info",se="N/A (SSL)",q="Nie udało się jednoznacznie zweryfikować statusu SSL.");w+=re;const ce=`${re>0?"+":""}${re} pkt`;j.push({id:"ssl",icon:Ct,label:"Szyfrowanie (SSL)",valueText:se,impact:X,details:q,scoreEffect:ce,longDesc:"Certyfikat SSL zapewnia szyfrowanie danych przesyłanych między Tobą a stroną..."});let R=0,ve="Niedostępna",te="neutral",z="Analiza AI adresu URL nie została przeprowadzona lub jest niedostępna.";v===null?(R=b.urlAi.error,ve=Q.jsxDEV("span",{className:"text-red-500",children:"Błąd analizy"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:190,columnNumber:15},this),te="negative",z="Nie udało się przeprowadzić analizy AI dla tego URL z powodu błędu."):v?(ve=`${v.label} (${(v.confidence*100).toFixed(0)}%)`,z=`Model AI ocenił URL jako ${v.label.toLowerCase()} z ${(v.confidence*100).toFixed(0)}% pewnością.`,v.is_phishing?(te="negative",v.confidence>=.9?R=b.urlAi.ph90:v.confidence>=.7?R=b.urlAi.ph70:R=b.urlAi.ph50):(te=v.confidence>=.9?"positive":"neutral",R=v.confidence>=.9?b.urlAi.lh90:v.confidence>=.7?b.urlAi.lh70:b.urlAi.neutral)):(ve=Q.jsxDEV("span",{className:"text-gray-500",children:"N/A (URL AI)"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:216,columnNumber:15},this),te="neutral",z="Analiza AI adresu URL nie została jeszcze przeprowadzona lub dane nie są dostępne."),j.push({id:"aiUrl",icon:At,label:"Analiza AI URL",valueText:ve,impact:te,scoreEffect:`${R>0?"+":""}${R} pkt`,details:z,longDesc:"Sztuczna inteligencja analizuje strukturę i komponenty adresu URL..."}),w+=R;let I="N/A",G="neutral",L=0,J="Analiza treści strony nie została przeprowadzona lub brakło tekstu.",we="Analiza treści strony wyszukuje fragmenty mogące wskazywać na oszustwo...";const he=[];if(k===null)I=Q.jsxDEV("span",{className:"text-red-500",children:"Błąd analizy treści"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:245,columnNumber:13},this),G="negative",L=b.contentAi.noContentOrError,J="Wystąpił błąd podczas próby analizy treści strony.";else if(k&&k.length>0){let M=0,de=!1,B=!1,ye=!1;if(k.forEach(W=>{W.is_phishing&&(M++,W.confidence>=.9?de=!0:W.confidence>=.7?B=!0:W.confidence>=.5&&(ye=!0),he.push({label:W.label,conf:W.confidence,chunk:W.originalChunk}))}),M>0?(de?(L=b.contentAi.phChunkHighConf,G="negative",I=Q.jsxDEV("span",{className:"text-red-500 font-semibold",children:"Podejrzane Treści!"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:274,columnNumber:11},this),J=`Wykryto fragmenty treści o wysokim prawdopodobieństwie phishingu (${M}/${k.length}).`):B?(L=b.contentAi.phChunkMedConf,G="negative",I="Podejrzane fragmenty",J=`Wykryto ${M} z ${k.length} fragmentów jako potencjalnie phishingowe.`):ye&&(L=b.contentAi.phChunkLowConf,G="negative",I="Niejednoznaczne fragmenty",J=`Wykryto ${M} z ${k.length} fragmentów jako potencjalnie phishingowe.`),M>=3&&(L+=b.contentAi.manyPhishingChunksPenalty,J+=" Znaleziono wiele podejrzanych fragmentów."),L=Math.max(L,-10)):(L=b.contentAi.noProblemDetected,G="positive",I="Treść OK",J=`Analiza treści (${k.length} fragmentów) nie wykazała znamion phishingu.`),he.length>0){const W=he.slice(0,3).map((ie,Ae)=>Q.jsxDEV("li",{title:ie.chunk,className:"mb-1",children:[Q.jsxDEV("span",{className:`font-semibold ${ie.label==="PHISHING"?"text-red-600":"text-gray-700"}`,children:['"',ie.chunk.substring(0,50),'..."']},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:312,columnNumber:11},this),Q.jsxDEV("span",{className:"text-gray-500 ml-1",children:["(",ie.label," ",(ie.conf*100).toFixed(0),"%)"]},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:319,columnNumber:11},this)]},`chunk-${Ae}-${ie.chunk.slice(0,5)}`,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:307,columnNumber:9},this));we=Q.jsxDEV("div",{children:[Q.jsxDEV("p",{children:typeof we=="string"?we:"Szczegóły analizy treści:"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:326,columnNumber:11},this),Q.jsxDEV("p",{className:"mt-2 font-semibold",children:"Podejrzane fragmenty:"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:331,columnNumber:11},this),Q.jsxDEV("ul",{className:"list-disc pl-5 max-h-24 overflow-y-auto text-xs custom-scrollbar",children:W},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:332,columnNumber:11},this),he.length>3&&Q.jsxDEV("p",{className:"text-xs mt-1",children:["...i ",he.length-3," więcej."]},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:336,columnNumber:13},this)]},void 0,!0,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:325,columnNumber:9},this)}}else k&&k.length===0?(L=b.contentAi.noContentOrError,G="info",I="Brak tekstu do analizy",J="Nie znaleziono wystarczającej ilości tekstu na stronie do przeprowadzenia pełnej analizy treści."):(I=Q.jsxDEV("span",{className:"text-gray-500",children:"N/A (treść)"},void 0,!1,{fileName:"C:/Users/zieba/Desktop/stuff/IsThisPhishy-addon/src/popup/services/scoreCalculator.tsx",lineNumber:348,columnNumber:13},this),G="neutral",J="Analiza treści strony nie została jeszcze przeprowadzona lub dane nie są dostępne.");w+=L,j.push({id:"contentAi",icon:Tt,label:"Analiza AI treści",valueText:I,impact:G,scoreEffect:`${L>0?"+":""}${L} pkt`,details:J,longDesc:we});let ue=0;const U=[];f.blacklist_checks&&f.blacklist_checks.forEach(M=>{M.is_listed&&U.push(M.source)}),U.length>0?(ue=b.bl.l,U.length>1&&(ue+=b.bl.multiple*(U.length-1)),j.push({id:"blacklist",icon:St,label:"Listy zagrożeń",valueText:`Na listach: ${U.join(", ")}`,impact:"negative",scoreEffect:`${ue} pkt`,details:`Znalezienie domeny/URL na publicznych listach zagrożeń (${U.join(", ")}) jest silnym sygnałem ostrzegawczym.`,longDesc:"Listy te są kompilowane przez organizacje bezpieczeństwa w celu śledzenia złośliwych witryn internetowych."})):(ue=b.bl.c,j.push({id:"blacklist",icon:Pt,label:"Listy zagrożeń",valueText:"Czysto",impact:"positive",scoreEffect:`+${ue} pkt`,details:"Nie znaleziono na znanych listach zagrożeń (m.in. PhishTank, CERT.PL, OpenPhish, Google Safe Browsing).",longDesc:"Brak wpisów na głównych listach zagrożeń to dobry znak, wskazujący, że strona nie została publicznie oznaczona jako złośliwa."})),w+=ue;let oe=0;f.is_ip_address_in_url?(oe=b.ipInUrl,j.push({id:"ipInUrl",icon:Yr,label:"Adres IP w URL",valueText:"Tak",impact:"negative",scoreEffect:`${oe} pkt`,details:"Używanie adresu IP zamiast nazwy domenowej jest częstą taktyką w phishingu.",longDesc:"Legalne strony rzadko używają adresów IP bezpośrednio w linkach..."})):j.push({id:"ipInUrl",icon:Yr,label:"Adres IP w URL",valueText:"Nie",impact:"positive",details:"URL używa standardowej nazwy domenowej.",scoreEffect:"+0 pkt"}),w+=oe;let V=0,ne="N/A",m="neutral",fe="Brak danych o rekordach MX.";f.dns_records&&f.dns_records.MX?f.dns_records.MX.length===0?(V=b.dnsMx.missingForShop,ne="Brak",m="negative",fe="Brak rekordów MX dla domeny."):(V=b.dnsMx.presentForShop,ne="Obecne",m="positive",fe="Rekordy MX obecne dla domeny."):(V=b.dnsMx.notApplicable,ne="Nie dotyczy",fe="Brak danych o rekordach MX."),w+=V,j.push({id:"dnsMx",icon:Rt,label:"Rekordy MX",valueText:ne,impact:m,scoreEffect:`${V>0?"+":""}${V} pkt`,details:fe,longDesc:"Rekordy MX wskazują serwery pocztowe dla domeny..."});const Ee=Math.max(ee,Math.min(Z,Math.round(w)));return console.log(`[ScoreCalc] Final calculated score: ${Ee} (raw score before clamp: ${w})`),{score:Ee,explanations:j}}const Hr="http://127.0.0.1:8000/api/v1",br=c=>{try{return new URL(c).hostname.replace(/^www\./,"")}catch{return""}},Pe=(c,s="#777777")=>{try{chrome.action.setBadgeText({text:c}),chrome.action.setBadgeBackgroundColor({color:s})}catch(f){console.warn("[BG] Failed to update badge.",f)}},Gr=(c,s)=>{if(!c)return;const{score:f}=xt(c,s);if(f!==null){let v="#10B981";f<40?v="#EF4444":f<70&&(v="#F59E0B"),Pe(f.toString(),v)}else c.error?Pe("!","#EF4444"):Pe("?","#777777")},Kr=async c=>{try{const s=await fetch(`${Hr}/check_phishing_text`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text_to_analyze:c})});return s.ok?await s.json():null}catch(s){return console.error("[BG] fetchTextAnalysis Network Error:",s),null}},jt=async(c,s=[])=>{const f=br(c);if(!f)return{error:"Invalid domain",lastChecked:Date.now()};Pe("...","#F59E0B");try{const[v,k]=await Promise.all([fetch(`${Hr}/analyze_domain_details`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:c})}),Kr(c)]);if(!v.ok)return{error:"API Error (domain details)",lastChecked:Date.now()};const w=await v.json();if(console.log(w),w.error)return{error:w.error,lastChecked:Date.now()};let j=[];if(s.length>0){const ee=s.map(async(A,N)=>{const F=await Kr(A);return F?{...F,chunkIndex:N,originalChunk:A.substring(0,100)+"..."}:null});j=(await Promise.all(ee)).filter(A=>A!==null)}const Z={analysis:w,urlTextAnalysis:k,pageContentAnalyses:j,lastChecked:Date.now()};return chrome.storage.local.set({[f]:Z}),Gr(Z,c),Z}catch(v){const k=v instanceof Error?v.message:String(v);return Pe("!","#EF4444"),{error:`Network/Parsing error: ${k}`,lastChecked:Date.now()}}};chrome.runtime.onMessage.addListener((c,s,f)=>{var v;if(c.action==="analyzePageContent")return console.log(`[BG] Received content for analysis from ${c.url}`),jt(c.url,c.contentChunks).then(k=>{chrome.runtime.sendMessage({action:"analysisUpdated",domain:br(c.url),data:k,forUrl:c.url}).catch(()=>{}),f({success:!0})}).catch(k=>f({success:!1,error:k.message})),!0;if(c.action==="requestAnalysisForCurrentTab"){const k=c.url,w=c.tabId||((v=s.tab)==null?void 0:v.id);return k&&w?(console.log(`[BG] Manual refresh requested for ${k} on tab ${w}`),Pe("...","#F59E0B"),chrome.tabs.sendMessage(w,{action:"getTextContentFromPage"}),f({status:"refresh_triggered"})):f({error:"No active tab/URL to refresh."}),!0}return!1}),chrome.tabs.onActivated.addListener(async c=>{chrome.tabs.get(c.tabId,s=>{if(s.url){const f=br(s.url);chrome.storage.local.get(f,v=>{const k=v[f];k?(console.log(`[BG] onActivated: Found cached data for ${f}`),Gr(k,s.url)):Pe("","#777777")})}})}),chrome.runtime.onInstalled.addListener(async c=>{if(c.reason==="install"||c.reason==="update"){console.log("[BG] Extension installed/updated. Injecting content scripts into existing tabs.");const s=await chrome.tabs.query({url:["http://*/*","https://*/*"],status:"complete"});for(const f of s)if(f.id)try{await chrome.scripting.executeScript({target:{tabId:f.id},files:["src/content/content.js"]}),console.log(`[BG] Injected content script into tab ${f.id}`)}catch(v){console.warn(`[BG] Failed to inject script into tab ${f.id}:`,v)}}}),console.log("[BG] Background script loaded and listeners attached (v1.2.1).")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
