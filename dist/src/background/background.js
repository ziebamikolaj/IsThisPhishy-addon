(function(){"use strict";const h="http://127.0.0.1:8000/api/v1",d=e=>{try{return new URL(e).hostname.replace(/^www\./,"")}catch{return""}},l=(e,n="#777777")=>{try{chrome.action.setBadgeText({text:e}),chrome.action.setBadgeBackgroundColor({color:n}),console.log(`[BG] Badge updated: text="${e}", color="${n}"`)}catch(o){console.warn("[BG] Failed to update badge, extension context likely invalid.",o)}},y=async e=>{const n=e.substring(0,100)+(e.length>100?"...":"");console.log(`[BG] fetchTextAnalysis: Attempting to analyze text snippet: "${n}"`);try{const o=await fetch(`${h}/check_phishing_text`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text_to_analyze:e})});if(!o.ok){const t=await o.text().catch(()=>"No error body");return console.error(`[BG] fetchTextAnalysis API Error for snippet "${n}": ${o.status}`,t),null}const r=await o.json();return console.log(`[BG] fetchTextAnalysis API Success for snippet "${n}":`,r),r}catch(o){return console.error(`[BG] fetchTextAnalysis Network Error for snippet "${n}":`,o),null}},g=async(e,n)=>{const o=d(e);if(!o)return console.warn("[BG] performFullAnalysis: Invalid domain from URL:",e),{error:"Invalid domain",lastChecked:Date.now()};l("...","#F59E0B"),console.log(`[BG] Performing full analysis for ${e}. Content chunks for analysis: ${(n==null?void 0:n.length)||0}`);try{const[r,t]=await Promise.all([fetch(`${h}/analyze_domain_details`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({url:e})}),y(e)]);if(console.log(`[BG] performFullAnalysis - URL AI Analysis result for ${e}:`,t),!r.ok){const i=await r.json().catch(()=>({detail:"Unknown API error (domain)"}));return l("!","#EF4444"),console.error(`[BG] Domain analysis API Error for ${o}:`,i),{error:`API Error (domain):${i.detail||r.statusText}`,lastChecked:Date.now()}}const a=await r.json();if(a.error)return l("?","#EF4444"),console.warn(`[BG] API returned error in domain data for ${o}:`,a.error),{error:a.error,lastChecked:Date.now()};console.log("[BG] Domain analysis OK for",o);let s=[];if(n&&n.length>0){console.log(`[BG] Analyzing ${n.length} content chunks for ${o}`);const i=n.map(async(u,m)=>{const B=await y(u);return B?{...B,chunkIndex:m,originalChunk:u.substring(0,100)+"..."}:(console.warn(`[BG] Failed to analyze content chunk ${m} for ${o}`),null)});s=(await Promise.all(i)).filter(u=>u!==null),console.log(`[BG] pageContentAiResults for ${o} (count: ${s.length}):`,s)}else console.log(`[BG] No content chunks provided to analyze for ${o}`);const c={analysis:a,urlTextAnalysis:t,pageContentAnalyses:s,lastChecked:Date.now()};return console.log("[BG] StoredData to be saved for",o,":",JSON.parse(JSON.stringify(c))),chrome.storage.local.set({[o]:c}),c}catch(r){l("!","#EF4444");const t=r instanceof Error?r.message:String(r);return console.error(`[BG] Network/Parsing Error in performFullAnalysis for ${o}: ${t}`),{error:`Network/Parsing error: ${t}`,lastChecked:Date.now()}}},p=async(e,n=!1,o)=>{const r=d(e);if(!r){console.warn("[BG] triggerAnalysis: No domain for URL",e);return}console.log(`[BG] triggerAnalysisForUrl: ${e}, forceContentFetch: ${n}, tabIdForContent: ${o}`),n&&o?(console.log("[BG] Requesting text from page:",e,"Tab ID:",o),chrome.tabs.sendMessage(o,{action:"getTextContentFromPage"},t=>{var a;chrome.runtime.lastError?(console.warn(`[BG] Error sending to content script for ${e} (tab ${o}): ${chrome.runtime.lastError.message}. Proceeding with URL-only analysis (no new content chunks).`),g(e,[]).then(s=>{chrome.runtime.sendMessage({action:"analysisUpdated",domain:r,data:s,forUrl:e}).catch(c=>console.warn("[BG] Error sending analysisUpdated (no content fetch response):",c.message))})):(a=t==null?void 0:t.status)!=null&&a.includes("processing")?console.log("[BG] Content script started processing text for:",e):(console.warn("[BG] Content script for",e,"responded unexpectedly or failed to start:",t,". Proceeding with URL-only analysis (no new content chunks)."),g(e,[]).then(s=>{chrome.runtime.sendMessage({action:"analysisUpdated",domain:r,data:s,forUrl:e}).catch(c=>console.warn("[BG] Error sending analysisUpdated (unexpected content response):",c.message))}))})):(console.log(`[BG] Performing analysis for ${r} (no force content fetch). Will check cache or do URL/Domain analysis only.`),chrome.storage.local.get(r,t=>{const a=t[r],s=5*60*1e3;a!=null&&a.analysis&&Date.now()-a.lastChecked<s&&typeof a.urlTextAnalysis<"u"&&Array.isArray(a.pageContentAnalyses)&&!a.error?(console.log("[BG] Using fully cached data (including potentially empty pageContentAnalyses):",r),chrome.runtime.sendMessage({action:"analysisUpdated",domain:r,data:a,forUrl:e}).catch(c=>console.warn("[BG] Error sending analysisUpdated (cache):",c.message))):(console.log("[BG] Cache miss, incomplete, or error. Performing analysis. NO NEW CONTENT CHUNKS WILL BE FETCHED.",e),g(e,[]).then(c=>{chrome.runtime.sendMessage({action:"analysisUpdated",domain:r,data:c,forUrl:e}).catch(i=>console.warn("[BG] Error sending analysisUpdated (no cache/no force):",i.message))}))}))},f=async(e,n)=>{e&&(e.startsWith("http:")||e.startsWith("https:"))?(console.log(`[BG] handleTabUpdate for URL: ${e}, TabID: ${n}`),p(e,!1,n)):(console.log(`[BG] handleTabUpdate: Skipped (not http/https or no URL): ${e}`),l("","#777777"))};chrome.tabs.onUpdated.addListener((e,n,o)=>{n.status==="complete"&&o.active&&o.url&&(console.log(`[BG] onUpdated: complete & active for tab ${e}, url: ${o.url}`),f(o.url,e))}),chrome.tabs.onActivated.addListener(async e=>{chrome.tabs.get(e.tabId,n=>{n.url&&(console.log(`[BG] onActivated: tab ${e.tabId}, url: ${n.url}`),f(n.url,e.tabId))})}),chrome.runtime.onStartup.addListener(()=>{chrome.tabs.query({active:!0,currentWindow:!0},e=>{var n;(n=e[0])!=null&&n.url&&(console.log(`[BG] onStartup: active tab ${e[0].id}, url: ${e[0].url}`),f(e[0].url,e[0].id))})}),chrome.windows.onFocusChanged.addListener(e=>{e!==chrome.windows.WINDOW_ID_NONE&&chrome.tabs.query({active:!0,windowId:e},n=>{var o;(o=n[0])!=null&&o.url&&(console.log(`[BG] onFocusChanged: window ${e}, active tab ${n[0].id}, url: ${n[0].url}`),f(n[0].url,n[0].id))})}),chrome.runtime.onMessage.addListener((e,n,o)=>{if(console.log("[BG] Received message:",e,"From sender:",n),e.action==="requestAnalysisForCurrentTab"){const r=n.tab||e.tab,t=(r==null?void 0:r.url)||e.url,a=r==null?void 0:r.id;if(t){const s=d(t);s?(console.log(`[BG] requestAnalysisForCurrentTab for ${s} (URL: ${t}). Force content: ${!!e.forceContentRefresh}. Tab for content: ${a}`),p(t,!!e.forceContentRefresh,a),o({status:"analysis_triggered",lastChecked:Date.now()})):(console.warn("[BG] requestAnalysisForCurrentTab: No valid domain for URL:",t),o({error:"No valid domain.",lastChecked:Date.now()}))}else console.warn("[BG] requestAnalysisForCurrentTab: No URL provided or found in sender."),o({error:"No active tab/URL.",lastChecked:Date.now()});return!0}if(e.action==="analyzePageContent"){const{url:r,contentChunks:t}=e;if(!r)return console.error("[BG] analyzePageContent: URL missing in message."),o({success:!1,error:"URL missing."}),!1;const a=d(r);return console.log(`[BG] Received ${(t==null?void 0:t.length)||0} content chunks from content script for URL:`,r),g(r,t).then(s=>{console.log(`[BG] Analysis complete (after content chunks received) for ${a}. Sending update.`),chrome.runtime.sendMessage({action:"analysisUpdated",domain:a,data:s,forUrl:r}).catch(c=>console.warn("[BG] Error sending analysisUpdated (analyzePageContent):",c.message)),o({success:!0})}).catch(s=>{console.error("[BG] Error in performFullAnalysis (from analyzePageContent):",s),o({success:!1,error:s.message})}),!0}return e.action==="updateExtensionBadge"?(e.text!==void 0&&e.color!==void 0?(l(e.text,e.color),o({success:!0})):o({success:!1,error:"Missing text/color for badge."}),!0):(console.log("[BG] Message action not recognized or not handled:",e.action),!1)}),console.log("[BG] Background script loaded and listeners attached (v1.0.5).")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFja2dyb3VuZC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2JhY2tncm91bmQvYmFja2dyb3VuZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvYmFja2dyb3VuZC9iYWNrZ3JvdW5kLnRzXG5pbXBvcnQge1xuICBEb21haW5BbmFseXNpc0RldGFpbHMsXG4gIFBoaXNoaW5nVGV4dEFuYWx5c2lzLFxuICBQYWdlQ29udGVudEFpQW5hbHlzaXMsXG4gIFN0b3JlZERvbWFpbkRhdGEsXG59IGZyb20gXCJAL3R5cGVzL2RvbWFpbkFuYWx5c2lzXCI7XG5cbmNvbnN0IEFQSV9CQVNFX1VSTCA9IFwiaHR0cDovLzEyNy4wLjAuMTo4MDAwL2FwaS92MVwiO1xuXG5jb25zdCBnZXREb21haW5Gcm9tVXJsID0gKHVybDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1ID0gbmV3IFVSTCh1cmwpO1xuICAgIHJldHVybiB1Lmhvc3RuYW1lLnJlcGxhY2UoL153d3dcXC4vLCBcIlwiKTtcbiAgfSBjYXRjaCB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn07XG5cbmNvbnN0IHVwZGF0ZUJhZGdlID0gKHRleHQ6IHN0cmluZywgY29sb3I6IHN0cmluZyA9IFwiIzc3Nzc3N1wiKSA9PiB7XG4gIHRyeSB7XG4gICAgY2hyb21lLmFjdGlvbi5zZXRCYWRnZVRleHQoeyB0ZXh0IH0pO1xuICAgIGNocm9tZS5hY3Rpb24uc2V0QmFkZ2VCYWNrZ3JvdW5kQ29sb3IoeyBjb2xvciB9KTtcbiAgICBjb25zb2xlLmxvZyhgW0JHXSBCYWRnZSB1cGRhdGVkOiB0ZXh0PVwiJHt0ZXh0fVwiLCBjb2xvcj1cIiR7Y29sb3J9XCJgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUud2FybihcbiAgICAgIFwiW0JHXSBGYWlsZWQgdG8gdXBkYXRlIGJhZGdlLCBleHRlbnNpb24gY29udGV4dCBsaWtlbHkgaW52YWxpZC5cIixcbiAgICAgIGVcbiAgICApO1xuICB9XG59O1xuXG5jb25zdCBmZXRjaFRleHRBbmFseXNpcyA9IGFzeW5jIChcbiAgdGV4dFRvQW5hbHl6ZTogc3RyaW5nXG4pOiBQcm9taXNlPFBoaXNoaW5nVGV4dEFuYWx5c2lzIHwgbnVsbD4gPT4ge1xuICBjb25zdCB0ZXh0U25pcHBldCA9XG4gICAgdGV4dFRvQW5hbHl6ZS5zdWJzdHJpbmcoMCwgMTAwKSArICh0ZXh0VG9BbmFseXplLmxlbmd0aCA+IDEwMCA/IFwiLi4uXCIgOiBcIlwiKTtcbiAgY29uc29sZS5sb2coXG4gICAgYFtCR10gZmV0Y2hUZXh0QW5hbHlzaXM6IEF0dGVtcHRpbmcgdG8gYW5hbHl6ZSB0ZXh0IHNuaXBwZXQ6IFwiJHt0ZXh0U25pcHBldH1cImBcbiAgKTtcbiAgdHJ5IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke0FQSV9CQVNFX1VSTH0vY2hlY2tfcGhpc2hpbmdfdGV4dGAsIHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBoZWFkZXJzOiB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiIH0sXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHRleHRfdG9fYW5hbHl6ZTogdGV4dFRvQW5hbHl6ZSB9KSxcbiAgICB9KTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBjb25zdCBlcnJvckJvZHkgPSBhd2FpdCByZXNwb25zZS50ZXh0KCkuY2F0Y2goKCkgPT4gXCJObyBlcnJvciBib2R5XCIpO1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYFtCR10gZmV0Y2hUZXh0QW5hbHlzaXMgQVBJIEVycm9yIGZvciBzbmlwcGV0IFwiJHt0ZXh0U25pcHBldH1cIjogJHtyZXNwb25zZS5zdGF0dXN9YCxcbiAgICAgICAgZXJyb3JCb2R5XG4gICAgICApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGNvbnN0IGRhdGE6IFBoaXNoaW5nVGV4dEFuYWx5c2lzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFtCR10gZmV0Y2hUZXh0QW5hbHlzaXMgQVBJIFN1Y2Nlc3MgZm9yIHNuaXBwZXQgXCIke3RleHRTbmlwcGV0fVwiOmAsXG4gICAgICBkYXRhXG4gICAgKTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgW0JHXSBmZXRjaFRleHRBbmFseXNpcyBOZXR3b3JrIEVycm9yIGZvciBzbmlwcGV0IFwiJHt0ZXh0U25pcHBldH1cIjpgLFxuICAgICAgZVxuICAgICk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmNvbnN0IHBlcmZvcm1GdWxsQW5hbHlzaXMgPSBhc3luYyAoXG4gIHVybFRvQW5hbHl6ZTogc3RyaW5nLFxuICBjb250ZW50Q2h1bmtzRm9yQW5hbHlzaXM/OiBzdHJpbmdbXSAvLyBabWllbmlvbmEgbmF6d2EgZGxhIGphc25vxZtjaSwgdG8gc8SFIGNodW5raSB0ZWtzdHVcbik6IFByb21pc2U8U3RvcmVkRG9tYWluRGF0YT4gPT4ge1xuICBjb25zdCBkb21haW4gPSBnZXREb21haW5Gcm9tVXJsKHVybFRvQW5hbHl6ZSk7XG4gIGlmICghZG9tYWluKSB7XG4gICAgY29uc29sZS53YXJuKFxuICAgICAgXCJbQkddIHBlcmZvcm1GdWxsQW5hbHlzaXM6IEludmFsaWQgZG9tYWluIGZyb20gVVJMOlwiLFxuICAgICAgdXJsVG9BbmFseXplXG4gICAgKTtcbiAgICByZXR1cm4geyBlcnJvcjogXCJJbnZhbGlkIGRvbWFpblwiLCBsYXN0Q2hlY2tlZDogRGF0ZS5ub3coKSB9O1xuICB9XG4gIHVwZGF0ZUJhZGdlKFwiLi4uXCIsIFwiI0Y1OUUwQlwiKTtcbiAgY29uc29sZS5sb2coXG4gICAgYFtCR10gUGVyZm9ybWluZyBmdWxsIGFuYWx5c2lzIGZvciAke3VybFRvQW5hbHl6ZX0uIENvbnRlbnQgY2h1bmtzIGZvciBhbmFseXNpczogJHtcbiAgICAgIGNvbnRlbnRDaHVua3NGb3JBbmFseXNpcz8ubGVuZ3RoIHx8IDBcbiAgICB9YFxuICApO1xuXG4gIHRyeSB7XG4gICAgY29uc3QgW2RvbWFpbkRldGFpbHNSZXNwb25zZSwgdXJsVGV4dEFuYWx5c2lzUmVzdWx0XSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgIGZldGNoKGAke0FQSV9CQVNFX1VSTH0vYW5hbHl6ZV9kb21haW5fZGV0YWlsc2AsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgaGVhZGVyczogeyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIiB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IHVybDogdXJsVG9BbmFseXplIH0pLFxuICAgICAgfSksXG4gICAgICBmZXRjaFRleHRBbmFseXNpcyh1cmxUb0FuYWx5emUpLFxuICAgIF0pO1xuXG4gICAgY29uc29sZS5sb2coXG4gICAgICBgW0JHXSBwZXJmb3JtRnVsbEFuYWx5c2lzIC0gVVJMIEFJIEFuYWx5c2lzIHJlc3VsdCBmb3IgJHt1cmxUb0FuYWx5emV9OmAsXG4gICAgICB1cmxUZXh0QW5hbHlzaXNSZXN1bHRcbiAgICApO1xuXG4gICAgaWYgKCFkb21haW5EZXRhaWxzUmVzcG9uc2Uub2spIHtcbiAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IGRvbWFpbkRldGFpbHNSZXNwb25zZVxuICAgICAgICAuanNvbigpXG4gICAgICAgIC5jYXRjaCgoKSA9PiAoeyBkZXRhaWw6IFwiVW5rbm93biBBUEkgZXJyb3IgKGRvbWFpbilcIiB9KSk7XG4gICAgICB1cGRhdGVCYWRnZShcIiFcIiwgXCIjRUY0NDQ0XCIpO1xuICAgICAgY29uc29sZS5lcnJvcihgW0JHXSBEb21haW4gYW5hbHlzaXMgQVBJIEVycm9yIGZvciAke2RvbWFpbn06YCwgZXJyb3JEYXRhKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBgQVBJIEVycm9yIChkb21haW4pOiR7XG4gICAgICAgICAgZXJyb3JEYXRhLmRldGFpbCB8fCBkb21haW5EZXRhaWxzUmVzcG9uc2Uuc3RhdHVzVGV4dFxuICAgICAgICB9YCxcbiAgICAgICAgbGFzdENoZWNrZWQ6IERhdGUubm93KCksXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCBkb21haW5BbmFseXNpczogRG9tYWluQW5hbHlzaXNEZXRhaWxzID1cbiAgICAgIGF3YWl0IGRvbWFpbkRldGFpbHNSZXNwb25zZS5qc29uKCk7XG4gICAgaWYgKGRvbWFpbkFuYWx5c2lzLmVycm9yKSB7XG4gICAgICB1cGRhdGVCYWRnZShcIj9cIiwgXCIjRUY0NDQ0XCIpO1xuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBgW0JHXSBBUEkgcmV0dXJuZWQgZXJyb3IgaW4gZG9tYWluIGRhdGEgZm9yICR7ZG9tYWlufTpgLFxuICAgICAgICBkb21haW5BbmFseXNpcy5lcnJvclxuICAgICAgKTtcbiAgICAgIHJldHVybiB7IGVycm9yOiBkb21haW5BbmFseXNpcy5lcnJvciwgbGFzdENoZWNrZWQ6IERhdGUubm93KCkgfTtcbiAgICB9XG4gICAgY29uc29sZS5sb2coXCJbQkddIERvbWFpbiBhbmFseXNpcyBPSyBmb3JcIiwgZG9tYWluKTtcblxuICAgIGxldCBwYWdlQ29udGVudEFpUmVzdWx0czogUGFnZUNvbnRlbnRBaUFuYWx5c2lzW10gPSBbXTtcbiAgICBpZiAoY29udGVudENodW5rc0ZvckFuYWx5c2lzICYmIGNvbnRlbnRDaHVua3NGb3JBbmFseXNpcy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYFtCR10gQW5hbHl6aW5nICR7Y29udGVudENodW5rc0ZvckFuYWx5c2lzLmxlbmd0aH0gY29udGVudCBjaHVua3MgZm9yICR7ZG9tYWlufWBcbiAgICAgICk7XG4gICAgICBjb25zdCBhbmFseXNpc1Byb21pc2VzID0gY29udGVudENodW5rc0ZvckFuYWx5c2lzLm1hcChcbiAgICAgICAgYXN5bmMgKGNodW5rLCBpZHgpID0+IHtcbiAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBmZXRjaFRleHRBbmFseXNpcyhjaHVuayk7XG4gICAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgLi4ucmVzdWx0LFxuICAgICAgICAgICAgICBjaHVua0luZGV4OiBpZHgsXG4gICAgICAgICAgICAgIG9yaWdpbmFsQ2h1bms6IGNodW5rLnN1YnN0cmluZygwLCAxMDApICsgXCIuLi5cIixcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgYFtCR10gRmFpbGVkIHRvIGFuYWx5emUgY29udGVudCBjaHVuayAke2lkeH0gZm9yICR7ZG9tYWlufWBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICk7XG4gICAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoYW5hbHlzaXNQcm9taXNlcyk7XG4gICAgICBwYWdlQ29udGVudEFpUmVzdWx0cyA9IHJlc3VsdHMuZmlsdGVyKFxuICAgICAgICAocikgPT4gciAhPT0gbnVsbFxuICAgICAgKSBhcyBQYWdlQ29udGVudEFpQW5hbHlzaXNbXTtcbiAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICBgW0JHXSBwYWdlQ29udGVudEFpUmVzdWx0cyBmb3IgJHtkb21haW59IChjb3VudDogJHtwYWdlQ29udGVudEFpUmVzdWx0cy5sZW5ndGh9KTpgLFxuICAgICAgICBwYWdlQ29udGVudEFpUmVzdWx0c1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coYFtCR10gTm8gY29udGVudCBjaHVua3MgcHJvdmlkZWQgdG8gYW5hbHl6ZSBmb3IgJHtkb21haW59YCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RvcmVkRGF0YTogU3RvcmVkRG9tYWluRGF0YSA9IHtcbiAgICAgIGFuYWx5c2lzOiBkb21haW5BbmFseXNpcyxcbiAgICAgIHVybFRleHRBbmFseXNpczogdXJsVGV4dEFuYWx5c2lzUmVzdWx0LFxuICAgICAgcGFnZUNvbnRlbnRBbmFseXNlczogcGFnZUNvbnRlbnRBaVJlc3VsdHMsIC8vIFphd3N6ZSB0YWJsaWNhXG4gICAgICBsYXN0Q2hlY2tlZDogRGF0ZS5ub3coKSxcbiAgICB9O1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgXCJbQkddIFN0b3JlZERhdGEgdG8gYmUgc2F2ZWQgZm9yXCIsXG4gICAgICBkb21haW4sXG4gICAgICBcIjpcIixcbiAgICAgIEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkoc3RvcmVkRGF0YSkpIC8vIEfFgsSZYm9rYSBrb3BpYSBkbGEgbG9nb3dhbmlhXG4gICAgKTtcbiAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5zZXQoeyBbZG9tYWluXTogc3RvcmVkRGF0YSB9KTtcbiAgICByZXR1cm4gc3RvcmVkRGF0YTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHVwZGF0ZUJhZGdlKFwiIVwiLCBcIiNFRjQ0NDRcIik7XG4gICAgY29uc3QgZXJyb3JNc2cgPSBlIGluc3RhbmNlb2YgRXJyb3IgPyBlLm1lc3NhZ2UgOiBTdHJpbmcoZSk7XG4gICAgY29uc29sZS5lcnJvcihcbiAgICAgIGBbQkddIE5ldHdvcmsvUGFyc2luZyBFcnJvciBpbiBwZXJmb3JtRnVsbEFuYWx5c2lzIGZvciAke2RvbWFpbn06ICR7ZXJyb3JNc2d9YFxuICAgICk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVycm9yOiBgTmV0d29yay9QYXJzaW5nIGVycm9yOiAke2Vycm9yTXNnfWAsXG4gICAgICBsYXN0Q2hlY2tlZDogRGF0ZS5ub3coKSxcbiAgICB9O1xuICB9XG59O1xuXG5jb25zdCB0cmlnZ2VyQW5hbHlzaXNGb3JVcmwgPSBhc3luYyAoXG4gIHVybDogc3RyaW5nLFxuICBmb3JjZUNvbnRlbnRGZXRjaDogYm9vbGVhbiA9IGZhbHNlLFxuICB0YWJJZEZvckNvbnRlbnQ/OiBudW1iZXJcbikgPT4ge1xuICBjb25zdCBkb21haW4gPSBnZXREb21haW5Gcm9tVXJsKHVybCk7XG4gIGlmICghZG9tYWluKSB7XG4gICAgY29uc29sZS53YXJuKFwiW0JHXSB0cmlnZ2VyQW5hbHlzaXM6IE5vIGRvbWFpbiBmb3IgVVJMXCIsIHVybCk7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc29sZS5sb2coXG4gICAgYFtCR10gdHJpZ2dlckFuYWx5c2lzRm9yVXJsOiAke3VybH0sIGZvcmNlQ29udGVudEZldGNoOiAke2ZvcmNlQ29udGVudEZldGNofSwgdGFiSWRGb3JDb250ZW50OiAke3RhYklkRm9yQ29udGVudH1gXG4gICk7XG5cbiAgaWYgKGZvcmNlQ29udGVudEZldGNoICYmIHRhYklkRm9yQ29udGVudCkge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgXCJbQkddIFJlcXVlc3RpbmcgdGV4dCBmcm9tIHBhZ2U6XCIsXG4gICAgICB1cmwsXG4gICAgICBcIlRhYiBJRDpcIixcbiAgICAgIHRhYklkRm9yQ29udGVudFxuICAgICk7XG4gICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UoXG4gICAgICB0YWJJZEZvckNvbnRlbnQsXG4gICAgICB7IGFjdGlvbjogXCJnZXRUZXh0Q29udGVudEZyb21QYWdlXCIgfSxcbiAgICAgIChyZXNwb25zZUZyb21Db250ZW50KSA9PiB7XG4gICAgICAgIC8vIFRhIG9kcG93aWVkxbogamVzdCB6IGNvbnRlbnQudHNcbiAgICAgICAgaWYgKGNocm9tZS5ydW50aW1lLmxhc3RFcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBbQkddIEVycm9yIHNlbmRpbmcgdG8gY29udGVudCBzY3JpcHQgZm9yICR7dXJsfSAodGFiICR7dGFiSWRGb3JDb250ZW50fSk6ICR7Y2hyb21lLnJ1bnRpbWUubGFzdEVycm9yLm1lc3NhZ2V9LiBQcm9jZWVkaW5nIHdpdGggVVJMLW9ubHkgYW5hbHlzaXMgKG5vIG5ldyBjb250ZW50IGNodW5rcykuYFxuICAgICAgICAgICk7XG4gICAgICAgICAgLy8gTmllIHByemVrYXp1amVteSBzdGFyeWNoIGNodW5rw7N3LCB0eWxrbyBwdXN0ZSwgYm8gY29udGVudCBzY3JpcHQgbmllIG9kcG93aWVkemlhxYJcbiAgICAgICAgICBwZXJmb3JtRnVsbEFuYWx5c2lzKHVybCwgW10pLnRoZW4oKGRhdGEpID0+IHtcbiAgICAgICAgICAgIGNocm9tZS5ydW50aW1lXG4gICAgICAgICAgICAgIC5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImFuYWx5c2lzVXBkYXRlZFwiLFxuICAgICAgICAgICAgICAgIGRvbWFpbixcbiAgICAgICAgICAgICAgICBkYXRhLFxuICAgICAgICAgICAgICAgIGZvclVybDogdXJsLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAuY2F0Y2goKGUpID0+XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgXCJbQkddIEVycm9yIHNlbmRpbmcgYW5hbHlzaXNVcGRhdGVkIChubyBjb250ZW50IGZldGNoIHJlc3BvbnNlKTpcIixcbiAgICAgICAgICAgICAgICAgIGUubWVzc2FnZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChyZXNwb25zZUZyb21Db250ZW50Py5zdGF0dXM/LmluY2x1ZGVzKFwicHJvY2Vzc2luZ1wiKSkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKFwiW0JHXSBDb250ZW50IHNjcmlwdCBzdGFydGVkIHByb2Nlc3NpbmcgdGV4dCBmb3I6XCIsIHVybCk7XG4gICAgICAgICAgLy8gQ3pla2FteSwgYcW8IGNvbnRlbnQgc2NyaXB0IHd5xZtsZSAnYW5hbHl6ZVBhZ2VDb250ZW50JyB6IENIVU5LQU1JIFRFS1NUVVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIFwiW0JHXSBDb250ZW50IHNjcmlwdCBmb3JcIixcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIFwicmVzcG9uZGVkIHVuZXhwZWN0ZWRseSBvciBmYWlsZWQgdG8gc3RhcnQ6XCIsXG4gICAgICAgICAgICByZXNwb25zZUZyb21Db250ZW50LFxuICAgICAgICAgICAgXCIuIFByb2NlZWRpbmcgd2l0aCBVUkwtb25seSBhbmFseXNpcyAobm8gbmV3IGNvbnRlbnQgY2h1bmtzKS5cIlxuICAgICAgICAgICk7XG4gICAgICAgICAgcGVyZm9ybUZ1bGxBbmFseXNpcyh1cmwsIFtdKS50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgICAgICBjaHJvbWUucnVudGltZVxuICAgICAgICAgICAgICAuc2VuZE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJhbmFseXNpc1VwZGF0ZWRcIixcbiAgICAgICAgICAgICAgICBkb21haW4sXG4gICAgICAgICAgICAgICAgZGF0YSxcbiAgICAgICAgICAgICAgICBmb3JVcmw6IHVybCxcbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgLmNhdGNoKChlKSA9PlxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgIFwiW0JHXSBFcnJvciBzZW5kaW5nIGFuYWx5c2lzVXBkYXRlZCAodW5leHBlY3RlZCBjb250ZW50IHJlc3BvbnNlKTpcIixcbiAgICAgICAgICAgICAgICAgIGUubWVzc2FnZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgLy8gTmllIHd5bXVzemFteSBwb2JpZXJhbmlhIHRyZcWbY2kgeiBjb250ZW50LnRzIChmb3JjZUNvbnRlbnRGZXRjaCA9PT0gZmFsc2UpXG4gICAgY29uc29sZS5sb2coXG4gICAgICBgW0JHXSBQZXJmb3JtaW5nIGFuYWx5c2lzIGZvciAke2RvbWFpbn0gKG5vIGZvcmNlIGNvbnRlbnQgZmV0Y2gpLiBXaWxsIGNoZWNrIGNhY2hlIG9yIGRvIFVSTC9Eb21haW4gYW5hbHlzaXMgb25seS5gXG4gICAgKTtcbiAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoZG9tYWluLCAocmVzdWx0KSA9PiB7XG4gICAgICBjb25zdCBjYWNoZWREYXRhOiBTdG9yZWREb21haW5EYXRhIHwgdW5kZWZpbmVkID0gcmVzdWx0W2RvbWFpbl07XG4gICAgICBjb25zdCBmaXZlTWludXRlcyA9IDUgKiA2MCAqIDEwMDA7XG4gICAgICBpZiAoXG4gICAgICAgIGNhY2hlZERhdGE/LmFuYWx5c2lzICYmXG4gICAgICAgIERhdGUubm93KCkgLSBjYWNoZWREYXRhLmxhc3RDaGVja2VkIDwgZml2ZU1pbnV0ZXMgJiZcbiAgICAgICAgdHlwZW9mIGNhY2hlZERhdGEudXJsVGV4dEFuYWx5c2lzICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgIEFycmF5LmlzQXJyYXkoY2FjaGVkRGF0YS5wYWdlQ29udGVudEFuYWx5c2VzKSAmJiAvLyBwYWdlQ29udGVudEFuYWx5c2VzIHogY2FjaGUgKG1vZ8SFIGJ5xIcgcHVzdGUpXG4gICAgICAgICFjYWNoZWREYXRhLmVycm9yXG4gICAgICApIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgXCJbQkddIFVzaW5nIGZ1bGx5IGNhY2hlZCBkYXRhIChpbmNsdWRpbmcgcG90ZW50aWFsbHkgZW1wdHkgcGFnZUNvbnRlbnRBbmFseXNlcyk6XCIsXG4gICAgICAgICAgZG9tYWluXG4gICAgICAgICk7XG4gICAgICAgIGNocm9tZS5ydW50aW1lXG4gICAgICAgICAgLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgIGFjdGlvbjogXCJhbmFseXNpc1VwZGF0ZWRcIixcbiAgICAgICAgICAgIGRvbWFpbixcbiAgICAgICAgICAgIGRhdGE6IGNhY2hlZERhdGEsXG4gICAgICAgICAgICBmb3JVcmw6IHVybCxcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaCgoZSkgPT5cbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgXCJbQkddIEVycm9yIHNlbmRpbmcgYW5hbHlzaXNVcGRhdGVkIChjYWNoZSk6XCIsXG4gICAgICAgICAgICAgIGUubWVzc2FnZVxuICAgICAgICAgICAgKVxuICAgICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBcIltCR10gQ2FjaGUgbWlzcywgaW5jb21wbGV0ZSwgb3IgZXJyb3IuIFBlcmZvcm1pbmcgYW5hbHlzaXMuIE5PIE5FVyBDT05URU5UIENIVU5LUyBXSUxMIEJFIEZFVENIRUQuXCIsXG4gICAgICAgICAgdXJsXG4gICAgICAgICk7XG4gICAgICAgIC8vIFd5a29udWplbXkgYW5hbGl6xJksIGFsZSBuaWUgcHLDs2J1amVteSBwb2JpZXJhxIcgbm93eWNoIGNodW5rw7N3IHRyZcWbY2kuXG4gICAgICAgIC8vIEplxZtsaSBjYWNoZWREYXRhLnBhZ2VDb250ZW50QW5hbHlzZXMgaXN0bmllamUsIHRvIHpuYWN6eSwgxbxlIGtpZWR5xZsgamUgcG9icmFsacWbbXksXG4gICAgICAgIC8vIGFsZSB0ZXJheiBjYWNoZSBqZXN0IG5pZWFrdHVhbG55LiBEbGEgdXByb3N6Y3plbmlhLCBuaWUgYsSZZHppZW15IGljaCB0dSBwb25vd25pZSB1xbx5d2HEhyxcbiAgICAgICAgLy8gY2h5YmEgxbxlIGxvZ2lrYSBzY29yZUNhbGN1bGF0b3IgamVzdCBuYSB0byBnb3Rvd2EuIEJlenBpZWN6bmllaiBqZXN0IHByemVrYXphxIcgcHVzdGUuXG4gICAgICAgIHBlcmZvcm1GdWxsQW5hbHlzaXModXJsLCBbXSkudGhlbihcbiAgICAgICAgICAvLyBaYXdzemUgcHVzdGUsIGplxZtsaSBuaWUgbWEgZm9yY2VDb250ZW50RmV0Y2hcbiAgICAgICAgICAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWVcbiAgICAgICAgICAgICAgLnNlbmRNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiYW5hbHlzaXNVcGRhdGVkXCIsXG4gICAgICAgICAgICAgICAgZG9tYWluLFxuICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgZm9yVXJsOiB1cmwsXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIC5jYXRjaCgoZSkgPT5cbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICBcIltCR10gRXJyb3Igc2VuZGluZyBhbmFseXNpc1VwZGF0ZWQgKG5vIGNhY2hlL25vIGZvcmNlKTpcIixcbiAgICAgICAgICAgICAgICAgIGUubWVzc2FnZVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbi8vIC4uLiAocmVzenRhIGhhbmRsZVRhYlVwZGF0ZSBpIGxpc3RlbmVyw7N3IHBvem9zdGFqZSB0YWthIHNhbWEpIC4uLlxuY29uc3QgaGFuZGxlVGFiVXBkYXRlID0gYXN5bmMgKHVybDogc3RyaW5nIHwgdW5kZWZpbmVkLCB0YWJJZD86IG51bWJlcikgPT4ge1xuICBpZiAodXJsICYmICh1cmwuc3RhcnRzV2l0aChcImh0dHA6XCIpIHx8IHVybC5zdGFydHNXaXRoKFwiaHR0cHM6XCIpKSkge1xuICAgIGNvbnNvbGUubG9nKGBbQkddIGhhbmRsZVRhYlVwZGF0ZSBmb3IgVVJMOiAke3VybH0sIFRhYklEOiAke3RhYklkfWApO1xuICAgIHRyaWdnZXJBbmFseXNpc0ZvclVybCh1cmwsIGZhbHNlLCB0YWJJZCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICBgW0JHXSBoYW5kbGVUYWJVcGRhdGU6IFNraXBwZWQgKG5vdCBodHRwL2h0dHBzIG9yIG5vIFVSTCk6ICR7dXJsfWBcbiAgICApO1xuICAgIHVwZGF0ZUJhZGdlKFwiXCIsIFwiIzc3Nzc3N1wiKTtcbiAgfVxufTtcblxuY2hyb21lLnRhYnMub25VcGRhdGVkLmFkZExpc3RlbmVyKCh0YWJJZCwgY2hhbmdlSW5mbywgdGFiKSA9PiB7XG4gIGlmIChjaGFuZ2VJbmZvLnN0YXR1cyA9PT0gXCJjb21wbGV0ZVwiICYmIHRhYi5hY3RpdmUgJiYgdGFiLnVybCkge1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFtCR10gb25VcGRhdGVkOiBjb21wbGV0ZSAmIGFjdGl2ZSBmb3IgdGFiICR7dGFiSWR9LCB1cmw6ICR7dGFiLnVybH1gXG4gICAgKTtcbiAgICBoYW5kbGVUYWJVcGRhdGUodGFiLnVybCwgdGFiSWQpO1xuICB9XG59KTtcbmNocm9tZS50YWJzLm9uQWN0aXZhdGVkLmFkZExpc3RlbmVyKGFzeW5jIChhY3RpdmVJbmZvKSA9PiB7XG4gIGNocm9tZS50YWJzLmdldChhY3RpdmVJbmZvLnRhYklkLCAodGFiKSA9PiB7XG4gICAgaWYgKHRhYi51cmwpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBbQkddIG9uQWN0aXZhdGVkOiB0YWIgJHthY3RpdmVJbmZvLnRhYklkfSwgdXJsOiAke3RhYi51cmx9YCk7XG4gICAgICBoYW5kbGVUYWJVcGRhdGUodGFiLnVybCwgYWN0aXZlSW5mby50YWJJZCk7XG4gICAgfVxuICB9KTtcbn0pO1xuY2hyb21lLnJ1bnRpbWUub25TdGFydHVwLmFkZExpc3RlbmVyKCgpID0+IHtcbiAgY2hyb21lLnRhYnMucXVlcnkoeyBhY3RpdmU6IHRydWUsIGN1cnJlbnRXaW5kb3c6IHRydWUgfSwgKHRhYnMpID0+IHtcbiAgICBpZiAodGFic1swXT8udXJsKSB7XG4gICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgYFtCR10gb25TdGFydHVwOiBhY3RpdmUgdGFiICR7dGFic1swXS5pZH0sIHVybDogJHt0YWJzWzBdLnVybH1gXG4gICAgICApO1xuICAgICAgaGFuZGxlVGFiVXBkYXRlKHRhYnNbMF0udXJsLCB0YWJzWzBdLmlkKTtcbiAgICB9XG4gIH0pO1xufSk7XG5jaHJvbWUud2luZG93cy5vbkZvY3VzQ2hhbmdlZC5hZGRMaXN0ZW5lcigod2luZG93SWQpID0+IHtcbiAgaWYgKHdpbmRvd0lkICE9PSBjaHJvbWUud2luZG93cy5XSU5ET1dfSURfTk9ORSkge1xuICAgIGNocm9tZS50YWJzLnF1ZXJ5KHsgYWN0aXZlOiB0cnVlLCB3aW5kb3dJZDogd2luZG93SWQgfSwgKHRhYnMpID0+IHtcbiAgICAgIGlmICh0YWJzWzBdPy51cmwpIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYFtCR10gb25Gb2N1c0NoYW5nZWQ6IHdpbmRvdyAke3dpbmRvd0lkfSwgYWN0aXZlIHRhYiAke3RhYnNbMF0uaWR9LCB1cmw6ICR7dGFic1swXS51cmx9YFxuICAgICAgICApO1xuICAgICAgICBoYW5kbGVUYWJVcGRhdGUodGFic1swXS51cmwsIHRhYnNbMF0uaWQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTtcblxuY2hyb21lLnJ1bnRpbWUub25NZXNzYWdlLmFkZExpc3RlbmVyKChtZXNzYWdlLCBzZW5kZXIsIHNlbmRSZXNwb25zZSkgPT4ge1xuICBjb25zb2xlLmxvZyhcIltCR10gUmVjZWl2ZWQgbWVzc2FnZTpcIiwgbWVzc2FnZSwgXCJGcm9tIHNlbmRlcjpcIiwgc2VuZGVyKTtcbiAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSBcInJlcXVlc3RBbmFseXNpc0ZvckN1cnJlbnRUYWJcIikge1xuICAgIGNvbnN0IHRhYlRvVXNlID0gc2VuZGVyLnRhYiB8fCBtZXNzYWdlLnRhYjtcbiAgICBjb25zdCB1cmxUb0FuYWx5emUgPSB0YWJUb1VzZT8udXJsIHx8IG1lc3NhZ2UudXJsO1xuICAgIGNvbnN0IHRhYklkRm9yQ29udGVudCA9IHRhYlRvVXNlPy5pZDtcblxuICAgIGlmICh1cmxUb0FuYWx5emUpIHtcbiAgICAgIGNvbnN0IGRvbWFpbiA9IGdldERvbWFpbkZyb21VcmwodXJsVG9BbmFseXplKTtcbiAgICAgIGlmIChkb21haW4pIHtcbiAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgYFtCR10gcmVxdWVzdEFuYWx5c2lzRm9yQ3VycmVudFRhYiBmb3IgJHtkb21haW59IChVUkw6ICR7dXJsVG9BbmFseXplfSkuIEZvcmNlIGNvbnRlbnQ6ICR7ISFtZXNzYWdlLmZvcmNlQ29udGVudFJlZnJlc2h9LiBUYWIgZm9yIGNvbnRlbnQ6ICR7dGFiSWRGb3JDb250ZW50fWBcbiAgICAgICAgKTtcbiAgICAgICAgdHJpZ2dlckFuYWx5c2lzRm9yVXJsKFxuICAgICAgICAgIHVybFRvQW5hbHl6ZSxcbiAgICAgICAgICAhIW1lc3NhZ2UuZm9yY2VDb250ZW50UmVmcmVzaCxcbiAgICAgICAgICB0YWJJZEZvckNvbnRlbnRcbiAgICAgICAgKTtcbiAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3RhdHVzOiBcImFuYWx5c2lzX3RyaWdnZXJlZFwiLCBsYXN0Q2hlY2tlZDogRGF0ZS5ub3coKSB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICBcIltCR10gcmVxdWVzdEFuYWx5c2lzRm9yQ3VycmVudFRhYjogTm8gdmFsaWQgZG9tYWluIGZvciBVUkw6XCIsXG4gICAgICAgICAgdXJsVG9BbmFseXplXG4gICAgICAgICk7XG4gICAgICAgIHNlbmRSZXNwb25zZSh7IGVycm9yOiBcIk5vIHZhbGlkIGRvbWFpbi5cIiwgbGFzdENoZWNrZWQ6IERhdGUubm93KCkgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJbQkddIHJlcXVlc3RBbmFseXNpc0ZvckN1cnJlbnRUYWI6IE5vIFVSTCBwcm92aWRlZCBvciBmb3VuZCBpbiBzZW5kZXIuXCJcbiAgICAgICk7XG4gICAgICBzZW5kUmVzcG9uc2UoeyBlcnJvcjogXCJObyBhY3RpdmUgdGFiL1VSTC5cIiwgbGFzdENoZWNrZWQ6IERhdGUubm93KCkgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSBcImFuYWx5emVQYWdlQ29udGVudFwiKSB7XG4gICAgY29uc3QgeyB1cmwsIGNvbnRlbnRDaHVua3MgfSA9IG1lc3NhZ2U7IC8vIGNvbnRlbnRDaHVua3MgdG8gc3RyaW5nW11cbiAgICBpZiAoIXVybCkge1xuICAgICAgY29uc29sZS5lcnJvcihcIltCR10gYW5hbHl6ZVBhZ2VDb250ZW50OiBVUkwgbWlzc2luZyBpbiBtZXNzYWdlLlwiKTtcbiAgICAgIHNlbmRSZXNwb25zZSh7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogXCJVUkwgbWlzc2luZy5cIiB9KTtcbiAgICAgIHJldHVybiBmYWxzZTsgLy8gWndyw7PEhyBmYWxzZSwgamXFm2xpIG5pZSBtYSBhc3luY2hyb25pY3puZWogb3BlcmFjamlcbiAgICB9XG4gICAgY29uc3QgZG9tYWluID0gZ2V0RG9tYWluRnJvbVVybCh1cmwpO1xuICAgIGNvbnNvbGUubG9nKFxuICAgICAgYFtCR10gUmVjZWl2ZWQgJHtcbiAgICAgICAgY29udGVudENodW5rcz8ubGVuZ3RoIHx8IDBcbiAgICAgIH0gY29udGVudCBjaHVua3MgZnJvbSBjb250ZW50IHNjcmlwdCBmb3IgVVJMOmAsXG4gICAgICB1cmxcbiAgICApO1xuICAgIHBlcmZvcm1GdWxsQW5hbHlzaXModXJsLCBjb250ZW50Q2h1bmtzKSAvLyBQcnpla2HFvCBjb250ZW50Q2h1bmtzIHR1dGFqXG4gICAgICAudGhlbigoZGF0YSkgPT4ge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBgW0JHXSBBbmFseXNpcyBjb21wbGV0ZSAoYWZ0ZXIgY29udGVudCBjaHVua3MgcmVjZWl2ZWQpIGZvciAke2RvbWFpbn0uIFNlbmRpbmcgdXBkYXRlLmBcbiAgICAgICAgKTtcbiAgICAgICAgY2hyb21lLnJ1bnRpbWVcbiAgICAgICAgICAuc2VuZE1lc3NhZ2UoeyBhY3Rpb246IFwiYW5hbHlzaXNVcGRhdGVkXCIsIGRvbWFpbiwgZGF0YSwgZm9yVXJsOiB1cmwgfSlcbiAgICAgICAgICAuY2F0Y2goKGUpID0+XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgIFwiW0JHXSBFcnJvciBzZW5kaW5nIGFuYWx5c2lzVXBkYXRlZCAoYW5hbHl6ZVBhZ2VDb250ZW50KTpcIixcbiAgICAgICAgICAgICAgZS5tZXNzYWdlXG4gICAgICAgICAgICApXG4gICAgICAgICAgKTtcbiAgICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICAgIH0pXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgXCJbQkddIEVycm9yIGluIHBlcmZvcm1GdWxsQW5hbHlzaXMgKGZyb20gYW5hbHl6ZVBhZ2VDb250ZW50KTpcIixcbiAgICAgICAgICBlcnJvclxuICAgICAgICApO1xuICAgICAgICBzZW5kUmVzcG9uc2UoeyBzdWNjZXNzOiBmYWxzZSwgZXJyb3I6IGVycm9yLm1lc3NhZ2UgfSk7XG4gICAgICB9KTtcbiAgICByZXR1cm4gdHJ1ZTsgLy8gV2HFvG5lIGRsYSBhc3luY2hyb25pY3puZWdvIHNlbmRSZXNwb25zZVxuICB9XG5cbiAgaWYgKG1lc3NhZ2UuYWN0aW9uID09PSBcInVwZGF0ZUV4dGVuc2lvbkJhZGdlXCIpIHtcbiAgICBpZiAobWVzc2FnZS50ZXh0ICE9PSB1bmRlZmluZWQgJiYgbWVzc2FnZS5jb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB1cGRhdGVCYWRnZShtZXNzYWdlLnRleHQsIG1lc3NhZ2UuY29sb3IpO1xuICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogdHJ1ZSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VuZFJlc3BvbnNlKHsgc3VjY2VzczogZmFsc2UsIGVycm9yOiBcIk1pc3NpbmcgdGV4dC9jb2xvciBmb3IgYmFkZ2UuXCIgfSk7XG4gICAgfVxuICAgIC8vIFRhIG9kcG93aWVkxbogbW/FvGUgYnnEhyBzeW5jaHJvbmljem5hLCB3acSZYyByZXR1cm4gdHJ1ZSBuaWUgamVzdCB0dSBrcnl0eWN6bmUsIGFsZSBuaWUgemFzemtvZHppLlxuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGNvbnNvbGUubG9nKFxuICAgIFwiW0JHXSBNZXNzYWdlIGFjdGlvbiBub3QgcmVjb2duaXplZCBvciBub3QgaGFuZGxlZDpcIixcbiAgICBtZXNzYWdlLmFjdGlvblxuICApO1xuICByZXR1cm4gZmFsc2U7IC8vIFp3csOzxIcgZmFsc2UgZGxhIG5pZW9ic8WCdWdpd2FueWNoIGFrY2ppIGx1YiBqZcWbbGkgb2Rwb3dpZWTFuiBqZXN0IHN5bmNocm9uaWN6bmFcbn0pO1xuXG5jb25zb2xlLmxvZyhcIltCR10gQmFja2dyb3VuZCBzY3JpcHQgbG9hZGVkIGFuZCBsaXN0ZW5lcnMgYXR0YWNoZWQgKHYxLjAuNSkuXCIpO1xuIl0sIm5hbWVzIjpbIkFQSV9CQVNFX1VSTCIsImdldERvbWFpbkZyb21VcmwiLCJ1cmwiLCJ1cGRhdGVCYWRnZSIsInRleHQiLCJjb2xvciIsImUiLCJmZXRjaFRleHRBbmFseXNpcyIsInRleHRUb0FuYWx5emUiLCJ0ZXh0U25pcHBldCIsInJlc3BvbnNlIiwiZXJyb3JCb2R5IiwiZGF0YSIsInBlcmZvcm1GdWxsQW5hbHlzaXMiLCJ1cmxUb0FuYWx5emUiLCJjb250ZW50Q2h1bmtzRm9yQW5hbHlzaXMiLCJkb21haW4iLCJkb21haW5EZXRhaWxzUmVzcG9uc2UiLCJ1cmxUZXh0QW5hbHlzaXNSZXN1bHQiLCJlcnJvckRhdGEiLCJkb21haW5BbmFseXNpcyIsInBhZ2VDb250ZW50QWlSZXN1bHRzIiwiYW5hbHlzaXNQcm9taXNlcyIsImNodW5rIiwiaWR4IiwicmVzdWx0IiwiciIsInN0b3JlZERhdGEiLCJlcnJvck1zZyIsInRyaWdnZXJBbmFseXNpc0ZvclVybCIsImZvcmNlQ29udGVudEZldGNoIiwidGFiSWRGb3JDb250ZW50IiwicmVzcG9uc2VGcm9tQ29udGVudCIsIl9hIiwiY2FjaGVkRGF0YSIsImZpdmVNaW51dGVzIiwiaGFuZGxlVGFiVXBkYXRlIiwidGFiSWQiLCJjaGFuZ2VJbmZvIiwidGFiIiwiYWN0aXZlSW5mbyIsInRhYnMiLCJ3aW5kb3dJZCIsIm1lc3NhZ2UiLCJzZW5kZXIiLCJzZW5kUmVzcG9uc2UiLCJ0YWJUb1VzZSIsImNvbnRlbnRDaHVua3MiLCJlcnJvciJdLCJtYXBwaW5ncyI6InlCQVFBLE1BQU1BLEVBQWUsK0JBRWZDLEVBQW9CQyxHQUF3QixDQUM1QyxHQUFBLENBRUYsT0FEVSxJQUFJLElBQUlBLENBQUcsRUFDWixTQUFTLFFBQVEsU0FBVSxFQUFFLENBQUEsTUFDaEMsQ0FDQyxNQUFBLEVBQ1QsQ0FDRixFQUVNQyxFQUFjLENBQUNDLEVBQWNDLEVBQWdCLFlBQWMsQ0FDM0QsR0FBQSxDQUNGLE9BQU8sT0FBTyxhQUFhLENBQUUsS0FBQUQsQ0FBTSxDQUFBLEVBQ25DLE9BQU8sT0FBTyx3QkFBd0IsQ0FBRSxNQUFBQyxDQUFPLENBQUEsRUFDL0MsUUFBUSxJQUFJLDZCQUE2QkQsQ0FBSSxhQUFhQyxDQUFLLEdBQUcsUUFDM0RDLEVBQUcsQ0FDRixRQUFBLEtBQ04saUVBQ0FBLENBQUEsQ0FFSixDQUNGLEVBRU1DLEVBQW9CLE1BQ3hCQyxHQUN5QyxDQUNuQyxNQUFBQyxFQUNKRCxFQUFjLFVBQVUsRUFBRyxHQUFHLEdBQUtBLEVBQWMsT0FBUyxJQUFNLE1BQVEsSUFDbEUsUUFBQSxJQUNOLGdFQUFnRUMsQ0FBVyxHQUFBLEVBRXpFLEdBQUEsQ0FDRixNQUFNQyxFQUFXLE1BQU0sTUFBTSxHQUFHVixDQUFZLHVCQUF3QixDQUNsRSxPQUFRLE9BQ1IsUUFBUyxDQUFFLGVBQWdCLGtCQUFtQixFQUM5QyxLQUFNLEtBQUssVUFBVSxDQUFFLGdCQUFpQlEsRUFBZSxDQUFBLENBQ3hELEVBQ0csR0FBQSxDQUFDRSxFQUFT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
