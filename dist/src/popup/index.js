(function(){const n=document.createElement("link").relList;if(n&&n.supports&&n.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))r(o);new MutationObserver(o=>{for(const t of o)if(t.type==="childList")for(const e of t.addedNodes)e.tagName==="LINK"&&e.rel==="modulepreload"&&r(e)}).observe(document,{childList:!0,subtree:!0});function a(o){const t={};return o.integrity&&(t.integrity=o.integrity),o.referrerPolicy&&(t.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?t.credentials="include":o.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function r(o){if(o.ep)return;o.ep=!0;const t=a(o);fetch(o.href,t)}})();const R=new Map,y=new Map,f=new Set,u=new Set;let _=new WeakMap;function O(i){let n=i.__REACT_DEVTOOLS_GLOBAL_HOOK__;if(n===void 0){let t=0;i.__REACT_DEVTOOLS_GLOBAL_HOOK__=n={renderers:new Map,supportsFiber:!0,inject:e=>t++,onScheduleFiberRoot:(e,s,l)=>{},onCommitFiberRoot:(e,s,l,m)=>{},onCommitFiberUnmount(){}}}if(n.isDisabled){console.warn("Something has shimmed the React DevTools global hook (__REACT_DEVTOOLS_GLOBAL_HOOK__). Fast Refresh is not compatible with this shim and will be disabled.");return}const a=n.inject;n.inject=function(t){const e=a.apply(this,arguments);return typeof t.scheduleRefresh=="function"&&typeof t.setRefreshHandler=="function"&&R.set(e,t),e},n.renderers.forEach((t,e)=>{typeof t.scheduleRefresh=="function"&&typeof t.setRefreshHandler=="function"&&R.set(e,t)});const r=n.onCommitFiberRoot,o=n.onScheduleFiberRoot||(()=>{});n.onScheduleFiberRoot=function(t,e,s){return u.delete(e),_!==null&&_.set(e,s),o.apply(this,arguments)},n.onCommitFiberRoot=function(t,e,s,l){const m=R.get(t);if(m!==void 0){y.set(e,m);const h=e.current,p=h.alternate;if(p!==null){const d=p.memoizedState!=null&&p.memoizedState.element!=null&&f.has(e),c=h.memoizedState!=null&&h.memoizedState.element!=null;!d&&c?(f.add(e),u.delete(e)):d&&c||(d&&!c?(f.delete(e),l?u.add(e):y.delete(e)):!d&&!c&&l&&u.add(e))}else f.add(e)}return r.apply(this,arguments)}}window.__registerBeforePerformReactRefresh=i=>{};O(window);window.$RefreshReg$=()=>{};window.$RefreshSig$=()=>i=>i;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
