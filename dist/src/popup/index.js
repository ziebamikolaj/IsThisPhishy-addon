(function(){const c=document.createElement("link").relList;if(c&&c.supports&&c.supports("modulepreload"))return;for(const o of document.querySelectorAll('link[rel="modulepreload"]'))v(o);new MutationObserver(o=>{for(const u of o)if(u.type==="childList")for(const _ of u.addedNodes)_.tagName==="LINK"&&_.rel==="modulepreload"&&v(_)}).observe(document,{childList:!0,subtree:!0});function a(o){const u={};return o.integrity&&(u.integrity=o.integrity),o.referrerPolicy&&(u.referrerPolicy=o.referrerPolicy),o.crossOrigin==="use-credentials"?u.credentials="include":o.crossOrigin==="anonymous"?u.credentials="omit":u.credentials="same-origin",u}function v(o){if(o.ep)return;o.ep=!0;const u=a(o);fetch(o.href,u)}})();const l={};(function(){var f=Symbol.for("react.forward_ref"),c=Symbol.for("react.memo"),a=typeof WeakMap=="function"?WeakMap:Map,v=new Map,o=new a,u=new a,_=new a,S=[],O=new Map,C=new Map,R=new Set,w=new Set,F=typeof WeakMap=="function"?new WeakMap:null,T=!1;function E(e){if(e.fullKey!==null)return e.fullKey;var r=e.ownKey,t;try{t=e.getCustomHooks()}catch{return e.forceReset=!0,e.fullKey=r,r}for(var n=0;n<t.length;n++){var h=t[n];if(typeof h!="function")return e.forceReset=!0,e.fullKey=r,r;var m=u.get(h);if(m!==void 0){var s=E(m);m.forceReset&&(e.forceReset=!0),r+=`
---
`+s}}return e.fullKey=r,r}function D(e,r){var t=u.get(e),n=u.get(r);return t===void 0&&n===void 0?!0:!(t===void 0||n===void 0||E(t)!==E(n)||n.forceReset)}function H(e){return e.prototype&&e.prototype.isReactComponent}function I(e,r){return H(e)||H(r)?!1:!!D(e,r)}function U(e){return _.get(e)}function G(e){var r=new Map;return e.forEach(function(t,n){r.set(n,t)}),r}function $(e){var r=new Set;return e.forEach(function(t){r.add(t)}),r}function K(e,r){try{return e[r]}catch{return}}function W(){if(S.length===0||T)return null;T=!0;try{var e=new Set,r=new Set,t=S;S=[],t.forEach(function(d){var p=d[0],g=d[1],y=p.current;_.set(y,p),_.set(g,p),p.current=g,I(y,g)?r.add(p):e.add(p)});var n={updatedFamilies:r,staleFamilies:e};O.forEach(function(d){d.setRefreshHandler(U)});var h=!1,m=null,s=$(w),i=$(R),b=G(C);if(s.forEach(function(d){var p=b.get(d);if(p===void 0)throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");if(w.has(d),F!==null&&F.has(d)){var g=F.get(d);try{p.scheduleRoot(d,g)}catch(y){h||(h=!0,m=y)}}}),i.forEach(function(d){var p=b.get(d);if(p===void 0)throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");R.has(d);try{p.scheduleRefresh(d,n)}catch(g){h||(h=!0,m=g)}}),h)throw m;return n}finally{T=!1}}function P(e,r){{if(e===null||typeof e!="function"&&typeof e!="object"||o.has(e))return;var t=v.get(r);if(t===void 0?(t={current:e},v.set(r,t)):S.push([t,e]),o.set(e,t),typeof e=="object"&&e!==null)switch(K(e,"$$typeof")){case f:P(e.render,r+"$render");break;case c:P(e.type,r+"$type");break}}}function L(e,r){var t=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!1,n=arguments.length>3?arguments[3]:void 0;if(u.has(e)||u.set(e,{forceReset:t,ownKey:r,fullKey:null,getCustomHooks:n||function(){return[]}}),typeof e=="object"&&e!==null)switch(K(e,"$$typeof")){case f:L(e.render,r,t,n);break;case c:L(e.type,r,t,n);break}}function j(e){{var r=u.get(e);r!==void 0&&E(r)}}function q(e){return v.get(e)}function z(e){return o.get(e)}function N(e){{var r=new Set;return R.forEach(function(t){var n=C.get(t);if(n===void 0)throw new Error("Could not find helpers for a root. This is a bug in React Refresh.");var h=n.findHostInstancesForRefresh(t,e);h.forEach(function(m){r.add(m)})}),r}}function V(e){{var r=e.__REACT_DEVTOOLS_GLOBAL_HOOK__;if(r===void 0){var t=0;e.__REACT_DEVTOOLS_GLOBAL_HOOK__=r={renderers:new Map,supportsFiber:!0,inject:function(s){return t++},onScheduleFiberRoot:function(s,i,b){},onCommitFiberRoot:function(s,i,b,d){},onCommitFiberUnmount:function(){}}}if(r.isDisabled){console.warn("Something has shimmed the React DevTools global hook (__REACT_DEVTOOLS_GLOBAL_HOOK__). Fast Refresh is not compatible with this shim and will be disabled.");return}var n=r.inject;r.inject=function(s){var i=n.apply(this,arguments);return typeof s.scheduleRefresh=="function"&&typeof s.setRefreshHandler=="function"&&O.set(i,s),i},r.renderers.forEach(function(s,i){typeof s.scheduleRefresh=="function"&&typeof s.setRefreshHandler=="function"&&O.set(i,s)});var h=r.onCommitFiberRoot,m=r.onScheduleFiberRoot||function(){};r.onScheduleFiberRoot=function(s,i,b){return T||(w.delete(i),F!==null&&F.set(i,b)),m.apply(this,arguments)},r.onCommitFiberRoot=function(s,i,b,d){var p=O.get(s);if(p!==void 0){C.set(i,p);var g=i.current,y=g.alternate;if(y!==null){var A=y.memoizedState!=null&&y.memoizedState.element!=null&&R.has(i),B=g.memoizedState!=null&&g.memoizedState.element!=null;!A&&B?(R.add(i),w.delete(i)):A&&B||(A&&!B?(R.delete(i),d?w.add(i):C.delete(i)):!A&&!B&&d&&w.add(i))}else R.add(i)}return h.apply(this,arguments)}}}function k(){return!1}function Y(){return R.size}function x(){{var e,r,t=!1;return function(n,h,m,s){if(typeof h=="string")return e||(e=n,r=typeof s=="function"),n!=null&&(typeof n=="function"||typeof n=="object")&&L(n,h,m,s),n;!t&&r&&(t=!0,j(e))}}}function Z(e){switch(typeof e){case"function":{if(e.prototype!=null){if(e.prototype.isReactComponent)return!0;var r=Object.getOwnPropertyNames(e.prototype);if(r.length>1||r[0]!=="constructor"||e.prototype.__proto__!==Object.prototype)return!1}var t=e.name||e.displayName;return typeof t=="string"&&/^[A-Z]/.test(t)}case"object":{if(e!=null)switch(K(e,"$$typeof")){case f:case c:return!0;default:return!1}return!1}default:return!1}}l._getMountedRootCount=Y,l.collectCustomHooksForSignature=j,l.createSignatureFunctionForTransform=x,l.findAffectedHostInstances=N,l.getFamilyByID=q,l.getFamilyByType=z,l.hasUnrecoverableErrors=k,l.injectIntoGlobalHook=V,l.isLikelyComponentType=Z,l.performReactRefresh=W,l.register=P,l.setSignature=L})();function J(f,c){let a;return()=>{clearTimeout(a),a=setTimeout(f,c)}}const Q=J(l.performReactRefresh,16);function X(f,c){for(const a in c){if(a==="__esModule")continue;const v=c[a];l.isLikelyComponentType(v)&&l.register(v,f+" export "+a)}}function ee(f,c){if(!M(f,o=>o in c))return"Could not Fast Refresh (export removed)";if(!M(c,o=>o in f))return"Could not Fast Refresh (new export)";let a=!1;const v=M(c,(o,u)=>(a=!0,l.isLikelyComponentType(u)?!0:f[o]===c[o]));if(a&&v)Q();else return"Could not Fast Refresh. Learn more at https://github.com/vitejs/vite-plugin-react/tree/main/packages/plugin-react#consistent-components-exports"}function M(f,c){for(const a in f){if(a==="__esModule")continue;const v=Object.getOwnPropertyDescriptor(f,a);if(v&&v.get||!c(a,f[a]))return!1}return!0}function re(f){return import(f)}l.__hmr_import=re;l.registerExportsForReactRefresh=X;l.validateRefreshBoundaryAndEnqueueUpdate=ee;l.injectIntoGlobalHook(window);window.$RefreshReg$=()=>{};window.$RefreshSig$=()=>f=>f;window.__vite_plugin_react_preamble_installed__=!0;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
