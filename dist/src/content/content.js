(function(){"use strict";var J={exports:{}};(function(L){function x(e,t){if(t&&t.documentElement)e=t,t=arguments[2];else if(!e||!e.documentElement)throw new Error("First argument to Readability constructor should be a document object.");if(t=t||{},this._doc=e,this._docJSDOMParser=this._doc.firstChild.__JSDOMParser__,this._articleTitle=null,this._articleByline=null,this._articleDir=null,this._articleSiteName=null,this._attempts=[],this._metadata={},this._debug=!!t.debug,this._maxElemsToParse=t.maxElemsToParse||this.DEFAULT_MAX_ELEMS_TO_PARSE,this._nbTopCandidates=t.nbTopCandidates||this.DEFAULT_N_TOP_CANDIDATES,this._charThreshold=t.charThreshold||this.DEFAULT_CHAR_THRESHOLD,this._classesToPreserve=this.CLASSES_TO_PRESERVE.concat(t.classesToPreserve||[]),this._keepClasses=!!t.keepClasses,this._serializer=t.serializer||function(i){return i.innerHTML},this._disableJSONLD=!!t.disableJSONLD,this._allowedVideoRegex=t.allowedVideoRegex||this.REGEXPS.videos,this._linkDensityModifier=t.linkDensityModifier||0,this._flags=this.FLAG_STRIP_UNLIKELYS|this.FLAG_WEIGHT_CLASSES|this.FLAG_CLEAN_CONDITIONALLY,this._debug){let i=function(r){if(r.nodeType==r.TEXT_NODE)return`${r.nodeName} ("${r.textContent}")`;let l=Array.from(r.attributes||[],function(s){return`${s.name}="${s.value}"`}).join(" ");return`<${r.localName} ${l}>`};this.log=function(){if(typeof console<"u"){let l=Array.from(arguments,s=>s&&s.nodeType==this.ELEMENT_NODE?i(s):s);l.unshift("Reader: (Readability)"),console.log(...l)}else if(typeof dump<"u"){var r=Array.prototype.map.call(arguments,function(l){return l&&l.nodeName?i(l):l}).join(" ");dump("Reader: (Readability) "+r+`
`)}}}else this.log=function(){}}x.prototype={FLAG_STRIP_UNLIKELYS:1,FLAG_WEIGHT_CLASSES:2,FLAG_CLEAN_CONDITIONALLY:4,ELEMENT_NODE:1,TEXT_NODE:3,DEFAULT_MAX_ELEMS_TO_PARSE:0,DEFAULT_N_TOP_CANDIDATES:5,DEFAULT_TAGS_TO_SCORE:"section,h2,h3,h4,h5,h6,p,td,pre".toUpperCase().split(","),DEFAULT_CHAR_THRESHOLD:500,REGEXPS:{unlikelyCandidates:/-ad-|ai2html|banner|breadcrumbs|combx|comment|community|cover-wrap|disqus|extra|footer|gdpr|header|legends|menu|related|remark|replies|rss|shoutbox|sidebar|skyscraper|social|sponsor|supplemental|ad-break|agegate|pagination|pager|popup|yom-remote/i,okMaybeItsACandidate:/and|article|body|column|content|main|shadow/i,positive:/article|body|content|entry|hentry|h-entry|main|page|pagination|post|text|blog|story/i,negative:/-ad-|hidden|^hid$| hid$| hid |^hid |banner|combx|comment|com-|contact|footer|gdpr|masthead|media|meta|outbrain|promo|related|scroll|share|shoutbox|sidebar|skyscraper|sponsor|shopping|tags|widget/i,extraneous:/print|archive|comment|discuss|e[\-]?mail|share|reply|all|login|sign|single|utility/i,byline:/byline|author|dateline|writtenby|p-author/i,replaceFonts:/<(\/?)font[^>]*>/gi,normalize:/\s{2,}/g,videos:/\/\/(www\.)?((dailymotion|youtube|youtube-nocookie|player\.vimeo|v\.qq)\.com|(archive|upload\.wikimedia)\.org|player\.twitch\.tv)/i,shareElements:/(\b|_)(share|sharedaddy)(\b|_)/i,nextLink:/(next|weiter|continue|>([^\|]|$)|»([^\|]|$))/i,prevLink:/(prev|earl|old|new|<|«)/i,tokenize:/\W+/g,whitespace:/^\s*$/,hasContent:/\S$/,hashUrl:/^#.+/,srcsetUrl:/(\S+)(\s+[\d.]+[xw])?(\s*(?:,|$))/g,b64DataUrl:/^data:\s*([^\s;,]+)\s*;\s*base64\s*,/i,commas:/\u002C|\u060C|\uFE50|\uFE10|\uFE11|\u2E41|\u2E34|\u2E32|\uFF0C/g,jsonLdArticleTypes:/^Article|AdvertiserContentArticle|NewsArticle|AnalysisNewsArticle|AskPublicNewsArticle|BackgroundNewsArticle|OpinionNewsArticle|ReportageNewsArticle|ReviewNewsArticle|Report|SatiricalArticle|ScholarlyArticle|MedicalScholarlyArticle|SocialMediaPosting|BlogPosting|LiveBlogPosting|DiscussionForumPosting|TechArticle|APIReference$/,adWords:/^(ad(vertising|vertisement)?|pub(licité)?|werb(ung)?|广告|Реклама|Anuncio)$/iu,loadingWords:/^((loading|正在加载|Загрузка|chargement|cargando)(…|\.\.\.)?)$/iu},UNLIKELY_ROLES:["menu","menubar","complementary","navigation","alert","alertdialog","dialog"],DIV_TO_P_ELEMS:new Set(["BLOCKQUOTE","DL","DIV","IMG","OL","P","PRE","TABLE","UL"]),ALTER_TO_DIV_EXCEPTIONS:["DIV","ARTICLE","SECTION","P","OL","UL"],PRESENTATIONAL_ATTRIBUTES:["align","background","bgcolor","border","cellpadding","cellspacing","frame","hspace","rules","style","valign","vspace"],DEPRECATED_SIZE_ATTRIBUTE_ELEMS:["TABLE","TH","TD","HR","PRE"],PHRASING_ELEMS:["ABBR","AUDIO","B","BDO","BR","BUTTON","CITE","CODE","DATA","DATALIST","DFN","EM","EMBED","I","IMG","INPUT","KBD","LABEL","MARK","MATH","METER","NOSCRIPT","OBJECT","OUTPUT","PROGRESS","Q","RUBY","SAMP","SCRIPT","SELECT","SMALL","SPAN","STRONG","SUB","SUP","TEXTAREA","TIME","VAR","WBR"],CLASSES_TO_PRESERVE:["page"],HTML_ESCAPE_MAP:{lt:"<",gt:">",amp:"&",quot:'"',apos:"'"},_postProcessContent(e){this._fixRelativeUris(e),this._simplifyNestedElements(e),this._keepClasses||this._cleanClasses(e)},_removeNodes(e,t){if(this._docJSDOMParser&&e._isLiveNodeList)throw new Error("Do not pass live node lists to _removeNodes");for(var i=e.length-1;i>=0;i--){var r=e[i],l=r.parentNode;l&&(!t||t.call(this,r,i,e))&&l.removeChild(r)}},_replaceNodeTags(e,t){if(this._docJSDOMParser&&e._isLiveNodeList)throw new Error("Do not pass live node lists to _replaceNodeTags");for(const i of e)this._setNodeTag(i,t)},_forEachNode(e,t){Array.prototype.forEach.call(e,t,this)},_findNode(e,t){return Array.prototype.find.call(e,t,this)},_someNode(e,t){return Array.prototype.some.call(e,t,this)},_everyNode(e,t){return Array.prototype.every.call(e,t,this)},_getAllNodesWithTag(e,t){return e.querySelectorAll?e.querySelectorAll(t.join(",")):[].concat.apply([],t.map(function(i){var r=e.getElementsByTagName(i);return Array.isArray(r)?r:Array.from(r)}))},_cleanClasses(e){var t=this._classesToPreserve,i=(e.getAttribute("class")||"").split(/\s+/).filter(r=>t.includes(r)).join(" ");for(i?e.setAttribute("class",i):e.removeAttribute("class"),e=e.firstElementChild;e;e=e.nextElementSibling)this._cleanClasses(e)},_isUrl(e){try{return new URL(e),!0}catch{return!1}},_fixRelativeUris(e){var t=this._doc.baseURI,i=this._doc.documentURI;function r(a){if(t==i&&a.charAt(0)=="#")return a;try{return new URL(a,t).href}catch{}return a}var l=this._getAllNodesWithTag(e,["a"]);this._forEachNode(l,function(a){var o=a.getAttribute("href");if(o)if(o.indexOf("javascript:")===0)if(a.childNodes.length===1&&a.childNodes[0].nodeType===this.TEXT_NODE){var c=this._doc.createTextNode(a.textContent);a.parentNode.replaceChild(c,a)}else{for(var n=this._doc.createElement("span");a.firstChild;)n.appendChild(a.firstChild);a.parentNode.replaceChild(n,a)}else a.setAttribute("href",r(o))});var s=this._getAllNodesWithTag(e,["img","picture","figure","video","audio","source"]);this._forEachNode(s,function(a){var o=a.getAttribute("src"),c=a.getAttribute("poster"),n=a.getAttribute("srcset");if(o&&a.setAttribute("src",r(o)),c&&a.setAttribute("poster",r(c)),n){var h=n.replace(this.REGEXPS.srcsetUrl,function(f,_,v,T){return r(_)+(v||"")+T});a.setAttribute("srcset",h)}})},_simplifyNestedElements(e){for(var t=e;t;){if(t.parentNode&&["DIV","SECTION"].includes(t.tagName)&&!(t.id&&t.id.startsWith("readability"))){if(this._isElementWithoutContent(t)){t=this._removeAndGetNext(t);continue}else if(this._hasSingleTagInsideElement(t,"DIV")||this._hasSingleTagInsideElement(t,"SECTION")){for(var i=t.children[0],r=0;r<t.attributes.length;r++)i.setAttributeNode(t.attributes[r].cloneNode());t.parentNode.replaceChild(i,t),t=i;continue}}t=this._getNextNode(t)}},_getArticleTitle(){var e=this._doc,t="",i="";try{t=i=e.title.trim(),typeof t!="string"&&(t=i=this._getInnerText(e.getElementsByTagName("title")[0]))}catch{}var r=!1;function l(h){return h.split(/\s+/).length}if(/ [\|\-\\\/>»] /.test(t)){r=/ [\\\/>»] /.test(t);let h=Array.from(i.matchAll(/ [\|\-\\\/>»] /gi));t=i.substring(0,h.pop().index),l(t)<3&&(t=i.replace(/^[^\|\-\\\/>»]*[\|\-\\\/>»]/gi,""))}else if(t.includes(": ")){var s=this._getAllNodesWithTag(e,["h1","h2"]),a=t.trim(),o=this._someNode(s,function(h){return h.textContent.trim()===a});o||(t=i.substring(i.lastIndexOf(":")+1),l(t)<3?t=i.substring(i.indexOf(":")+1):l(i.substr(0,i.indexOf(":")))>5&&(t=i))}else if(t.length>150||t.length<15){var c=e.getElementsByTagName("h1");c.length===1&&(t=this._getInnerText(c[0]))}t=t.trim().replace(this.REGEXPS.normalize," ");var n=l(t);return n<=4&&(!r||n!=l(i.replace(/[\|\-\\\/>»]+/g,""))-1)&&(t=i),t},_prepDocument(){var e=this._doc;this._removeNodes(this._getAllNodesWithTag(e,["style"])),e.body&&this._replaceBrs(e.body),this._replaceNodeTags(this._getAllNodesWithTag(e,["font"]),"SPAN")},_nextNode(e){for(var t=e;t&&t.nodeType!=this.ELEMENT_NODE&&this.REGEXPS.whitespace.test(t.textContent);)t=t.nextSibling;return t},_replaceBrs(e){this._forEachNode(this._getAllNodesWithTag(e,["br"]),function(t){for(var i=t.nextSibling,r=!1;(i=this._nextNode(i))&&i.tagName=="BR";){r=!0;var l=i.nextSibling;i.remove(),i=l}if(r){var s=this._doc.createElement("p");for(t.parentNode.replaceChild(s,t),i=s.nextSibling;i;){if(i.tagName=="BR"){var a=this._nextNode(i.nextSibling);if(a&&a.tagName=="BR")break}if(!this._isPhrasingContent(i))break;var o=i.nextSibling;s.appendChild(i),i=o}for(;s.lastChild&&this._isWhitespace(s.lastChild);)s.lastChild.remove();s.parentNode.tagName==="P"&&this._setNodeTag(s.parentNode,"DIV")}})},_setNodeTag(e,t){if(this.log("_setNodeTag",e,t),this._docJSDOMParser)return e.localName=t.toLowerCase(),e.tagName=t.toUpperCase(),e;for(var i=e.ownerDocument.createElement(t);e.firstChild;)i.appendChild(e.firstChild);e.parentNode.replaceChild(i,e),e.readability&&(i.readability=e.readability);for(var r=0;r<e.attributes.length;r++)i.setAttributeNode(e.attributes[r].cloneNode());return i},_prepArticle(e){this._cleanStyles(e),this._markDataTables(e),this._fixLazyImages(e),this._cleanConditionally(e,"form"),this._cleanConditionally(e,"fieldset"),this._clean(e,"object"),this._clean(e,"embed"),this._clean(e,"footer"),this._clean(e,"link"),this._clean(e,"aside");var t=this.DEFAULT_CHAR_THRESHOLD;this._forEachNode(e.children,function(i){this._cleanMatchedNodes(i,function(r,l){return this.REGEXPS.shareElements.test(l)&&r.textContent.length<t})}),this._clean(e,"iframe"),this._clean(e,"input"),this._clean(e,"textarea"),this._clean(e,"select"),this._clean(e,"button"),this._cleanHeaders(e),this._cleanConditionally(e,"table"),this._cleanConditionally(e,"ul"),this._cleanConditionally(e,"div"),this._replaceNodeTags(this._getAllNodesWithTag(e,["h1"]),"h2"),this._removeNodes(this._getAllNodesWithTag(e,["p"]),function(i){var r=this._getAllNodesWithTag(i,["img","embed","object","iframe"]).length;return r===0&&!this._getInnerText(i,!1)}),this._forEachNode(this._getAllNodesWithTag(e,["br"]),function(i){var r=this._nextNode(i.nextSibling);r&&r.tagName=="P"&&i.remove()}),this._forEachNode(this._getAllNodesWithTag(e,["table"]),function(i){var r=this._hasSingleTagInsideElement(i,"TBODY")?i.firstElementChild:i;if(this._hasSingleTagInsideElement(r,"TR")){var l=r.firstElementChild;if(this._hasSingleTagInsideElement(l,"TD")){var s=l.firstElementChild;s=this._setNodeTag(s,this._everyNode(s.childNodes,this._isPhrasingContent)?"P":"DIV"),i.parentNode.replaceChild(s,i)}}})},_initializeNode(e){switch(e.readability={contentScore:0},e.tagName){case"DIV":e.readability.contentScore+=5;break;case"PRE":case"TD":case"BLOCKQUOTE":e.readability.contentScore+=3;break;case"ADDRESS":case"OL":case"UL":case"DL":case"DD":case"DT":case"LI":case"FORM":e.readability.contentScore-=3;break;case"H1":case"H2":case"H3":case"H4":case"H5":case"H6":case"TH":e.readability.contentScore-=5;break}e.readability.contentScore+=this._getClassWeight(e)},_removeAndGetNext(e){var t=this._getNextNode(e,!0);return e.remove(),t},_getNextNode(e,t){if(!t&&e.firstElementChild)return e.firstElementChild;if(e.nextElementSibling)return e.nextElementSibling;do e=e.parentNode;while(e&&!e.nextElementSibling);return e&&e.nextElementSibling},_textSimilarity(e,t){var i=e.toLowerCase().split(this.REGEXPS.tokenize).filter(Boolean),r=t.toLowerCase().split(this.REGEXPS.tokenize).filter(Boolean);if(!i.length||!r.length)return 0;var l=r.filter(a=>!i.includes(a)),s=l.join(" ").length/r.join(" ").length;return 1-s},_isValidByline(e,t){var i=e.getAttribute("rel"),r=e.getAttribute("itemprop"),l=e.textContent.trim().length;return(i==="author"||r&&r.includes("author")||this.REGEXPS.byline.test(t))&&!!l&&l<100},_getNodeAncestors(e,t){t=t||0;for(var i=0,r=[];e.parentNode&&(r.push(e.parentNode),!(t&&++i===t));)e=e.parentNode;return r},_grabArticle(e){this.log("**** grabArticle ****");var t=this._doc,i=e!==null;if(e=e||this._doc.body,!e)return this.log("No body found in document. Abort."),null;for(var r=e.innerHTML;;){this.log("Starting grabArticle loop");var l=this._flagIsActive(this.FLAG_STRIP_UNLIKELYS),s=[],a=this._doc.documentElement;let ae=!0;for(;a;){a.tagName==="HTML"&&(this._articleLang=a.getAttribute("lang"));var o=a.className+" "+a.id;if(!this._isProbablyVisible(a)){this.log("Removing hidden node - "+o),a=this._removeAndGetNext(a);continue}if(a.getAttribute("aria-modal")=="true"&&a.getAttribute("role")=="dialog"){a=this._removeAndGetNext(a);continue}if(!this._articleByline&&!this._metadata.byline&&this._isValidByline(a,o)){for(var c=this._getNextNode(a,!0),n=this._getNextNode(a),h=null;n&&n!=c;){var f=n.getAttribute("itemprop");if(f&&f.includes("name")){h=n;break}else n=this._getNextNode(n)}this._articleByline=(h??a).textContent.trim(),a=this._removeAndGetNext(a);continue}if(ae&&this._headerDuplicatesTitle(a)){this.log("Removing header: ",a.textContent.trim(),this._articleTitle.trim()),ae=!1,a=this._removeAndGetNext(a);continue}if(l){if(this.REGEXPS.unlikelyCandidates.test(o)&&!this.REGEXPS.okMaybeItsACandidate.test(o)&&!this._hasAncestorTag(a,"table")&&!this._hasAncestorTag(a,"code")&&a.tagName!=="BODY"&&a.tagName!=="A"){this.log("Removing unlikely candidate - "+o),a=this._removeAndGetNext(a);continue}if(this.UNLIKELY_ROLES.includes(a.getAttribute("role"))){this.log("Removing content with role "+a.getAttribute("role")+" - "+o),a=this._removeAndGetNext(a);continue}}if((a.tagName==="DIV"||a.tagName==="SECTION"||a.tagName==="HEADER"||a.tagName==="H1"||a.tagName==="H2"||a.tagName==="H3"||a.tagName==="H4"||a.tagName==="H5"||a.tagName==="H6")&&this._isElementWithoutContent(a)){a=this._removeAndGetNext(a);continue}if(this.DEFAULT_TAGS_TO_SCORE.includes(a.tagName)&&s.push(a),a.tagName==="DIV"){for(var _=null,v=a.firstChild;v;){var T=v.nextSibling;if(this._isPhrasingContent(v))_!==null?_.appendChild(v):this._isWhitespace(v)||(_=t.createElement("p"),a.replaceChild(_,v),_.appendChild(v));else if(_!==null){for(;_.lastChild&&this._isWhitespace(_.lastChild);)_.lastChild.remove();_=null}v=T}if(this._hasSingleTagInsideElement(a,"P")&&this._getLinkDensity(a)<.25){var p=a.children[0];a.parentNode.replaceChild(p,a),a=p,s.push(a)}else this._hasChildBlockElement(a)||(a=this._setNodeTag(a,"P"),s.push(a))}a=this._getNextNode(a)}var y=[];this._forEachNode(s,function(A){if(!(!A.parentNode||typeof A.parentNode.tagName>"u")){var S=this._getInnerText(A);if(!(S.length<25)){var le=this._getNodeAncestors(A,5);if(le.length!==0){var O=0;O+=1,O+=S.split(this.REGEXPS.commas).length,O+=Math.min(Math.floor(S.length/100),3),this._forEachNode(le,function(D,q){if(!(!D.tagName||!D.parentNode||typeof D.parentNode.tagName>"u")){if(typeof D.readability>"u"&&(this._initializeNode(D),y.push(D)),q===0)var K=1;else q===1?K=2:K=q*3;D.readability.contentScore+=O/K}})}}}});for(var d=[],R=0,w=y.length;R<w;R+=1){var b=y[R],C=b.readability.contentScore*(1-this._getLinkDensity(b));b.readability.contentScore=C,this.log("Candidate:",b,"with score "+C);for(var I=0;I<this._nbTopCandidates;I++){var B=d[I];if(!B||C>B.readability.contentScore){d.splice(I,0,b),d.length>this._nbTopCandidates&&d.pop();break}}}var u=d[0]||null,P=!1,g;if(u===null||u.tagName==="BODY"){for(u=t.createElement("DIV"),P=!0;e.firstChild;)this.log("Moving child out:",e.firstChild),u.appendChild(e.firstChild);e.appendChild(u),this._initializeNode(u)}else if(u){for(var N=[],M=1;M<d.length;M++)d[M].readability.contentScore/u.readability.contentScore>=.75&&N.push(this._getNodeAncestors(d[M]));var W=3;if(N.length>=W)for(g=u.parentNode;g.tagName!=="BODY";){for(var X=0,$=0;$<N.length&&X<W;$++)X+=Number(N[$].includes(g));if(X>=W){u=g;break}g=g.parentNode}u.readability||this._initializeNode(u),g=u.parentNode;for(var F=u.readability.contentScore,fe=F/3;g.tagName!=="BODY";){if(!g.readability){g=g.parentNode;continue}var Z=g.readability.contentScore;if(Z<fe)break;if(Z>F){u=g;break}F=g.readability.contentScore,g=g.parentNode}for(g=u.parentNode;g.tagName!="BODY"&&g.children.length==1;)u=g,g=u.parentNode;u.readability||this._initializeNode(u)}var E=t.createElement("DIV");i&&(E.id="readability-content");var _e=Math.max(10,u.readability.contentScore*.2);g=u.parentNode;for(var V=g.children,k=0,ee=V.length;k<ee;k++){var m=V[k],G=!1;if(this.log("Looking at sibling node:",m,m.readability?"with score "+m.readability.contentScore:""),this.log("Sibling has score",m.readability?m.readability.contentScore:"Unknown"),m===u)G=!0;else{var te=0;if(m.className===u.className&&u.className!==""&&(te+=u.readability.contentScore*.2),m.readability&&m.readability.contentScore+te>=_e)G=!0;else if(m.nodeName==="P"){var ie=this._getLinkDensity(m),re=this._getInnerText(m),j=re.length;(j>80&&ie<.25||j<80&&j>0&&ie===0&&re.search(/\.( |$)/)!==-1)&&(G=!0)}}G&&(this.log("Appending node:",m),this.ALTER_TO_DIV_EXCEPTIONS.includes(m.nodeName)||(this.log("Altering sibling:",m,"to div."),m=this._setNodeTag(m,"DIV")),E.appendChild(m),V=g.children,k-=1,ee-=1)}if(this._debug&&this.log("Article content pre-prep: "+E.innerHTML),this._prepArticle(E),this._debug&&this.log("Article content post-prep: "+E.innerHTML),P)u.id="readability-page-1",u.className="page";else{var H=t.createElement("DIV");for(H.id="readability-page-1",H.className="page";E.firstChild;)H.appendChild(E.firstChild);E.appendChild(H)}this._debug&&this.log("Article content after paging: "+E.innerHTML);var Y=!0,se=this._getInnerText(E,!0).length;if(se<this._charThreshold)if(Y=!1,e.innerHTML=r,this._attempts.push({articleContent:E,textLength:se}),this._flagIsActive(this.FLAG_STRIP_UNLIKELYS))this._removeFlag(this.FLAG_STRIP_UNLIKELYS);else if(this._flagIsActive(this.FLAG_WEIGHT_CLASSES))this._removeFlag(this.FLAG_WEIGHT_CLASSES);else if(this._flagIsActive(this.FLAG_CLEAN_CONDITIONALLY))this._removeFlag(this.FLAG_CLEAN_CONDITIONALLY);else{if(this._attempts.sort(function(A,S){return S.textLength-A.textLength}),!this._attempts[0].textLength)return null;E=this._attempts[0].articleContent,Y=!0}if(Y){var me=[g,u].concat(this._getNodeAncestors(g));return this._someNode(me,function(A){if(!A.tagName)return!1;var S=A.getAttribute("dir");return S?(this._articleDir=S,!0):!1}),E}}},_unescapeHtmlEntities(e){if(!e)return e;var t=this.HTML_ESCAPE_MAP;return e.replace(/&(quot|amp|apos|lt|gt);/g,function(i,r){return t[r]}).replace(/&#(?:x([0-9a-f]+)|([0-9]+));/gi,function(i,r,l){var s=parseInt(r||l,r?16:10);return(s==0||s>1114111||s>=55296&&s<=57343)&&(s=65533),String.fromCodePoint(s)})},_getJSONLD(e){var t=this._getAllNodesWithTag(e,["script"]),i;return this._forEachNode(t,function(r){if(!i&&r.getAttribute("type")==="application/ld+json")try{var l=r.textContent.replace(/^\s*<!\[CDATA\[|\]\]>\s*$/g,""),s=JSON.parse(l);if(Array.isArray(s)&&(s=s.find(f=>f["@type"]&&f["@type"].match(this.REGEXPS.jsonLdArticleTypes)),!s))return;var a=/^https?\:\/\/schema\.org\/?$/,o=typeof s["@context"]=="string"&&s["@context"].match(a)||typeof s["@context"]=="object"&&typeof s["@context"]["@vocab"]=="string"&&s["@context"]["@vocab"].match(a);if(!o||(!s["@type"]&&Array.isArray(s["@graph"])&&(s=s["@graph"].find(f=>(f["@type"]||"").match(this.REGEXPS.jsonLdArticleTypes))),!s||!s["@type"]||!s["@type"].match(this.REGEXPS.jsonLdArticleTypes)))return;if(i={},typeof s.name=="string"&&typeof s.headline=="string"&&s.name!==s.headline){var c=this._getArticleTitle(),n=this._textSimilarity(s.name,c)>.75,h=this._textSimilarity(s.headline,c)>.75;h&&!n?i.title=s.headline:i.title=s.name}else typeof s.name=="string"?i.title=s.name.trim():typeof s.headline=="string"&&(i.title=s.headline.trim());s.author&&(typeof s.author.name=="string"?i.byline=s.author.name.trim():Array.isArray(s.author)&&s.author[0]&&typeof s.author[0].name=="string"&&(i.byline=s.author.filter(function(f){return f&&typeof f.name=="string"}).map(function(f){return f.name.trim()}).join(", "))),typeof s.description=="string"&&(i.excerpt=s.description.trim()),s.publisher&&typeof s.publisher.name=="string"&&(i.siteName=s.publisher.name.trim()),typeof s.datePublished=="string"&&(i.datePublished=s.datePublished.trim())}catch(f){this.log(f.message)}}),i||{}},_getArticleMetadata(e){var t={},i={},r=this._doc.getElementsByTagName("meta"),l=/\s*(article|dc|dcterm|og|twitter)\s*:\s*(author|creator|description|published_time|title|site_name)\s*/gi,s=/^\s*(?:(dc|dcterm|og|twitter|parsely|weibo:(article|webpage))\s*[-\.:]\s*)?(author|creator|pub-date|description|title|site_name)\s*$/i;this._forEachNode(r,function(o){var c=o.getAttribute("name"),n=o.getAttribute("property"),h=o.getAttribute("content");if(h){var f=null,_=null;n&&(f=n.match(l),f&&(_=f[0].toLowerCase().replace(/\s/g,""),i[_]=h.trim())),!f&&c&&s.test(c)&&(_=c,h&&(_=_.toLowerCase().replace(/\s/g,"").replace(/\./g,":"),i[_]=h.trim()))}}),t.title=e.title||i["dc:title"]||i["dcterm:title"]||i["og:title"]||i["weibo:article:title"]||i["weibo:webpage:title"]||i.title||i["twitter:title"]||i["parsely-title"],t.title||(t.title=this._getArticleTitle());const a=typeof i["article:author"]=="string"&&!this._isUrl(i["article:author"])?i["article:author"]:void 0;return t.byline=e.byline||i["dc:creator"]||i["dcterm:creator"]||i.author||i["parsely-author"]||a,t.excerpt=e.excerpt||i["dc:description"]||i["dcterm:description"]||i["og:description"]||i["weibo:article:description"]||i["weibo:webpage:description"]||i.description||i["twitter:description"],t.siteName=e.siteName||i["og:site_name"],t.publishedTime=e.datePublished||i["article:published_time"]||i["parsely-pub-date"]||null,t.title=this._unescapeHtmlEntities(t.title),t.byline=this._unescapeHtmlEntities(t.byline),t.excerpt=this._unescapeHtmlEntities(t.excerpt),t.siteName=this._unescapeHtmlEntities(t.siteName),t.publishedTime=this._unescapeHtmlEntities(t.publishedTime),t},_isSingleImage(e){for(;e;){if(e.tagName==="IMG")return!0;if(e.children.length!==1||e.textContent.trim()!=="")return!1;e=e.children[0]}return!1},_unwrapNoscriptImages(e){var t=Array.from(e.getElementsByTagName("img"));this._forEachNode(t,function(r){for(var l=0;l<r.attributes.length;l++){var s=r.attributes[l];switch(s.name){case"src":case"srcset":case"data-src":case"data-srcset":return}if(/\.(jpg|jpeg|png|webp)/i.test(s.value))return}r.remove()});var i=Array.from(e.getElementsByTagName("noscript"));this._forEachNode(i,function(r){if(this._isSingleImage(r)){var l=e.createElement("div");l.innerHTML=r.innerHTML;var s=r.previousElementSibling;if(s&&this._isSingleImage(s)){var a=s;a.tagName!=="IMG"&&(a=s.getElementsByTagName("img")[0]);for(var o=l.getElementsByTagName("img")[0],c=0;c<a.attributes.length;c++){var n=a.attributes[c];if(n.value!==""&&(n.name==="src"||n.name==="srcset"||/\.(jpg|jpeg|png|webp)/i.test(n.value))){if(o.getAttribute(n.name)===n.value)continue;var h=n.name;o.hasAttribute(h)&&(h="data-old-"+h),o.setAttribute(h,n.value)}}r.parentNode.replaceChild(l.firstElementChild,s)}}})},_removeScripts(e){this._removeNodes(this._getAllNodesWithTag(e,["script","noscript"]))},_hasSingleTagInsideElement(e,t){return e.children.length!=1||e.children[0].tagName!==t?!1:!this._someNode(e.childNodes,function(i){return i.nodeType===this.TEXT_NODE&&this.REGEXPS.hasContent.test(i.textContent)})},_isElementWithoutContent(e){return e.nodeType===this.ELEMENT_NODE&&!e.textContent.trim().length&&(!e.children.length||e.children.length==e.getElementsByTagName("br").length+e.getElementsByTagName("hr").length)},_hasChildBlockElement(e){return this._someNode(e.childNodes,function(t){return this.DIV_TO_P_ELEMS.has(t.tagName)||this._hasChildBlockElement(t)})},_isPhrasingContent(e){return e.nodeType===this.TEXT_NODE||this.PHRASING_ELEMS.includes(e.tagName)||(e.tagName==="A"||e.tagName==="DEL"||e.tagName==="INS")&&this._everyNode(e.childNodes,this._isPhrasingContent)},_isWhitespace(e){return e.nodeType===this.TEXT_NODE&&e.textContent.trim().length===0||e.nodeType===this.ELEMENT_NODE&&e.tagName==="BR"},_getInnerText(e,t){t=typeof t>"u"?!0:t;var i=e.textContent.trim();return t?i.replace(this.REGEXPS.normalize," "):i},_getCharCount(e,t){return t=t||",",this._getInnerText(e).split(t).length-1},_cleanStyles(e){if(!(!e||e.tagName.toLowerCase()==="svg")){for(var t=0;t<this.PRESENTATIONAL_ATTRIBUTES.length;t++)e.removeAttribute(this.PRESENTATIONAL_ATTRIBUTES[t]);this.DEPRECATED_SIZE_ATTRIBUTE_ELEMS.includes(e.tagName)&&(e.removeAttribute("width"),e.removeAttribute("height"));for(var i=e.firstElementChild;i!==null;)this._cleanStyles(i),i=i.nextElementSibling}},_getLinkDensity(e){var t=this._getInnerText(e).length;if(t===0)return 0;var i=0;return this._forEachNode(e.getElementsByTagName("a"),function(r){var l=r.getAttribute("href"),s=l&&this.REGEXPS.hashUrl.test(l)?.3:1;i+=this._getInnerText(r).length*s}),i/t},_getClassWeight(e){if(!this._flagIsActive(this.FLAG_WEIGHT_CLASSES))return 0;var t=0;return typeof e.className=="string"&&e.className!==""&&(this.REGEXPS.negative.test(e.className)&&(t-=25),this.REGEXPS.positive.test(e.className)&&(t+=25)),typeof e.id=="string"&&e.id!==""&&(this.REGEXPS.negative.test(e.id)&&(t-=25),this.REGEXPS.positive.test(e.id)&&(t+=25)),t},_clean(e,t){var i=["object","embed","iframe"].includes(t);this._removeNodes(this._getAllNodesWithTag(e,[t]),function(r){if(i){for(var l=0;l<r.attributes.length;l++)if(this._allowedVideoRegex.test(r.attributes[l].value))return!1;if(r.tagName==="object"&&this._allowedVideoRegex.test(r.innerHTML))return!1}return!0})},_hasAncestorTag(e,t,i,r){i=i||3,t=t.toUpperCase();for(var l=0;e.parentNode;){if(i>0&&l>i)return!1;if(e.parentNode.tagName===t&&(!r||r(e.parentNode)))return!0;e=e.parentNode,l++}return!1},_getRowAndColumnCount(e){for(var t=0,i=0,r=e.getElementsByTagName("tr"),l=0;l<r.length;l++){var s=r[l].getAttribute("rowspan")||0;s&&(s=parseInt(s,10)),t+=s||1;for(var a=0,o=r[l].getElementsByTagName("td"),c=0;c<o.length;c++){var n=o[c].getAttribute("colspan")||0;n&&(n=parseInt(n,10)),a+=n||1}i=Math.max(i,a)}return{rows:t,columns:i}},_markDataTables(e){for(var t=e.getElementsByTagName("table"),i=0;i<t.length;i++){var r=t[i],l=r.getAttribute("role");if(l=="presentation"){r._readabilityDataTable=!1;continue}var s=r.getAttribute("datatable");if(s=="0"){r._readabilityDataTable=!1;continue}var a=r.getAttribute("summary");if(a){r._readabilityDataTable=!0;continue}var o=r.getElementsByTagName("caption")[0];if(o&&o.childNodes.length){r._readabilityDataTable=!0;continue}var c=["col","colgroup","tfoot","thead","th"],n=function(f){return!!r.getElementsByTagName(f)[0]};if(c.some(n)){this.log("Data table because found data-y descendant"),r._readabilityDataTable=!0;continue}if(r.getElementsByTagName("table")[0]){r._readabilityDataTable=!1;continue}var h=this._getRowAndColumnCount(r);if(h.columns==1||h.rows==1){r._readabilityDataTable=!1;continue}if(h.rows>=10||h.columns>4){r._readabilityDataTable=!0;continue}r._readabilityDataTable=h.rows*h.columns>10}},_fixLazyImages(e){this._forEachNode(this._getAllNodesWithTag(e,["img","picture","figure"]),function(t){if(t.src&&this.REGEXPS.b64DataUrl.test(t.src)){var i=this.REGEXPS.b64DataUrl.exec(t.src);if(i[1]==="image/svg+xml")return;for(var r=!1,l=0;l<t.attributes.length;l++){var s=t.attributes[l];if(s.name!=="src"&&/\.(jpg|jpeg|png|webp)/i.test(s.value)){r=!0;break}}if(r){var a=i[0].length,o=t.src.length-a;o<133&&t.removeAttribute("src")}}if(!((t.src||t.srcset&&t.srcset!="null")&&!t.className.toLowerCase().includes("lazy"))){for(var c=0;c<t.attributes.length;c++)if(s=t.attributes[c],!(s.name==="src"||s.name==="srcset"||s.name==="alt")){var n=null;if(/\.(jpg|jpeg|png|webp)\s+\d/.test(s.value)?n="srcset":/^\s*\S+\.(jpg|jpeg|png|webp)\S*\s*$/.test(s.value)&&(n="src"),n){if(t.tagName==="IMG"||t.tagName==="PICTURE")t.setAttribute(n,s.value);else if(t.tagName==="FIGURE"&&!this._getAllNodesWithTag(t,["img","picture"]).length){var h=this._doc.createElement("img");h.setAttribute(n,s.value),t.appendChild(h)}}}}})},_getTextDensity(e,t){var i=this._getInnerText(e,!0).length;if(i===0)return 0;var r=0,l=this._getAllNodesWithTag(e,t);return this._forEachNode(l,s=>r+=this._getInnerText(s,!0).length),r/i},_cleanConditionally(e,t){this._flagIsActive(this.FLAG_CLEAN_CONDITIONALLY)&&this._removeNodes(this._getAllNodesWithTag(e,[t]),function(i){var r=function(g){return g._readabilityDataTable},l=t==="ul"||t==="ol";if(!l){var s=0,a=this._getAllNodesWithTag(i,["ul","ol"]);this._forEachNode(a,g=>s+=this._getInnerText(g).length),l=s/this._getInnerText(i).length>.9}if(t==="table"&&r(i)||this._hasAncestorTag(i,"table",-1,r)||this._hasAncestorTag(i,"code")||[...i.getElementsByTagName("table")].some(g=>g._readabilityDataTable))return!1;var o=this._getClassWeight(i);this.log("Cleaning Conditionally",i);var c=0;if(o+c<0)return!0;if(this._getCharCount(i,",")<10){for(var n=i.getElementsByTagName("p").length,h=i.getElementsByTagName("img").length,f=i.getElementsByTagName("li").length-100,_=i.getElementsByTagName("input").length,v=this._getTextDensity(i,["h1","h2","h3","h4","h5","h6"]),T=0,p=this._getAllNodesWithTag(i,["object","embed","iframe"]),y=0;y<p.length;y++){for(var d=0;d<p[y].attributes.length;d++)if(this._allowedVideoRegex.test(p[y].attributes[d].value))return!1;if(p[y].tagName==="object"&&this._allowedVideoRegex.test(p[y].innerHTML))return!1;T++}var R=this._getInnerText(i);if(this.REGEXPS.adWords.test(R)||this.REGEXPS.loadingWords.test(R))return!0;var w=R.length,b=this._getLinkDensity(i),C=["SPAN","LI","TD"].concat(Array.from(this.DIV_TO_P_ELEMS)),I=this._getTextDensity(i,C),B=this._hasAncestorTag(i,"figure"),u=(()=>{const N=[];return!B&&h>1&&n/h<.5&&N.push(`Bad p to img ratio (img=${h}, p=${n})`),!l&&f>n&&N.push(`Too many li's outside of a list. (li=${f} > p=${n})`),_>Math.floor(n/3)&&N.push(`Too many inputs per p. (input=${_}, p=${n})`),!l&&!B&&v<.9&&w<25&&(h===0||h>2)&&b>0&&N.push(`Suspiciously short. (headingDensity=${v}, img=${h}, linkDensity=${b})`),!l&&o<25&&b>.2+this._linkDensityModifier&&N.push(`Low weight and a little linky. (linkDensity=${b})`),o>=25&&b>.5+this._linkDensityModifier&&N.push(`High weight and mostly links. (linkDensity=${b})`),(T===1&&w<75||T>1)&&N.push(`Suspicious embed. (embedCount=${T}, contentLength=${w})`),h===0&&I===0&&N.push(`No useful content. (img=${h}, textDensity=${I})`),N.length?(this.log("Checks failed",N),!0):!1})();if(l&&u){for(var P=0;P<i.children.length;P++)if(i.children[P].children.length>1)return u;let N=i.getElementsByTagName("li").length;if(h==N)return!1}return u}return!1})},_cleanMatchedNodes(e,t){for(var i=this._getNextNode(e,!0),r=this._getNextNode(e);r&&r!=i;)t.call(this,r,r.className+" "+r.id)?r=this._removeAndGetNext(r):r=this._getNextNode(r)},_cleanHeaders(e){let t=this._getAllNodesWithTag(e,["h1","h2"]);this._removeNodes(t,function(i){let r=this._getClassWeight(i)<0;return r&&this.log("Removing header with low class weight:",i),r})},_headerDuplicatesTitle(e){if(e.tagName!="H1"&&e.tagName!="H2")return!1;var t=this._getInnerText(e,!1);return this.log("Evaluating similarity of header:",t,this._articleTitle),this._textSimilarity(this._articleTitle,t)>.75},_flagIsActive(e){return(this._flags&e)>0},_removeFlag(e){this._flags=this._flags&~e},_isProbablyVisible(e){return(!e.style||e.style.display!="none")&&(!e.style||e.style.visibility!="hidden")&&!e.hasAttribute("hidden")&&(!e.hasAttribute("aria-hidden")||e.getAttribute("aria-hidden")!="true"||e.className&&e.className.includes&&e.className.includes("fallback-image"))},parse(){if(this._maxElemsToParse>0){var e=this._doc.getElementsByTagName("*").length;if(e>this._maxElemsToParse)throw new Error("Aborting parsing document; "+e+" elements found")}this._unwrapNoscriptImages(this._doc);var t=this._disableJSONLD?{}:this._getJSONLD(this._doc);this._removeScripts(this._doc),this._prepDocument();var i=this._getArticleMetadata(t);this._metadata=i,this._articleTitle=i.title;var r=this._grabArticle();if(!r)return null;if(this.log("Grabbed: "+r.innerHTML),this._postProcessContent(r),!i.excerpt){var l=r.getElementsByTagName("p");l.length&&(i.excerpt=l[0].textContent.trim())}var s=r.textContent;return{title:this._articleTitle,byline:i.byline||this._articleByline,dir:this._articleDir,lang:this._articleLang,content:this._serializer(r),textContent:s,length:s.length,excerpt:i.excerpt,siteName:i.siteName||this._articleSiteName,publishedTime:i.publishedTime}}},L.exports=x})(J);var ne=J.exports,z={exports:{}};(function(L){var x={unlikelyCandidates:/-ad-|ai2html|banner|breadcrumbs|combx|comment|community|cover-wrap|disqus|extra|footer|gdpr|header|legends|menu|related|remark|replies|rss|shoutbox|sidebar|skyscraper|social|sponsor|supplemental|ad-break|agegate|pagination|pager|popup|yom-remote/i,okMaybeItsACandidate:/and|article|body|column|content|main|shadow/i};function e(i){return(!i.style||i.style.display!="none")&&!i.hasAttribute("hidden")&&(!i.hasAttribute("aria-hidden")||i.getAttribute("aria-hidden")!="true"||i.className&&i.className.includes&&i.className.includes("fallback-image"))}function t(i,r={}){typeof r=="function"&&(r={visibilityChecker:r});var l={minScore:20,minContentLength:140,visibilityChecker:e};r=Object.assign(l,r);var s=i.querySelectorAll("p, pre, article"),a=i.querySelectorAll("div > br");if(a.length){var o=new Set(s);[].forEach.call(a,function(n){o.add(n.parentNode)}),s=Array.from(o)}var c=0;return[].some.call(s,function(n){if(!r.visibilityChecker(n))return!1;var h=n.className+" "+n.id;if(x.unlikelyCandidates.test(h)&&!x.okMaybeItsACandidate.test(h)||n.matches("li p"))return!1;var f=n.textContent.trim().length;return f<r.minContentLength?!1:(c+=Math.sqrt(f-r.minContentLength),c>r.minScore)})}L.exports=t})(z);var he=z.exports,oe=ne,ce=he,ue={Readability:oe,isProbablyReaderable:ce};const ge=5,Q=2e3;function U(){const L=document.cloneNode(!0),e=new ue.Readability(L).parse();if(!e||!e.textContent){console.log("[ContentScript] Readability found no content. Sending empty chunks."),chrome.runtime.sendMessage({action:"analyzePageContent",url:window.location.href,contentChunks:[]});return}const t=e.textContent.replace(/\s+/g," ").trim(),i=[];if(t.length>0)for(let l=0;l<t.length;l+=Q)i.push(t.substring(l,l+Q));const r=i.slice(0,ge);console.log(`[ContentScript] Proactively sending ${r.length} chunks to background.`),chrome.runtime.sendMessage({action:"analyzePageContent",url:window.location.href,contentChunks:r},l=>{chrome.runtime.lastError?console.warn(`[CS] Error sending content: ${chrome.runtime.lastError.message}`):l&&!l.success&&console.warn("[CS] Background failed to process content:",l.error)})}chrome.runtime.onMessage.addListener((L,x,e)=>L.action==="getTextContentFromPage"?(console.log("[ContentScript] Received manual refresh request."),U(),e({status:"processing_initiated_by_manual_refresh"}),!0):!1),document.readyState==="complete"||document.readyState==="interactive"?setTimeout(U,500):window.addEventListener("load",()=>{setTimeout(U,500)},{once:!0}),console.log("[ContentScript] IsThisPhishy v1.2.0 loaded (proactive mode).")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
